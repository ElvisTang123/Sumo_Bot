
Sumo_Bot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011868  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a34  08011a08  08011a08  00021a08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801243c  0801243c  000304a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801243c  0801243c  0002243c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012444  08012444  000304a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012444  08012444  00022444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012448  08012448  00022448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a8  20000000  0801244c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  200004a8  080128f4  000304a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000091c  080128f4  0003091c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000304a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022a28  00000000  00000000  000304d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040ab  00000000  00000000  00052f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001808  00000000  00000000  00056fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001678  00000000  00000000  000587b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eaed  00000000  00000000  00059e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f297  00000000  00000000  0007891d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7501  00000000  00000000  00097bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013f0b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b68  00000000  00000000  0013f108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004a8 	.word	0x200004a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080119f0 	.word	0x080119f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004ac 	.word	0x200004ac
 80001dc:	080119f0 	.word	0x080119f0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <HCSR04_DistCalc>:
 *      Author: Prestige
 */

#include "HCSR04.h"

void HCSR04_DistCalc(HCSR04* US){
 8001008:	b480      	push	{r7}
 800100a:	b09d      	sub	sp, #116	; 0x74
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

	char Buff[100];
	uint16_t Buff_length;

	if (US->EXTI_Val2 > US->EXTI_Val1){
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800101c:	429a      	cmp	r2, r3
 800101e:	dd0d      	ble.n	800103c <HCSR04_DistCalc+0x34>
		US->EXTI_Diff = US->EXTI_Val2 - US->EXTI_Val1;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001026:	b29a      	uxth	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800102e:	b29b      	uxth	r3, r3
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	b29b      	uxth	r3, r3
 8001034:	b21a      	sxth	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	831a      	strh	r2, [r3, #24]
 800103a:	e016      	b.n	800106a <HCSR04_DistCalc+0x62>
	}
	else if(US->EXTI_Val1 > US->EXTI_Val2){
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001048:	429a      	cmp	r2, r3
 800104a:	dd0e      	ble.n	800106a <HCSR04_DistCalc+0x62>
		US->EXTI_Diff = (0xffff - US->EXTI_Val1) + US->EXTI_Val2;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001052:	b29a      	uxth	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800105a:	b29b      	uxth	r3, r3
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	b29b      	uxth	r3, r3
 8001060:	3b01      	subs	r3, #1
 8001062:	b29b      	uxth	r3, r3
 8001064:	b21a      	sxth	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	831a      	strh	r2, [r3, #24]
	}
	US->EXTI_Diff = US->EXTI_Diff/58;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HCSR04_DistCalc+0x88>)
 8001072:	fb82 1203 	smull	r1, r2, r2, r3
 8001076:	441a      	add	r2, r3
 8001078:	1152      	asrs	r2, r2, #5
 800107a:	17db      	asrs	r3, r3, #31
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	b21a      	sxth	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	831a      	strh	r2, [r3, #24]
	//Buff_length = sprintf(Buff,"Distance: %d cm\r\n", US->EXTI_Diff);
	//HAL_UART_Transmit(&huart1, (uint8_t *)Buff, Buff_length, HAL_MAX_DELAY);

}
 8001084:	bf00      	nop
 8001086:	3774      	adds	r7, #116	; 0x74
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	8d3dcb09 	.word	0x8d3dcb09

08001094 <LineDetect>:
 *      Author: Prestige
 */
#include "Line_Detect.h"


void LineDetect(IR_Sensor* IR){
 8001094:	b480      	push	{r7}
 8001096:	b09d      	sub	sp, #116	; 0x74
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	  char Buff[100];
	  uint16_t Buff_length;

	  if(IR->DI_GPIO->IDR & IR->IDR_Mask){
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	691b      	ldr	r3, [r3, #16]
	  else{
		  //Buff_length = sprintf(Buff,"Line Color: White\r\n");
		  //HAL_UART_Transmit(&huart1, (uint8_t *)Buff, Buff_length, HAL_MAX_DELAY);
	  }

}
 80010a2:	bf00      	nop
 80010a4:	3774      	adds	r7, #116	; 0x74
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <MPU6050_Init>:
 */

#include "MPU6050.h"

void MPU6050_Init (MPU6050* IMU)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b088      	sub	sp, #32
 80010b2:	af04      	add	r7, sp, #16
 80010b4:	6078      	str	r0, [r7, #4]
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (IMU->hi2c, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2301      	movs	r3, #1
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	f107 030f 	add.w	r3, r7, #15
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2301      	movs	r3, #1
 80010cc:	2275      	movs	r2, #117	; 0x75
 80010ce:	21d0      	movs	r1, #208	; 0xd0
 80010d0:	f003 fb12 	bl	80046f8 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	2b68      	cmp	r3, #104	; 0x68
 80010d8:	d143      	bne.n	8001162 <MPU6050_Init+0xb4>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(IMU->hi2c, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e6:	9302      	str	r3, [sp, #8]
 80010e8:	2301      	movs	r3, #1
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	f107 030e 	add.w	r3, r7, #14
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2301      	movs	r3, #1
 80010f4:	226b      	movs	r2, #107	; 0x6b
 80010f6:	21d0      	movs	r1, #208	; 0xd0
 80010f8:	f003 fa04 	bl	8004504 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 80010fc:	2307      	movs	r3, #7
 80010fe:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(IMU->hi2c, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001108:	9302      	str	r3, [sp, #8]
 800110a:	2301      	movs	r3, #1
 800110c:	9301      	str	r3, [sp, #4]
 800110e:	f107 030e 	add.w	r3, r7, #14
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2301      	movs	r3, #1
 8001116:	2219      	movs	r2, #25
 8001118:	21d0      	movs	r1, #208	; 0xd0
 800111a:	f003 f9f3 	bl	8004504 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=1 -> ± 4g
		Data = 0x01;
 800111e:	2301      	movs	r3, #1
 8001120:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(IMU->hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6818      	ldr	r0, [r3, #0]
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	2301      	movs	r3, #1
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	f107 030e 	add.w	r3, r7, #14
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	221c      	movs	r2, #28
 800113a:	21d0      	movs	r1, #208	; 0xd0
 800113c:	f003 f9e2 	bl	8004504 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
		Data = 0x00;
 8001140:	2300      	movs	r3, #0
 8001142:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(IMU->hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6818      	ldr	r0, [r3, #0]
 8001148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114c:	9302      	str	r3, [sp, #8]
 800114e:	2301      	movs	r3, #1
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	f107 030e 	add.w	r3, r7, #14
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2301      	movs	r3, #1
 800115a:	221b      	movs	r2, #27
 800115c:	21d0      	movs	r1, #208	; 0xd0
 800115e:	f003 f9d1 	bl	8004504 <HAL_I2C_Mem_Write>
	}

}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <enable>:
 */

#include "motor_driver.h"

void enable(Motor_t* mot)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mot->EN_GPIO, mot->EN_pin, GPIO_PIN_SET);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6958      	ldr	r0, [r3, #20]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	8b1b      	ldrh	r3, [r3, #24]
 800117a:	2201      	movs	r2, #1
 800117c:	4619      	mov	r1, r3
 800117e:	f002 fd27 	bl	8003bd0 <HAL_GPIO_WritePin>

}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <disable>:

void disable(Motor_t* mot)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mot->EN_GPIO, mot->EN_pin, GPIO_PIN_RESET);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6958      	ldr	r0, [r3, #20]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	8b1b      	ldrh	r3, [r3, #24]
 800119a:	2200      	movs	r2, #0
 800119c:	4619      	mov	r1, r3
 800119e:	f002 fd17 	bl	8003bd0 <HAL_GPIO_WritePin>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <set_level>:

void set_level(Motor_t* mot, int32_t level)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	6039      	str	r1, [r7, #0]
	if(level>=0){
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db46      	blt.n	8001248 <set_level+0x9e>
		__HAL_TIM_SET_COMPARE(mot->htim ,mot->IN1_pin, level);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	891b      	ldrh	r3, [r3, #8]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d105      	bne.n	80011ce <set_level+0x24>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	635a      	str	r2, [r3, #52]	; 0x34
 80011cc:	e018      	b.n	8001200 <set_level+0x56>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	891b      	ldrh	r3, [r3, #8]
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d105      	bne.n	80011e2 <set_level+0x38>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	6393      	str	r3, [r2, #56]	; 0x38
 80011e0:	e00e      	b.n	8001200 <set_level+0x56>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	891b      	ldrh	r3, [r3, #8]
 80011e6:	2b08      	cmp	r3, #8
 80011e8:	d105      	bne.n	80011f6 <set_level+0x4c>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80011f4:	e004      	b.n	8001200 <set_level+0x56>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(mot->htim ,mot->IN2_pin, 0);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	8a1b      	ldrh	r3, [r3, #16]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d105      	bne.n	8001214 <set_level+0x6a>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2200      	movs	r2, #0
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else{
		__HAL_TIM_SET_COMPARE(mot->htim ,mot->IN1_pin, 0);
		__HAL_TIM_SET_COMPARE(mot->htim ,mot->IN2_pin, -(level));
	}
}
 8001212:	e067      	b.n	80012e4 <set_level+0x13a>
		__HAL_TIM_SET_COMPARE(mot->htim ,mot->IN2_pin, 0);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	8a1b      	ldrh	r3, [r3, #16]
 8001218:	2b04      	cmp	r3, #4
 800121a:	d105      	bne.n	8001228 <set_level+0x7e>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	2300      	movs	r3, #0
 8001224:	6393      	str	r3, [r2, #56]	; 0x38
 8001226:	e05d      	b.n	80012e4 <set_level+0x13a>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	8a1b      	ldrh	r3, [r3, #16]
 800122c:	2b08      	cmp	r3, #8
 800122e:	d105      	bne.n	800123c <set_level+0x92>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	2300      	movs	r3, #0
 8001238:	63d3      	str	r3, [r2, #60]	; 0x3c
 800123a:	e053      	b.n	80012e4 <set_level+0x13a>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	2300      	movs	r3, #0
 8001244:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001246:	e04d      	b.n	80012e4 <set_level+0x13a>
		__HAL_TIM_SET_COMPARE(mot->htim ,mot->IN1_pin, 0);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	891b      	ldrh	r3, [r3, #8]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d105      	bne.n	800125c <set_level+0xb2>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2200      	movs	r2, #0
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
 800125a:	e018      	b.n	800128e <set_level+0xe4>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	891b      	ldrh	r3, [r3, #8]
 8001260:	2b04      	cmp	r3, #4
 8001262:	d105      	bne.n	8001270 <set_level+0xc6>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	2300      	movs	r3, #0
 800126c:	6393      	str	r3, [r2, #56]	; 0x38
 800126e:	e00e      	b.n	800128e <set_level+0xe4>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	891b      	ldrh	r3, [r3, #8]
 8001274:	2b08      	cmp	r3, #8
 8001276:	d105      	bne.n	8001284 <set_level+0xda>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	2300      	movs	r3, #0
 8001280:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001282:	e004      	b.n	800128e <set_level+0xe4>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	2300      	movs	r3, #0
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(mot->htim ,mot->IN2_pin, -(level));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	8a1b      	ldrh	r3, [r3, #16]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d106      	bne.n	80012a4 <set_level+0xfa>
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	425a      	negs	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012a2:	e01f      	b.n	80012e4 <set_level+0x13a>
		__HAL_TIM_SET_COMPARE(mot->htim ,mot->IN2_pin, -(level));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	8a1b      	ldrh	r3, [r3, #16]
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d107      	bne.n	80012bc <set_level+0x112>
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	4259      	negs	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	460b      	mov	r3, r1
 80012b8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80012ba:	e013      	b.n	80012e4 <set_level+0x13a>
		__HAL_TIM_SET_COMPARE(mot->htim ,mot->IN2_pin, -(level));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	8a1b      	ldrh	r3, [r3, #16]
 80012c0:	2b08      	cmp	r3, #8
 80012c2:	d107      	bne.n	80012d4 <set_level+0x12a>
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	4259      	negs	r1, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	460b      	mov	r3, r1
 80012d0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80012d2:	e007      	b.n	80012e4 <set_level+0x13a>
		__HAL_TIM_SET_COMPARE(mot->htim ,mot->IN2_pin, -(level));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	4259      	negs	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	460b      	mov	r3, r1
 80012e0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80012e2:	e7ff      	b.n	80012e4 <set_level+0x13a>
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <getWidth>:
 *      Author: Prestige
 */

#include "Remote_Control.h"

void getWidth(RC_t* RC){
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

	int refClock = TIMCLOCK/(PRESCALAR + 1);
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <getWidth+0x74>)
 80012fa:	60fb      	str	r3, [r7, #12]
	int mFactor = 1000000/refClock;
 80012fc:	4a19      	ldr	r2, [pc, #100]	; (8001364 <getWidth+0x74>)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	fb92 f3f3 	sdiv	r3, r2, r3
 8001304:	60bb      	str	r3, [r7, #8]

	if (RC->IC_Val2 > RC->IC_Val1){
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	8ada      	ldrh	r2, [r3, #22]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	8a9b      	ldrh	r3, [r3, #20]
 800130e:	429a      	cmp	r2, r3
 8001310:	d908      	bls.n	8001324 <getWidth+0x34>
		RC->Diff = RC->IC_Val2-RC->IC_Val1;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	8ada      	ldrh	r2, [r3, #22]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	8a9b      	ldrh	r3, [r3, #20]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	b29a      	uxth	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	831a      	strh	r2, [r3, #24]
 8001322:	e00f      	b.n	8001344 <getWidth+0x54>
	}

	else if (RC->IC_Val1 > RC->IC_Val2){
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	8a9a      	ldrh	r2, [r3, #20]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	8adb      	ldrh	r3, [r3, #22]
 800132c:	429a      	cmp	r2, r3
 800132e:	d909      	bls.n	8001344 <getWidth+0x54>
		RC->Diff = (0xffff - RC->IC_Val1) + RC->IC_Val2;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	8ada      	ldrh	r2, [r3, #22]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	8a9b      	ldrh	r3, [r3, #20]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	b29b      	uxth	r3, r3
 800133c:	3b01      	subs	r3, #1
 800133e:	b29a      	uxth	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	831a      	strh	r2, [r3, #24]
	}
	RC->usWidth = RC->Diff * mFactor;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	8b1a      	ldrh	r2, [r3, #24]
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	b29b      	uxth	r3, r3
 800134c:	fb12 f303 	smulbb	r3, r2, r3
 8001350:	b29a      	uxth	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	835a      	strh	r2, [r3, #26]
}
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	000f4240 	.word	0x000f4240

08001368 <UART_Print_String>:
 *      Author: Prestige
 */

#include "USART.h"

void UART_Print_String(char string[100]){
 8001368:	b580      	push	{r7, lr}
 800136a:	b09c      	sub	sp, #112	; 0x70
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

	  char Buff[100];
	  uint16_t Buff_length;

	  Buff_length = sprintf(Buff, string);
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	4618      	mov	r0, r3
 8001378:	f00c fd50 	bl	800de1c <siprintf>
 800137c:	4603      	mov	r3, r0
 800137e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	  HAL_UART_Transmit(&huart1, (uint8_t *)Buff, Buff_length, HAL_MAX_DELAY);
 8001382:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001386:	f107 0108 	add.w	r1, r7, #8
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	4803      	ldr	r0, [pc, #12]	; (800139c <UART_Print_String+0x34>)
 8001390:	f006 f84d 	bl	800742e <HAL_UART_Transmit>
}
 8001394:	bf00      	nop
 8001396:	3770      	adds	r7, #112	; 0x70
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000680 	.word	0x20000680

080013a0 <UART_Print_Val>:

void UART_Print_Val(char string[100], int Value){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b09c      	sub	sp, #112	; 0x70
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]

	  char Buff[100];
	  uint16_t Buff_length;

	  Buff_length = sprintf(Buff, string, Value);
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f00c fd32 	bl	800de1c <siprintf>
 80013b8:	4603      	mov	r3, r0
 80013ba:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	  HAL_UART_Transmit(&huart1, (uint8_t *)Buff, Buff_length, HAL_MAX_DELAY);
 80013be:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80013c2:	f107 0108 	add.w	r1, r7, #8
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	4803      	ldr	r0, [pc, #12]	; (80013d8 <UART_Print_Val+0x38>)
 80013cc:	f006 f82f 	bl	800742e <HAL_UART_Transmit>
}
 80013d0:	bf00      	nop
 80013d2:	3770      	adds	r7, #112	; 0x70
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000680 	.word	0x20000680

080013dc <check_ref_reg>:


#include "lidar.h"

void check_ref_reg(VL53L0X_DEV lidar, UART_HandleTypeDef* huart)
{
 80013dc:	b5b0      	push	{r4, r5, r7, lr}
 80013de:	b0bc      	sub	sp, #240	; 0xf0
 80013e0:	af04      	add	r7, sp, #16
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
	uint8_t data1[3] = {0};
 80013e6:	4b28      	ldr	r3, [pc, #160]	; (8001488 <check_ref_reg+0xac>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
 80013ee:	2300      	movs	r3, #0
 80013f0:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
	uint16_t data2 = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	uint16_t data3 = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	uint8_t message[200] = {0};
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	22c4      	movs	r2, #196	; 0xc4
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f00b fe7d 	bl	800d10c <memset>
	uint16_t mess_len;

	// Check the reference registers
	VL53L0X_ReadMulti(lidar, LIDAR_REF1, data1, 3);
 8001412:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8001416:	2303      	movs	r3, #3
 8001418:	21c0      	movs	r1, #192	; 0xc0
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f00b fd0e 	bl	800ce3c <VL53L0X_ReadMulti>
	VL53L0X_RdWord(lidar, LIDAR_REF4, &data2);
 8001420:	f107 03d6 	add.w	r3, r7, #214	; 0xd6
 8001424:	461a      	mov	r2, r3
 8001426:	2151      	movs	r1, #81	; 0x51
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f00b fdd7 	bl	800cfdc <VL53L0X_RdWord>
	VL53L0X_RdWord(lidar, LIDAR_REF5, &data3);
 800142e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001432:	461a      	mov	r2, r3
 8001434:	2161      	movs	r1, #97	; 0x61
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f00b fdd0 	bl	800cfdc <VL53L0X_RdWord>

	mess_len = (uint16_t) sprintf((char*) message,
				"Ref1 (0xC0): 0x%02X\r\nRef2 (0xC1): 0x%02X\r\nRef3 (0xC2): 0x%02X\r\nRef4 (0x51): 0x%04X\r\nRef5 (0x61): 0x%04X\r\n\r\n",
				data1[0], data1[1],	data1[2], data2, data3);
 800143c:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
	mess_len = (uint16_t) sprintf((char*) message,
 8001440:	461c      	mov	r4, r3
				data1[0], data1[1],	data1[2], data2, data3);
 8001442:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
	mess_len = (uint16_t) sprintf((char*) message,
 8001446:	461d      	mov	r5, r3
				data1[0], data1[1],	data1[2], data2, data3);
 8001448:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
	mess_len = (uint16_t) sprintf((char*) message,
 800144c:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8001450:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 8001454:	f107 000c 	add.w	r0, r7, #12
 8001458:	9102      	str	r1, [sp, #8]
 800145a:	9201      	str	r2, [sp, #4]
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	462b      	mov	r3, r5
 8001460:	4622      	mov	r2, r4
 8001462:	490a      	ldr	r1, [pc, #40]	; (800148c <check_ref_reg+0xb0>)
 8001464:	f00c fcda 	bl	800de1c <siprintf>
 8001468:	4603      	mov	r3, r0
 800146a:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde

	HAL_UART_Transmit(&huart1, message, mess_len, 1000);
 800146e:	f8b7 20de 	ldrh.w	r2, [r7, #222]	; 0xde
 8001472:	f107 010c 	add.w	r1, r7, #12
 8001476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <check_ref_reg+0xb4>)
 800147c:	f005 ffd7 	bl	800742e <HAL_UART_Transmit>
}
 8001480:	bf00      	nop
 8001482:	37e0      	adds	r7, #224	; 0xe0
 8001484:	46bd      	mov	sp, r7
 8001486:	bdb0      	pop	{r4, r5, r7, pc}
 8001488:	08011a74 	.word	0x08011a74
 800148c:	08011a08 	.word	0x08011a08
 8001490:	20000680 	.word	0x20000680

08001494 <init_lidar>:
void init_lidar(VL53L0X_DEV lidar, I2C_HandleTypeDef* i2c)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
	lidar->I2cDevAddr = LIDAR_ADDR;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2252      	movs	r2, #82	; 0x52
 80014a2:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	lidar->comms_speed_khz = 100;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2264      	movs	r2, #100	; 0x64
 80014aa:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e
	lidar->comms_type = 1; // i2c
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
	lidar->i2c = i2c;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <setup_lidar_continuous>:

	return Status;
}

VL53L0X_Error setup_lidar_continuous(VL53L0X_DEV lidar)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b09e      	sub	sp, #120	; 0x78
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	uint8_t VhvSettings;
	uint8_t PhaseCal;
	VL53L0X_DeviceInfo_t lidar_info = {0};
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	2263      	movs	r2, #99	; 0x63
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f00b fe16 	bl	800d10c <memset>

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	Status = VL53L0X_DataInit(lidar);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f006 ff8e 	bl	8008408 <VL53L0X_DataInit>
 80014ec:	4603      	mov	r3, r0
 80014ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (Status == VL53L0X_ERROR_NONE)
 80014f2:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d108      	bne.n	800150c <setup_lidar_continuous+0x42>
		Status = VL53L0X_GetDeviceInfo(lidar, &lidar_info);
 80014fa:	f107 0308 	add.w	r3, r7, #8
 80014fe:	4619      	mov	r1, r3
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f006 ff5b 	bl	80083bc <VL53L0X_GetDeviceInfo>
 8001506:	4603      	mov	r3, r0
 8001508:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (Status == VL53L0X_ERROR_NONE)
 800150c:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8001510:	2b00      	cmp	r3, #0
 8001512:	d105      	bne.n	8001520 <setup_lidar_continuous+0x56>
		Status = VL53L0X_StaticInit(lidar);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f007 f8ed 	bl	80086f4 <VL53L0X_StaticInit>
 800151a:	4603      	mov	r3, r0
 800151c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (Status == VL53L0X_ERROR_NONE)
 8001520:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8001524:	2b00      	cmp	r3, #0
 8001526:	d10a      	bne.n	800153e <setup_lidar_continuous+0x74>
	// from https://github.com/STMicroelectronics/STM32CubeL4/blob/master/Projects/B-L475E-IOT01A/Applications/Proximity/Src/vl53l0x/vl53l0x_tof.c
		Status = VL53L0X_PerformRefCalibration(lidar, &VhvSettings, &PhaseCal);
 8001528:	f107 026d 	add.w	r2, r7, #109	; 0x6d
 800152c:	f107 036e 	add.w	r3, r7, #110	; 0x6e
 8001530:	4619      	mov	r1, r3
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f007 ff8e 	bl	8009454 <VL53L0X_PerformRefCalibration>
 8001538:	4603      	mov	r3, r0
 800153a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (Status == VL53L0X_ERROR_NONE)
 800153e:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10a      	bne.n	800155c <setup_lidar_continuous+0x92>
		Status = VL53L0X_PerformRefSpadManagement(lidar, &refSpadCount, &isApertureSpads);
 8001546:	f107 026f 	add.w	r2, r7, #111	; 0x6f
 800154a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800154e:	4619      	mov	r1, r3
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f008 fc0c 	bl	8009d6e <VL53L0X_PerformRefSpadManagement>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (Status == VL53L0X_ERROR_NONE)
 800155c:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8001560:	2b00      	cmp	r3, #0
 8001562:	d106      	bne.n	8001572 <setup_lidar_continuous+0xa8>
		Status = VL53L0X_SetDeviceMode(lidar, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8001564:	2101      	movs	r1, #1
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f007 facc 	bl	8008b04 <VL53L0X_SetDeviceMode>
 800156c:	4603      	mov	r3, r0
 800156e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (Status == VL53L0X_ERROR_NONE)
 8001572:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8001576:	2b00      	cmp	r3, #0
 8001578:	d105      	bne.n	8001586 <setup_lidar_continuous+0xbc>
		Status = VL53L0X_StartMeasurement(lidar);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f007 ffe6 	bl	800954c <VL53L0X_StartMeasurement>
 8001580:	4603      	mov	r3, r0
 8001582:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
}
 8001586:	bf00      	nop
 8001588:	4618      	mov	r0, r3
 800158a:	3778      	adds	r7, #120	; 0x78
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us (uint16_t us)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <delay_us+0x30>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2200      	movs	r2, #0
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 80015a2:	bf00      	nop
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <delay_us+0x30>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d3f9      	bcc.n	80015a4 <delay_us+0x14>
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000560 	.word	0x20000560

080015c4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	// MPU6050 struct attribute config
	IMU_1.hi2c = &hi2c1;
 80015ca:	4ba1      	ldr	r3, [pc, #644]	; (8001850 <main+0x28c>)
 80015cc:	4aa1      	ldr	r2, [pc, #644]	; (8001854 <main+0x290>)
 80015ce:	601a      	str	r2, [r3, #0]
	IMU_1.Accel_X = 0;
 80015d0:	4b9f      	ldr	r3, [pc, #636]	; (8001850 <main+0x28c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	809a      	strh	r2, [r3, #4]
	IMU_1.Accel_Y = 0;
 80015d6:	4b9e      	ldr	r3, [pc, #632]	; (8001850 <main+0x28c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	80da      	strh	r2, [r3, #6]
	IMU_1.Accel_Z = 0;
 80015dc:	4b9c      	ldr	r3, [pc, #624]	; (8001850 <main+0x28c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	811a      	strh	r2, [r3, #8]
	IMU_1.Gyro_X = 0;
 80015e2:	4b9b      	ldr	r3, [pc, #620]	; (8001850 <main+0x28c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	831a      	strh	r2, [r3, #24]
	IMU_1.Gyro_Y = 0;
 80015e8:	4b99      	ldr	r3, [pc, #612]	; (8001850 <main+0x28c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	835a      	strh	r2, [r3, #26]
	IMU_1.Gyro_Z = 0;
 80015ee:	4b98      	ldr	r3, [pc, #608]	; (8001850 <main+0x28c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	839a      	strh	r2, [r3, #28]

	// IR Sensor struct attribute config
	IR1.DI_GPIO = GPIOA;
 80015f4:	4b98      	ldr	r3, [pc, #608]	; (8001858 <main+0x294>)
 80015f6:	4a99      	ldr	r2, [pc, #612]	; (800185c <main+0x298>)
 80015f8:	601a      	str	r2, [r3, #0]
	IR1.IDR_Mask = GPIO_IDR_ID11;
 80015fa:	4b97      	ldr	r3, [pc, #604]	; (8001858 <main+0x294>)
 80015fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001600:	605a      	str	r2, [r3, #4]
	IR1.IDR_Pos = GPIO_IDR_ID11_Pos;
 8001602:	4b95      	ldr	r3, [pc, #596]	; (8001858 <main+0x294>)
 8001604:	220b      	movs	r2, #11
 8001606:	609a      	str	r2, [r3, #8]

	IR2.DI_GPIO = GPIOC;
 8001608:	4b95      	ldr	r3, [pc, #596]	; (8001860 <main+0x29c>)
 800160a:	4a96      	ldr	r2, [pc, #600]	; (8001864 <main+0x2a0>)
 800160c:	601a      	str	r2, [r3, #0]
	IR2.IDR_Mask = GPIO_IDR_ID13;
 800160e:	4b94      	ldr	r3, [pc, #592]	; (8001860 <main+0x29c>)
 8001610:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001614:	605a      	str	r2, [r3, #4]
	IR2.IDR_Pos = GPIO_IDR_ID13_Pos;
 8001616:	4b92      	ldr	r3, [pc, #584]	; (8001860 <main+0x29c>)
 8001618:	220d      	movs	r2, #13
 800161a:	609a      	str	r2, [r3, #8]

	// HCSR04 struct attribute config
	US.Trig_GPIO = GPIOC;
 800161c:	4b92      	ldr	r3, [pc, #584]	; (8001868 <main+0x2a4>)
 800161e:	4a91      	ldr	r2, [pc, #580]	; (8001864 <main+0x2a0>)
 8001620:	601a      	str	r2, [r3, #0]
	US.Trig_Pin = GPIO_PIN_14;
 8001622:	4b91      	ldr	r3, [pc, #580]	; (8001868 <main+0x2a4>)
 8001624:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001628:	605a      	str	r2, [r3, #4]
	US.Echo_GPIO = GPIOC;
 800162a:	4b8f      	ldr	r3, [pc, #572]	; (8001868 <main+0x2a4>)
 800162c:	4a8d      	ldr	r2, [pc, #564]	; (8001864 <main+0x2a0>)
 800162e:	609a      	str	r2, [r3, #8]
	US.Echo_IDR_Mask = GPIO_IDR_ID15;
 8001630:	4b8d      	ldr	r3, [pc, #564]	; (8001868 <main+0x2a4>)
 8001632:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001636:	60da      	str	r2, [r3, #12]
	US.Echo_IDR_Pos = GPIO_IDR_ID15_Pos;
 8001638:	4b8b      	ldr	r3, [pc, #556]	; (8001868 <main+0x2a4>)
 800163a:	220f      	movs	r2, #15
 800163c:	611a      	str	r2, [r3, #16]

	// Motor struct attribute config
	motor_1.htim = &htim2;
 800163e:	4b8b      	ldr	r3, [pc, #556]	; (800186c <main+0x2a8>)
 8001640:	4a8b      	ldr	r2, [pc, #556]	; (8001870 <main+0x2ac>)
 8001642:	601a      	str	r2, [r3, #0]
	motor_1.IN1_GPIO = GPIOA;
 8001644:	4b89      	ldr	r3, [pc, #548]	; (800186c <main+0x2a8>)
 8001646:	4a85      	ldr	r2, [pc, #532]	; (800185c <main+0x298>)
 8001648:	605a      	str	r2, [r3, #4]
	motor_1.IN1_pin = TIM_CHANNEL_2;
 800164a:	4b88      	ldr	r3, [pc, #544]	; (800186c <main+0x2a8>)
 800164c:	2204      	movs	r2, #4
 800164e:	811a      	strh	r2, [r3, #8]
	motor_1.IN2_GPIO = GPIOA;
 8001650:	4b86      	ldr	r3, [pc, #536]	; (800186c <main+0x2a8>)
 8001652:	4a82      	ldr	r2, [pc, #520]	; (800185c <main+0x298>)
 8001654:	60da      	str	r2, [r3, #12]
	motor_1.IN2_pin = TIM_CHANNEL_3;
 8001656:	4b85      	ldr	r3, [pc, #532]	; (800186c <main+0x2a8>)
 8001658:	2208      	movs	r2, #8
 800165a:	821a      	strh	r2, [r3, #16]
	motor_1.EN_GPIO = GPIOA;
 800165c:	4b83      	ldr	r3, [pc, #524]	; (800186c <main+0x2a8>)
 800165e:	4a7f      	ldr	r2, [pc, #508]	; (800185c <main+0x298>)
 8001660:	615a      	str	r2, [r3, #20]
	motor_1.EN_pin = GPIO_PIN_4;
 8001662:	4b82      	ldr	r3, [pc, #520]	; (800186c <main+0x2a8>)
 8001664:	2210      	movs	r2, #16
 8001666:	831a      	strh	r2, [r3, #24]

	motor_3.htim = &htim3;
 8001668:	4b82      	ldr	r3, [pc, #520]	; (8001874 <main+0x2b0>)
 800166a:	4a83      	ldr	r2, [pc, #524]	; (8001878 <main+0x2b4>)
 800166c:	601a      	str	r2, [r3, #0]
	motor_3.IN1_GPIO = GPIOB;
 800166e:	4b81      	ldr	r3, [pc, #516]	; (8001874 <main+0x2b0>)
 8001670:	4a82      	ldr	r2, [pc, #520]	; (800187c <main+0x2b8>)
 8001672:	605a      	str	r2, [r3, #4]
	motor_3.IN1_pin = TIM_CHANNEL_3;
 8001674:	4b7f      	ldr	r3, [pc, #508]	; (8001874 <main+0x2b0>)
 8001676:	2208      	movs	r2, #8
 8001678:	811a      	strh	r2, [r3, #8]
	motor_3.IN2_GPIO = GPIOB;
 800167a:	4b7e      	ldr	r3, [pc, #504]	; (8001874 <main+0x2b0>)
 800167c:	4a7f      	ldr	r2, [pc, #508]	; (800187c <main+0x2b8>)
 800167e:	60da      	str	r2, [r3, #12]
	motor_3.IN2_pin = TIM_CHANNEL_4;
 8001680:	4b7c      	ldr	r3, [pc, #496]	; (8001874 <main+0x2b0>)
 8001682:	220c      	movs	r2, #12
 8001684:	821a      	strh	r2, [r3, #16]
	motor_3.EN_GPIO = GPIOB;
 8001686:	4b7b      	ldr	r3, [pc, #492]	; (8001874 <main+0x2b0>)
 8001688:	4a7c      	ldr	r2, [pc, #496]	; (800187c <main+0x2b8>)
 800168a:	615a      	str	r2, [r3, #20]
	motor_3.EN_pin = GPIO_PIN_10;
 800168c:	4b79      	ldr	r3, [pc, #484]	; (8001874 <main+0x2b0>)
 800168e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001692:	831a      	strh	r2, [r3, #24]

	// Remote Control struct attribute config
	throttle.htim = &htim4;
 8001694:	4b7a      	ldr	r3, [pc, #488]	; (8001880 <main+0x2bc>)
 8001696:	4a7b      	ldr	r2, [pc, #492]	; (8001884 <main+0x2c0>)
 8001698:	601a      	str	r2, [r3, #0]
	throttle.TIM_CH = TIM_CHANNEL_3;
 800169a:	4b79      	ldr	r3, [pc, #484]	; (8001880 <main+0x2bc>)
 800169c:	2208      	movs	r2, #8
 800169e:	809a      	strh	r2, [r3, #4]
	throttle.GPIO = GPIOB;
 80016a0:	4b77      	ldr	r3, [pc, #476]	; (8001880 <main+0x2bc>)
 80016a2:	4a76      	ldr	r2, [pc, #472]	; (800187c <main+0x2b8>)
 80016a4:	609a      	str	r2, [r3, #8]
	throttle.IDR_Mask = GPIO_IDR_ID8;
 80016a6:	4b76      	ldr	r3, [pc, #472]	; (8001880 <main+0x2bc>)
 80016a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ac:	60da      	str	r2, [r3, #12]
	throttle.IDR_Pos = GPIO_IDR_ID8_Pos;
 80016ae:	4b74      	ldr	r3, [pc, #464]	; (8001880 <main+0x2bc>)
 80016b0:	2208      	movs	r2, #8
 80016b2:	611a      	str	r2, [r3, #16]


	steering.htim = &htim4;
 80016b4:	4b74      	ldr	r3, [pc, #464]	; (8001888 <main+0x2c4>)
 80016b6:	4a73      	ldr	r2, [pc, #460]	; (8001884 <main+0x2c0>)
 80016b8:	601a      	str	r2, [r3, #0]
	steering.TIM_CH = TIM_CHANNEL_4;
 80016ba:	4b73      	ldr	r3, [pc, #460]	; (8001888 <main+0x2c4>)
 80016bc:	220c      	movs	r2, #12
 80016be:	809a      	strh	r2, [r3, #4]
	steering.GPIO = GPIOB;
 80016c0:	4b71      	ldr	r3, [pc, #452]	; (8001888 <main+0x2c4>)
 80016c2:	4a6e      	ldr	r2, [pc, #440]	; (800187c <main+0x2b8>)
 80016c4:	609a      	str	r2, [r3, #8]
	steering.IDR_Mask = GPIO_IDR_ID9;
 80016c6:	4b70      	ldr	r3, [pc, #448]	; (8001888 <main+0x2c4>)
 80016c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016cc:	60da      	str	r2, [r3, #12]
	steering.IDR_Pos = GPIO_IDR_ID9_Pos;
 80016ce:	4b6e      	ldr	r3, [pc, #440]	; (8001888 <main+0x2c4>)
 80016d0:	2209      	movs	r2, #9
 80016d2:	611a      	str	r2, [r3, #16]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80016d4:	f001 facc 	bl	8002c70 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80016d8:	f000 fb6a 	bl	8001db0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80016dc:	f000 fe3a 	bl	8002354 <MX_GPIO_Init>
	MX_ADC1_Init();
 80016e0:	f000 fbce 	bl	8001e80 <MX_ADC1_Init>
	MX_I2C1_Init();
 80016e4:	f000 fc1e 	bl	8001f24 <MX_I2C1_Init>
	MX_TIM2_Init();
 80016e8:	f000 fc9a 	bl	8002020 <MX_TIM2_Init>
	MX_TIM3_Init();
 80016ec:	f000 fd12 	bl	8002114 <MX_TIM3_Init>
	MX_TIM4_Init();
 80016f0:	f000 fd8a 	bl	8002208 <MX_TIM4_Init>
	MX_USART1_UART_Init();
 80016f4:	f000 fe04 	bl	8002300 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 80016f8:	f000 fc42 	bl	8001f80 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */

	HAL_ADC_Start(&hadc1);
 80016fc:	4863      	ldr	r0, [pc, #396]	; (800188c <main+0x2c8>)
 80016fe:	f001 fb91 	bl	8002e24 <HAL_ADC_Start>

	MPU6050_Init(&IMU_1);
 8001702:	4853      	ldr	r0, [pc, #332]	; (8001850 <main+0x28c>)
 8001704:	f7ff fcd3 	bl	80010ae <MPU6050_Init>

	HAL_TIM_Base_Start(&htim1);		// Start TIM1 for delay function
 8001708:	4861      	ldr	r0, [pc, #388]	; (8001890 <main+0x2cc>)
 800170a:	f004 fb6f 	bl	8005dec <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);		// Start TIM4 for external interrupt (PC15) counter reading
 800170e:	485d      	ldr	r0, [pc, #372]	; (8001884 <main+0x2c0>)
 8001710:	f004 fb6c 	bl	8005dec <HAL_TIM_Base_Start>

	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);	// Capturing RC throttle PWM with TIM4
 8001714:	2108      	movs	r1, #8
 8001716:	485b      	ldr	r0, [pc, #364]	; (8001884 <main+0x2c0>)
 8001718:	f004 fd1c 	bl	8006154 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);	// Capturing RC steering PWM with TIM4
 800171c:	210c      	movs	r1, #12
 800171e:	4859      	ldr	r0, [pc, #356]	; (8001884 <main+0x2c0>)
 8001720:	f004 fd18 	bl	8006154 <HAL_TIM_IC_Start_IT>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);	// PWM signals to motor 1
 8001724:	2104      	movs	r1, #4
 8001726:	4852      	ldr	r0, [pc, #328]	; (8001870 <main+0x2ac>)
 8001728:	f004 fc0a 	bl	8005f40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);	// PWM signals to motor 1
 800172c:	2108      	movs	r1, #8
 800172e:	4850      	ldr	r0, [pc, #320]	; (8001870 <main+0x2ac>)
 8001730:	f004 fc06 	bl	8005f40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);	// PWM signals to motor 3
 8001734:	2108      	movs	r1, #8
 8001736:	4850      	ldr	r0, [pc, #320]	; (8001878 <main+0x2b4>)
 8001738:	f004 fc02 	bl	8005f40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);	// PWM signals to motor 3
 800173c:	210c      	movs	r1, #12
 800173e:	484e      	ldr	r0, [pc, #312]	; (8001878 <main+0x2b4>)
 8001740:	f004 fbfe 	bl	8005f40 <HAL_TIM_PWM_Start>

	// Set both nSleep Pin and Enable Pin high to enable the motor driver
	enable(&motor_1);
 8001744:	4849      	ldr	r0, [pc, #292]	; (800186c <main+0x2a8>)
 8001746:	f7ff fd10 	bl	800116a <enable>
	enable(&motor_3);
 800174a:	484a      	ldr	r0, [pc, #296]	; (8001874 <main+0x2b0>)
 800174c:	f7ff fd0d 	bl	800116a <enable>

	// ToF
	init_lidar(lidar1, &hi2c1); 				// Initialize the device with the i2c handle it is connected to
 8001750:	4b50      	ldr	r3, [pc, #320]	; (8001894 <main+0x2d0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	493f      	ldr	r1, [pc, #252]	; (8001854 <main+0x290>)
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fe9c 	bl	8001494 <init_lidar>
	check_ref_reg(lidar1, &huart1);				// Check the reference registers, to verify that i2c communication is working
 800175c:	4b4d      	ldr	r3, [pc, #308]	; (8001894 <main+0x2d0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	494d      	ldr	r1, [pc, #308]	; (8001898 <main+0x2d4>)
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fe3a 	bl	80013dc <check_ref_reg>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;	// Initialize the sensor, I reccomend starting to check for errors at this point
 8001768:	2300      	movs	r3, #0
 800176a:	777b      	strb	r3, [r7, #29]
	if (Status == VL53L0X_ERROR_NONE)
 800176c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d106      	bne.n	8001782 <main+0x1be>
		Status = setup_lidar_continuous(lidar1);
 8001774:	4b47      	ldr	r3, [pc, #284]	; (8001894 <main+0x2d0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fea6 	bl	80014ca <setup_lidar_continuous>
 800177e:	4603      	mov	r3, r0
 8001780:	777b      	strb	r3, [r7, #29]
		//		UART_MPU6050_Gyro(IMU_1.Gy,'y');
		//		UART_MPU6050_Gyro(IMU_1.Gz,'z');
		//		UART_Print_String("-------------------------------------\r\n");

		// Finite State Machine
		switch(state){
 8001782:	4b46      	ldr	r3, [pc, #280]	; (800189c <main+0x2d8>)
 8001784:	f993 3000 	ldrsb.w	r3, [r3]
 8001788:	2b05      	cmp	r3, #5
 800178a:	f200 82f8 	bhi.w	8001d7e <main+0x7ba>
 800178e:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <main+0x1d0>)
 8001790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001794:	080017ad 	.word	0x080017ad
 8001798:	080018c1 	.word	0x080018c1
 800179c:	080019a9 	.word	0x080019a9
 80017a0:	08001a43 	.word	0x08001a43
 80017a4:	08001aa5 	.word	0x08001aa5
 80017a8:	08001d39 	.word	0x08001d39
		case 0:									// mode select state
			if(steering.usWidth > 1800){
 80017ac:	4b36      	ldr	r3, [pc, #216]	; (8001888 <main+0x2c4>)
 80017ae:	8b5b      	ldrh	r3, [r3, #26]
 80017b0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80017b4:	d91e      	bls.n	80017f4 <main+0x230>
				Auto_CNT++;
 80017b6:	4b3a      	ldr	r3, [pc, #232]	; (80018a0 <main+0x2dc>)
 80017b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	3301      	adds	r3, #1
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	b21a      	sxth	r2, r3
 80017c4:	4b36      	ldr	r3, [pc, #216]	; (80018a0 <main+0x2dc>)
 80017c6:	801a      	strh	r2, [r3, #0]
				Man_CNT = 0;
 80017c8:	4b36      	ldr	r3, [pc, #216]	; (80018a4 <main+0x2e0>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	801a      	strh	r2, [r3, #0]
				if(Auto_CNT == Auto_Target){
 80017ce:	4b34      	ldr	r3, [pc, #208]	; (80018a0 <main+0x2dc>)
 80017d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017d4:	4b34      	ldr	r3, [pc, #208]	; (80018a8 <main+0x2e4>)
 80017d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d106      	bne.n	80017ec <main+0x228>
					Auto_CNT = 0;
 80017de:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <main+0x2dc>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	801a      	strh	r2, [r3, #0]
					state = 5;
 80017e4:	4b2d      	ldr	r3, [pc, #180]	; (800189c <main+0x2d8>)
 80017e6:	2205      	movs	r2, #5
 80017e8:	701a      	strb	r2, [r3, #0]
			else{
				Auto_CNT = 0;
				Man_CNT = 0;
				state = 0;
			}
			break;
 80017ea:	e2cf      	b.n	8001d8c <main+0x7c8>
					state = 0;
 80017ec:	4b2b      	ldr	r3, [pc, #172]	; (800189c <main+0x2d8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
			break;
 80017f2:	e2cb      	b.n	8001d8c <main+0x7c8>
			else if(steering.usWidth < 1200){
 80017f4:	4b24      	ldr	r3, [pc, #144]	; (8001888 <main+0x2c4>)
 80017f6:	8b5b      	ldrh	r3, [r3, #26]
 80017f8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80017fc:	d21e      	bcs.n	800183c <main+0x278>
				Man_CNT++;
 80017fe:	4b29      	ldr	r3, [pc, #164]	; (80018a4 <main+0x2e0>)
 8001800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001804:	b29b      	uxth	r3, r3
 8001806:	3301      	adds	r3, #1
 8001808:	b29b      	uxth	r3, r3
 800180a:	b21a      	sxth	r2, r3
 800180c:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <main+0x2e0>)
 800180e:	801a      	strh	r2, [r3, #0]
				Auto_CNT = 0;
 8001810:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <main+0x2dc>)
 8001812:	2200      	movs	r2, #0
 8001814:	801a      	strh	r2, [r3, #0]
				if(Man_CNT == Man_Target){
 8001816:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <main+0x2e0>)
 8001818:	f9b3 2000 	ldrsh.w	r2, [r3]
 800181c:	4b23      	ldr	r3, [pc, #140]	; (80018ac <main+0x2e8>)
 800181e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001822:	429a      	cmp	r2, r3
 8001824:	d106      	bne.n	8001834 <main+0x270>
					Man_CNT = 0;
 8001826:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <main+0x2e0>)
 8001828:	2200      	movs	r2, #0
 800182a:	801a      	strh	r2, [r3, #0]
					state = 4;
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <main+0x2d8>)
 800182e:	2204      	movs	r2, #4
 8001830:	701a      	strb	r2, [r3, #0]
			break;
 8001832:	e2ab      	b.n	8001d8c <main+0x7c8>
					state = 0;
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <main+0x2d8>)
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
			break;
 800183a:	e2a7      	b.n	8001d8c <main+0x7c8>
				Auto_CNT = 0;
 800183c:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <main+0x2dc>)
 800183e:	2200      	movs	r2, #0
 8001840:	801a      	strh	r2, [r3, #0]
				Man_CNT = 0;
 8001842:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <main+0x2e0>)
 8001844:	2200      	movs	r2, #0
 8001846:	801a      	strh	r2, [r3, #0]
				state = 0;
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <main+0x2d8>)
 800184a:	2200      	movs	r2, #0
 800184c:	701a      	strb	r2, [r3, #0]
			break;
 800184e:	e29d      	b.n	8001d8c <main+0x7c8>
 8001850:	200006c4 	.word	0x200006c4
 8001854:	2000050c 	.word	0x2000050c
 8001858:	200006f0 	.word	0x200006f0
 800185c:	40020000 	.word	0x40020000
 8001860:	200006fc 	.word	0x200006fc
 8001864:	40020800 	.word	0x40020800
 8001868:	20000708 	.word	0x20000708
 800186c:	20000724 	.word	0x20000724
 8001870:	200005a8 	.word	0x200005a8
 8001874:	20000740 	.word	0x20000740
 8001878:	200005f0 	.word	0x200005f0
 800187c:	40020400 	.word	0x40020400
 8001880:	2000075c 	.word	0x2000075c
 8001884:	20000638 	.word	0x20000638
 8001888:	20000778 	.word	0x20000778
 800188c:	200004c4 	.word	0x200004c4
 8001890:	20000560 	.word	0x20000560
 8001894:	20000000 	.word	0x20000000
 8001898:	20000680 	.word	0x20000680
 800189c:	200008fc 	.word	0x200008fc
 80018a0:	200008fe 	.word	0x200008fe
 80018a4:	20000900 	.word	0x20000900
 80018a8:	20000004 	.word	0x20000004
 80018ac:	20000006 	.word	0x20000006
		case 1:									//	attack state
			while(throttle.usWidth < 1850){
				set_level(&motor_1, 0);
 80018b0:	2100      	movs	r1, #0
 80018b2:	48a6      	ldr	r0, [pc, #664]	; (8001b4c <main+0x588>)
 80018b4:	f7ff fc79 	bl	80011aa <set_level>
				set_level(&motor_3, 0);
 80018b8:	2100      	movs	r1, #0
 80018ba:	48a5      	ldr	r0, [pc, #660]	; (8001b50 <main+0x58c>)
 80018bc:	f7ff fc75 	bl	80011aa <set_level>
			while(throttle.usWidth < 1850){
 80018c0:	4ba4      	ldr	r3, [pc, #656]	; (8001b54 <main+0x590>)
 80018c2:	8b5b      	ldrh	r3, [r3, #26]
 80018c4:	f240 7239 	movw	r2, #1849	; 0x739
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d9f1      	bls.n	80018b0 <main+0x2ec>
			}
			// Sensor Read
			// HC-SRO4
			HAL_GPIO_WritePin(US.Trig_GPIO, US.Trig_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80018cc:	4ba2      	ldr	r3, [pc, #648]	; (8001b58 <main+0x594>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4aa1      	ldr	r2, [pc, #644]	; (8001b58 <main+0x594>)
 80018d2:	6852      	ldr	r2, [r2, #4]
 80018d4:	b291      	uxth	r1, r2
 80018d6:	2201      	movs	r2, #1
 80018d8:	4618      	mov	r0, r3
 80018da:	f002 f979 	bl	8003bd0 <HAL_GPIO_WritePin>
			delay_us (10);  // wait for 10 us
 80018de:	200a      	movs	r0, #10
 80018e0:	f7ff fe56 	bl	8001590 <delay_us>
			HAL_GPIO_WritePin(US.Trig_GPIO, US.Trig_Pin, GPIO_PIN_RESET);
 80018e4:	4b9c      	ldr	r3, [pc, #624]	; (8001b58 <main+0x594>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a9b      	ldr	r2, [pc, #620]	; (8001b58 <main+0x594>)
 80018ea:	6852      	ldr	r2, [r2, #4]
 80018ec:	b291      	uxth	r1, r2
 80018ee:	2200      	movs	r2, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f002 f96d 	bl	8003bd0 <HAL_GPIO_WritePin>

			// VL53L0X_ToF Sensor
			if (Status == VL53L0X_ERROR_NONE)
 80018f6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d109      	bne.n	8001912 <main+0x34e>
				Status = VL53L0X_GetMeasurementDataReady(lidar1, &mdr1);
 80018fe:	4b97      	ldr	r3, [pc, #604]	; (8001b5c <main+0x598>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f107 021c 	add.w	r2, r7, #28
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f007 fee0 	bl	80096ce <VL53L0X_GetMeasurementDataReady>
 800190e:	4603      	mov	r3, r0
 8001910:	777b      	strb	r3, [r7, #29]
			if (mdr1 && Status == VL53L0X_ERROR_NONE)
 8001912:	7f3b      	ldrb	r3, [r7, #28]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d01d      	beq.n	8001954 <main+0x390>
 8001918:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d119      	bne.n	8001954 <main+0x390>
			{
				Status = VL53L0X_GetRangingMeasurementData(lidar1, &range_data1);
 8001920:	4b8e      	ldr	r3, [pc, #568]	; (8001b5c <main+0x598>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	463a      	mov	r2, r7
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f007 ff11 	bl	8009750 <VL53L0X_GetRangingMeasurementData>
 800192e:	4603      	mov	r3, r0
 8001930:	777b      	strb	r3, [r7, #29]
				tof_data = (range_data1.RangeMilliMeter)/10; //converted to cm for simplicity
 8001932:	893b      	ldrh	r3, [r7, #8]
 8001934:	4a8a      	ldr	r2, [pc, #552]	; (8001b60 <main+0x59c>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	08db      	lsrs	r3, r3, #3
 800193c:	83fb      	strh	r3, [r7, #30]
				UART_Print_Val("Range (cm): %d cm\r\n" , tof_data);
 800193e:	8bfb      	ldrh	r3, [r7, #30]
 8001940:	4619      	mov	r1, r3
 8001942:	4888      	ldr	r0, [pc, #544]	; (8001b64 <main+0x5a0>)
 8001944:	f7ff fd2c 	bl	80013a0 <UART_Print_Val>
				VL53L0X_ClearInterruptMask(lidar1, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 8001948:	4b84      	ldr	r3, [pc, #528]	; (8001b5c <main+0x598>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2104      	movs	r1, #4
 800194e:	4618      	mov	r0, r3
 8001950:	f008 f9aa 	bl	8009ca8 <VL53L0X_ClearInterruptMask>
			}

			// Strategy Starts From Here

			UART_Print_Val("US Stuff (cm): %d\r\n cm", US.EXTI_Diff);
 8001954:	4b80      	ldr	r3, [pc, #512]	; (8001b58 <main+0x594>)
 8001956:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800195a:	4619      	mov	r1, r3
 800195c:	4882      	ldr	r0, [pc, #520]	; (8001b68 <main+0x5a4>)
 800195e:	f7ff fd1f 	bl	80013a0 <UART_Print_Val>



			if ((tof_data < ShortDistTarget) || (US.EXTI_Diff < ShortDistTarget)){
 8001962:	4b82      	ldr	r3, [pc, #520]	; (8001b6c <main+0x5a8>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	8bfa      	ldrh	r2, [r7, #30]
 8001968:	429a      	cmp	r2, r3
 800196a:	d307      	bcc.n	800197c <main+0x3b8>
 800196c:	4b7a      	ldr	r3, [pc, #488]	; (8001b58 <main+0x594>)
 800196e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001972:	461a      	mov	r2, r3
 8001974:	4b7d      	ldr	r3, [pc, #500]	; (8001b6c <main+0x5a8>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	da09      	bge.n	8001990 <main+0x3cc>
				set_level(&motor_1, -2048);
 800197c:	497c      	ldr	r1, [pc, #496]	; (8001b70 <main+0x5ac>)
 800197e:	4873      	ldr	r0, [pc, #460]	; (8001b4c <main+0x588>)
 8001980:	f7ff fc13 	bl	80011aa <set_level>
				set_level(&motor_3, 2048);
 8001984:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001988:	4871      	ldr	r0, [pc, #452]	; (8001b50 <main+0x58c>)
 800198a:	f7ff fc0e 	bl	80011aa <set_level>
 800198e:	e007      	b.n	80019a0 <main+0x3dc>
			}

			else {

				set_level(&motor_1, -2048);
 8001990:	4977      	ldr	r1, [pc, #476]	; (8001b70 <main+0x5ac>)
 8001992:	486e      	ldr	r0, [pc, #440]	; (8001b4c <main+0x588>)
 8001994:	f7ff fc09 	bl	80011aa <set_level>
				set_level(&motor_3, -2048);
 8001998:	4975      	ldr	r1, [pc, #468]	; (8001b70 <main+0x5ac>)
 800199a:	486d      	ldr	r0, [pc, #436]	; (8001b50 <main+0x58c>)
 800199c:	f7ff fc05 	bl	80011aa <set_level>
			}

			state = 2;
 80019a0:	4b74      	ldr	r3, [pc, #464]	; (8001b74 <main+0x5b0>)
 80019a2:	2202      	movs	r2, #2
 80019a4:	701a      	strb	r2, [r3, #0]
			break;
 80019a6:	e1f1      	b.n	8001d8c <main+0x7c8>

		case 2:									//	Line Detect State
			// Line Detect
			//UART_Print_String("Line Detect 1\r\n");
			LineDetect(&IR1);
 80019a8:	4873      	ldr	r0, [pc, #460]	; (8001b78 <main+0x5b4>)
 80019aa:	f7ff fb73 	bl	8001094 <LineDetect>
			//UART_Print_String("Line Detect 2\r\n");
			LineDetect(&IR2);
 80019ae:	4873      	ldr	r0, [pc, #460]	; (8001b7c <main+0x5b8>)
 80019b0:	f7ff fb70 	bl	8001094 <LineDetect>
			//		UART_Print_String("-------------------------------------\r\n");
			//			set_level(&motor_1, 0);
			//			set_level(&motor_3, 0);
			// Strategy Starts From Here

			if ((IR2.DI_GPIO->IDR & IR2.IDR_Mask) <100){
 80019b4:	4b71      	ldr	r3, [pc, #452]	; (8001b7c <main+0x5b8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	691a      	ldr	r2, [r3, #16]
 80019ba:	4b70      	ldr	r3, [pc, #448]	; (8001b7c <main+0x5b8>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4013      	ands	r3, r2
 80019c0:	2b63      	cmp	r3, #99	; 0x63
 80019c2:	d818      	bhi.n	80019f6 <main+0x432>
				//uint32_t start = HAL_GetTick();
				//timeout = HAL_GetTick() + setLevel;
				//UART_Print_Val("time %d \r\n", HAL_GetTick());
				set_level(&motor_1, 2048);
 80019c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019c8:	4860      	ldr	r0, [pc, #384]	; (8001b4c <main+0x588>)
 80019ca:	f7ff fbee 	bl	80011aa <set_level>
				set_level(&motor_3, -2048);
 80019ce:	4968      	ldr	r1, [pc, #416]	; (8001b70 <main+0x5ac>)
 80019d0:	485f      	ldr	r0, [pc, #380]	; (8001b50 <main+0x58c>)
 80019d2:	f7ff fbea 	bl	80011aa <set_level>
				HAL_Delay(70);
 80019d6:	2046      	movs	r0, #70	; 0x46
 80019d8:	f001 f9bc 	bl	8002d54 <HAL_Delay>
				set_level(&motor_1, -2048);
 80019dc:	4964      	ldr	r1, [pc, #400]	; (8001b70 <main+0x5ac>)
 80019de:	485b      	ldr	r0, [pc, #364]	; (8001b4c <main+0x588>)
 80019e0:	f7ff fbe3 	bl	80011aa <set_level>
				set_level(&motor_3, -2048);
 80019e4:	4962      	ldr	r1, [pc, #392]	; (8001b70 <main+0x5ac>)
 80019e6:	485a      	ldr	r0, [pc, #360]	; (8001b50 <main+0x58c>)
 80019e8:	f7ff fbdf 	bl	80011aa <set_level>
				HAL_Delay(350);
 80019ec:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80019f0:	f001 f9b0 	bl	8002d54 <HAL_Delay>
 80019f4:	e021      	b.n	8001a3a <main+0x476>


			}

			else if ((IR1.DI_GPIO->IDR & IR1.IDR_Mask)<100){
 80019f6:	4b60      	ldr	r3, [pc, #384]	; (8001b78 <main+0x5b4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	691a      	ldr	r2, [r3, #16]
 80019fc:	4b5e      	ldr	r3, [pc, #376]	; (8001b78 <main+0x5b4>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	4013      	ands	r3, r2
 8001a02:	2b63      	cmp	r3, #99	; 0x63
 8001a04:	d819      	bhi.n	8001a3a <main+0x476>
				set_level(&motor_1, 2048);
 8001a06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a0a:	4850      	ldr	r0, [pc, #320]	; (8001b4c <main+0x588>)
 8001a0c:	f7ff fbcd 	bl	80011aa <set_level>
				set_level(&motor_3, -2048);
 8001a10:	4957      	ldr	r1, [pc, #348]	; (8001b70 <main+0x5ac>)
 8001a12:	484f      	ldr	r0, [pc, #316]	; (8001b50 <main+0x58c>)
 8001a14:	f7ff fbc9 	bl	80011aa <set_level>
				HAL_Delay(70);
 8001a18:	2046      	movs	r0, #70	; 0x46
 8001a1a:	f001 f99b 	bl	8002d54 <HAL_Delay>
				set_level(&motor_1, 2048);
 8001a1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a22:	484a      	ldr	r0, [pc, #296]	; (8001b4c <main+0x588>)
 8001a24:	f7ff fbc1 	bl	80011aa <set_level>
				set_level(&motor_3, 2048);
 8001a28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a2c:	4848      	ldr	r0, [pc, #288]	; (8001b50 <main+0x58c>)
 8001a2e:	f7ff fbbc 	bl	80011aa <set_level>
				HAL_Delay(350);
 8001a32:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001a36:	f001 f98d 	bl	8002d54 <HAL_Delay>
			//UART_Print_Val("color %d \r\n", IR1.IDR_Mask);
			//			if(){
			//
			//			}

			state = 3;
 8001a3a:	4b4e      	ldr	r3, [pc, #312]	; (8001b74 <main+0x5b0>)
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	701a      	strb	r2, [r3, #0]
			break;
 8001a40:	e1a4      	b.n	8001d8c <main+0x7c8>
		case 3:
			//Battery Monitoring
			HAL_ADC_Start(&hadc1);
 8001a42:	484f      	ldr	r0, [pc, #316]	; (8001b80 <main+0x5bc>)
 8001a44:	f001 f9ee 	bl	8002e24 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1,1000);
 8001a48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a4c:	484c      	ldr	r0, [pc, #304]	; (8001b80 <main+0x5bc>)
 8001a4e:	f001 fad0 	bl	8002ff2 <HAL_ADC_PollForConversion>
			ADCValue = HAL_ADC_GetValue(&hadc1);
 8001a52:	484b      	ldr	r0, [pc, #300]	; (8001b80 <main+0x5bc>)
 8001a54:	f001 fb58 	bl	8003108 <HAL_ADC_GetValue>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	4b49      	ldr	r3, [pc, #292]	; (8001b84 <main+0x5c0>)
 8001a5e:	801a      	strh	r2, [r3, #0]
			//UART_Print_Val("ADC Value: %d\r\n", ADCValue);

			HAL_ADC_Stop(&hadc1);
 8001a60:	4847      	ldr	r0, [pc, #284]	; (8001b80 <main+0x5bc>)
 8001a62:	f001 fa93 	bl	8002f8c <HAL_ADC_Stop>
			if (ADCValue < 2880)
 8001a66:	4b47      	ldr	r3, [pc, #284]	; (8001b84 <main+0x5c0>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	f5b3 6f34 	cmp.w	r3, #2880	; 0xb40
 8001a6e:	d209      	bcs.n	8001a84 <main+0x4c0>
			{
				disable(&motor_1);
 8001a70:	4836      	ldr	r0, [pc, #216]	; (8001b4c <main+0x588>)
 8001a72:	f7ff fb8a 	bl	800118a <disable>
				disable(&motor_3);
 8001a76:	4836      	ldr	r0, [pc, #216]	; (8001b50 <main+0x58c>)
 8001a78:	f7ff fb87 	bl	800118a <disable>
				state = 3;
 8001a7c:	4b3d      	ldr	r3, [pc, #244]	; (8001b74 <main+0x5b0>)
 8001a7e:	2203      	movs	r2, #3
 8001a80:	701a      	strb	r2, [r3, #0]
			{
				enable(&motor_1);
				enable(&motor_3);
				state = 1;
			}
			break;
 8001a82:	e180      	b.n	8001d86 <main+0x7c2>
			else if (ADCValue >= 2880)
 8001a84:	4b3f      	ldr	r3, [pc, #252]	; (8001b84 <main+0x5c0>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	f5b3 6f34 	cmp.w	r3, #2880	; 0xb40
 8001a8c:	f0c0 817b 	bcc.w	8001d86 <main+0x7c2>
				enable(&motor_1);
 8001a90:	482e      	ldr	r0, [pc, #184]	; (8001b4c <main+0x588>)
 8001a92:	f7ff fb6a 	bl	800116a <enable>
				enable(&motor_3);
 8001a96:	482e      	ldr	r0, [pc, #184]	; (8001b50 <main+0x58c>)
 8001a98:	f7ff fb67 	bl	800116a <enable>
				state = 1;
 8001a9c:	4b35      	ldr	r3, [pc, #212]	; (8001b74 <main+0x5b0>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]
			break;
 8001aa2:	e170      	b.n	8001d86 <main+0x7c2>
		case 4:									// Manual Mode

			UART_Print_Val("Throttle: %d\r\n", throttle.usWidth);
 8001aa4:	4b2b      	ldr	r3, [pc, #172]	; (8001b54 <main+0x590>)
 8001aa6:	8b5b      	ldrh	r3, [r3, #26]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4837      	ldr	r0, [pc, #220]	; (8001b88 <main+0x5c4>)
 8001aac:	f7ff fc78 	bl	80013a0 <UART_Print_Val>
			UART_Print_Val("Steering: %d\r\n", steering.usWidth);
 8001ab0:	4b36      	ldr	r3, [pc, #216]	; (8001b8c <main+0x5c8>)
 8001ab2:	8b5b      	ldrh	r3, [r3, #26]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4836      	ldr	r0, [pc, #216]	; (8001b90 <main+0x5cc>)
 8001ab8:	f7ff fc72 	bl	80013a0 <UART_Print_Val>

			if(throttle.usWidth > 2000){
 8001abc:	4b25      	ldr	r3, [pc, #148]	; (8001b54 <main+0x590>)
 8001abe:	8b5b      	ldrh	r3, [r3, #26]
 8001ac0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ac4:	d904      	bls.n	8001ad0 <main+0x50c>
				throttle.usWidth = 2000;
 8001ac6:	4b23      	ldr	r3, [pc, #140]	; (8001b54 <main+0x590>)
 8001ac8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001acc:	835a      	strh	r2, [r3, #26]
 8001ace:	e008      	b.n	8001ae2 <main+0x51e>
			}
			else if(throttle.usWidth < 1000){
 8001ad0:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <main+0x590>)
 8001ad2:	8b5b      	ldrh	r3, [r3, #26]
 8001ad4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ad8:	d203      	bcs.n	8001ae2 <main+0x51e>
				throttle.usWidth = 1000;
 8001ada:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <main+0x590>)
 8001adc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ae0:	835a      	strh	r2, [r3, #26]
			}
			if(steering.usWidth > 2000){
 8001ae2:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <main+0x5c8>)
 8001ae4:	8b5b      	ldrh	r3, [r3, #26]
 8001ae6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001aea:	d904      	bls.n	8001af6 <main+0x532>
				steering.usWidth = 2000;
 8001aec:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <main+0x5c8>)
 8001aee:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001af2:	835a      	strh	r2, [r3, #26]
 8001af4:	e008      	b.n	8001b08 <main+0x544>
			}
			else if(steering.usWidth < 1000){
 8001af6:	4b25      	ldr	r3, [pc, #148]	; (8001b8c <main+0x5c8>)
 8001af8:	8b5b      	ldrh	r3, [r3, #26]
 8001afa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001afe:	d203      	bcs.n	8001b08 <main+0x544>
				steering.usWidth = 1000;
 8001b00:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <main+0x5c8>)
 8001b02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b06:	835a      	strh	r2, [r3, #26]
			}

			if (throttle.usWidth>1550){
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <main+0x590>)
 8001b0a:	8b5b      	ldrh	r3, [r3, #26]
 8001b0c:	f240 620e 	movw	r2, #1550	; 0x60e
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d941      	bls.n	8001b98 <main+0x5d4>
				duty = (-2048/500)*(throttle.usWidth -1500);
 8001b14:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <main+0x590>)
 8001b16:	8b5b      	ldrh	r3, [r3, #26]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	0392      	lsls	r2, r2, #14
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8001b26:	3310      	adds	r3, #16
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <main+0x5d0>)
 8001b2c:	801a      	strh	r2, [r3, #0]
				set_level(&motor_1, -duty);
 8001b2e:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <main+0x5d0>)
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	425b      	negs	r3, r3
 8001b34:	4619      	mov	r1, r3
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <main+0x588>)
 8001b38:	f7ff fb37 	bl	80011aa <set_level>
				set_level(&motor_3, +duty);
 8001b3c:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <main+0x5d0>)
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	4619      	mov	r1, r3
 8001b42:	4803      	ldr	r0, [pc, #12]	; (8001b50 <main+0x58c>)
 8001b44:	f7ff fb31 	bl	80011aa <set_level>
 8001b48:	e05f      	b.n	8001c0a <main+0x646>
 8001b4a:	bf00      	nop
 8001b4c:	20000724 	.word	0x20000724
 8001b50:	20000740 	.word	0x20000740
 8001b54:	2000075c 	.word	0x2000075c
 8001b58:	20000708 	.word	0x20000708
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	cccccccd 	.word	0xcccccccd
 8001b64:	08011a78 	.word	0x08011a78
 8001b68:	08011a8c 	.word	0x08011a8c
 8001b6c:	20000008 	.word	0x20000008
 8001b70:	fffff800 	.word	0xfffff800
 8001b74:	200008fc 	.word	0x200008fc
 8001b78:	200006f0 	.word	0x200006f0
 8001b7c:	200006fc 	.word	0x200006fc
 8001b80:	200004c4 	.word	0x200004c4
 8001b84:	20000796 	.word	0x20000796
 8001b88:	08011aa4 	.word	0x08011aa4
 8001b8c:	20000778 	.word	0x20000778
 8001b90:	08011ab4 	.word	0x08011ab4
 8001b94:	20000794 	.word	0x20000794
			}
			else if(throttle.usWidth<1450){
 8001b98:	4b7d      	ldr	r3, [pc, #500]	; (8001d90 <main+0x7cc>)
 8001b9a:	8b5b      	ldrh	r3, [r3, #26]
 8001b9c:	f240 52a9 	movw	r2, #1449	; 0x5a9
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d817      	bhi.n	8001bd4 <main+0x610>
				duty = (2048/500)*(1500-throttle.usWidth);
 8001ba4:	4b7a      	ldr	r3, [pc, #488]	; (8001d90 <main+0x7cc>)
 8001ba6:	8b5b      	ldrh	r3, [r3, #26]
 8001ba8:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8001bac:	3304      	adds	r3, #4
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	4b77      	ldr	r3, [pc, #476]	; (8001d94 <main+0x7d0>)
 8001bb6:	801a      	strh	r2, [r3, #0]
				set_level(&motor_1, duty);
 8001bb8:	4b76      	ldr	r3, [pc, #472]	; (8001d94 <main+0x7d0>)
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4876      	ldr	r0, [pc, #472]	; (8001d98 <main+0x7d4>)
 8001bc0:	f7ff faf3 	bl	80011aa <set_level>
				set_level(&motor_3, -duty);
 8001bc4:	4b73      	ldr	r3, [pc, #460]	; (8001d94 <main+0x7d0>)
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	425b      	negs	r3, r3
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4873      	ldr	r0, [pc, #460]	; (8001d9c <main+0x7d8>)
 8001bce:	f7ff faec 	bl	80011aa <set_level>
 8001bd2:	e01a      	b.n	8001c0a <main+0x646>
			}
			else if(throttle.usWidth>1450 && throttle.usWidth<1550){
 8001bd4:	4b6e      	ldr	r3, [pc, #440]	; (8001d90 <main+0x7cc>)
 8001bd6:	8b5b      	ldrh	r3, [r3, #26]
 8001bd8:	f240 52aa 	movw	r2, #1450	; 0x5aa
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d914      	bls.n	8001c0a <main+0x646>
 8001be0:	4b6b      	ldr	r3, [pc, #428]	; (8001d90 <main+0x7cc>)
 8001be2:	8b5b      	ldrh	r3, [r3, #26]
 8001be4:	f240 620d 	movw	r2, #1549	; 0x60d
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d80e      	bhi.n	8001c0a <main+0x646>
				duty = 0;
 8001bec:	4b69      	ldr	r3, [pc, #420]	; (8001d94 <main+0x7d0>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	801a      	strh	r2, [r3, #0]
				set_level(&motor_1, duty);
 8001bf2:	4b68      	ldr	r3, [pc, #416]	; (8001d94 <main+0x7d0>)
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4867      	ldr	r0, [pc, #412]	; (8001d98 <main+0x7d4>)
 8001bfa:	f7ff fad6 	bl	80011aa <set_level>
				set_level(&motor_3, duty);
 8001bfe:	4b65      	ldr	r3, [pc, #404]	; (8001d94 <main+0x7d0>)
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	4619      	mov	r1, r3
 8001c04:	4865      	ldr	r0, [pc, #404]	; (8001d9c <main+0x7d8>)
 8001c06:	f7ff fad0 	bl	80011aa <set_level>
			}

			if (steering.usWidth>1550 && throttle.usWidth >1550){
 8001c0a:	4b65      	ldr	r3, [pc, #404]	; (8001da0 <main+0x7dc>)
 8001c0c:	8b5b      	ldrh	r3, [r3, #26]
 8001c0e:	f240 620e 	movw	r2, #1550	; 0x60e
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d91d      	bls.n	8001c52 <main+0x68e>
 8001c16:	4b5e      	ldr	r3, [pc, #376]	; (8001d90 <main+0x7cc>)
 8001c18:	8b5b      	ldrh	r3, [r3, #26]
 8001c1a:	f240 620e 	movw	r2, #1550	; 0x60e
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d917      	bls.n	8001c52 <main+0x68e>
				duty = (2048/500)*(throttle.usWidth-1500);
 8001c22:	4b5b      	ldr	r3, [pc, #364]	; (8001d90 <main+0x7cc>)
 8001c24:	8b5b      	ldrh	r3, [r3, #26]
 8001c26:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	4b58      	ldr	r3, [pc, #352]	; (8001d94 <main+0x7d0>)
 8001c32:	801a      	strh	r2, [r3, #0]
				set_level(&motor_1, -duty);
 8001c34:	4b57      	ldr	r3, [pc, #348]	; (8001d94 <main+0x7d0>)
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	425b      	negs	r3, r3
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4856      	ldr	r0, [pc, #344]	; (8001d98 <main+0x7d4>)
 8001c3e:	f7ff fab4 	bl	80011aa <set_level>
				set_level(&motor_3, -duty);
 8001c42:	4b54      	ldr	r3, [pc, #336]	; (8001d94 <main+0x7d0>)
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	425b      	negs	r3, r3
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4854      	ldr	r0, [pc, #336]	; (8001d9c <main+0x7d8>)
 8001c4c:	f7ff faad 	bl	80011aa <set_level>
 8001c50:	e069      	b.n	8001d26 <main+0x762>
			}
			else if  (steering.usWidth>1550 && throttle.usWidth < 1450){
 8001c52:	4b53      	ldr	r3, [pc, #332]	; (8001da0 <main+0x7dc>)
 8001c54:	8b5b      	ldrh	r3, [r3, #26]
 8001c56:	f240 620e 	movw	r2, #1550	; 0x60e
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d91e      	bls.n	8001c9c <main+0x6d8>
 8001c5e:	4b4c      	ldr	r3, [pc, #304]	; (8001d90 <main+0x7cc>)
 8001c60:	8b5b      	ldrh	r3, [r3, #26]
 8001c62:	f240 52a9 	movw	r2, #1449	; 0x5a9
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d818      	bhi.n	8001c9c <main+0x6d8>
				duty = (2048/500)*(1500-throttle.usWidth);
 8001c6a:	4b49      	ldr	r3, [pc, #292]	; (8001d90 <main+0x7cc>)
 8001c6c:	8b5b      	ldrh	r3, [r3, #26]
 8001c6e:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8001c72:	3304      	adds	r3, #4
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	4b46      	ldr	r3, [pc, #280]	; (8001d94 <main+0x7d0>)
 8001c7c:	801a      	strh	r2, [r3, #0]
				set_level(&motor_1, -duty);
 8001c7e:	4b45      	ldr	r3, [pc, #276]	; (8001d94 <main+0x7d0>)
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	425b      	negs	r3, r3
 8001c84:	4619      	mov	r1, r3
 8001c86:	4844      	ldr	r0, [pc, #272]	; (8001d98 <main+0x7d4>)
 8001c88:	f7ff fa8f 	bl	80011aa <set_level>
				set_level(&motor_3, -duty);
 8001c8c:	4b41      	ldr	r3, [pc, #260]	; (8001d94 <main+0x7d0>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	425b      	negs	r3, r3
 8001c92:	4619      	mov	r1, r3
 8001c94:	4841      	ldr	r0, [pc, #260]	; (8001d9c <main+0x7d8>)
 8001c96:	f7ff fa88 	bl	80011aa <set_level>
 8001c9a:	e044      	b.n	8001d26 <main+0x762>
			}

			else if (steering.usWidth <1450 && throttle.usWidth >1550){
 8001c9c:	4b40      	ldr	r3, [pc, #256]	; (8001da0 <main+0x7dc>)
 8001c9e:	8b5b      	ldrh	r3, [r3, #26]
 8001ca0:	f240 52a9 	movw	r2, #1449	; 0x5a9
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d81b      	bhi.n	8001ce0 <main+0x71c>
 8001ca8:	4b39      	ldr	r3, [pc, #228]	; (8001d90 <main+0x7cc>)
 8001caa:	8b5b      	ldrh	r3, [r3, #26]
 8001cac:	f240 620e 	movw	r2, #1550	; 0x60e
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d915      	bls.n	8001ce0 <main+0x71c>
				duty = (2048/500)*(throttle.usWidth-1500);
 8001cb4:	4b36      	ldr	r3, [pc, #216]	; (8001d90 <main+0x7cc>)
 8001cb6:	8b5b      	ldrh	r3, [r3, #26]
 8001cb8:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	4b34      	ldr	r3, [pc, #208]	; (8001d94 <main+0x7d0>)
 8001cc4:	801a      	strh	r2, [r3, #0]
				set_level(&motor_1, +duty);
 8001cc6:	4b33      	ldr	r3, [pc, #204]	; (8001d94 <main+0x7d0>)
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4832      	ldr	r0, [pc, #200]	; (8001d98 <main+0x7d4>)
 8001cce:	f7ff fa6c 	bl	80011aa <set_level>
				set_level(&motor_3, +duty);
 8001cd2:	4b30      	ldr	r3, [pc, #192]	; (8001d94 <main+0x7d0>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4830      	ldr	r0, [pc, #192]	; (8001d9c <main+0x7d8>)
 8001cda:	f7ff fa66 	bl	80011aa <set_level>
 8001cde:	e022      	b.n	8001d26 <main+0x762>
			}
			else if  (steering.usWidth <1450 && throttle.usWidth < 1450){
 8001ce0:	4b2f      	ldr	r3, [pc, #188]	; (8001da0 <main+0x7dc>)
 8001ce2:	8b5b      	ldrh	r3, [r3, #26]
 8001ce4:	f240 52a9 	movw	r2, #1449	; 0x5a9
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d84e      	bhi.n	8001d8a <main+0x7c6>
 8001cec:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <main+0x7cc>)
 8001cee:	8b5b      	ldrh	r3, [r3, #26]
 8001cf0:	f240 52a9 	movw	r2, #1449	; 0x5a9
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d848      	bhi.n	8001d8a <main+0x7c6>
				duty = (2048/500)*(1500-throttle.usWidth);
 8001cf8:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <main+0x7cc>)
 8001cfa:	8b5b      	ldrh	r3, [r3, #26]
 8001cfc:	f5c3 63bb 	rsb	r3, r3, #1496	; 0x5d8
 8001d00:	3304      	adds	r3, #4
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	4b22      	ldr	r3, [pc, #136]	; (8001d94 <main+0x7d0>)
 8001d0a:	801a      	strh	r2, [r3, #0]
				set_level(&motor_1, +duty);
 8001d0c:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <main+0x7d0>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	4619      	mov	r1, r3
 8001d12:	4821      	ldr	r0, [pc, #132]	; (8001d98 <main+0x7d4>)
 8001d14:	f7ff fa49 	bl	80011aa <set_level>
				set_level(&motor_3, +duty);
 8001d18:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <main+0x7d0>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	481f      	ldr	r0, [pc, #124]	; (8001d9c <main+0x7d8>)
 8001d20:	f7ff fa43 	bl	80011aa <set_level>
			}

			break;
 8001d24:	e031      	b.n	8001d8a <main+0x7c6>
 8001d26:	e030      	b.n	8001d8a <main+0x7c6>
		case 5:
			while(throttle.usWidth < 1850){
				set_level(&motor_1, 0);
 8001d28:	2100      	movs	r1, #0
 8001d2a:	481b      	ldr	r0, [pc, #108]	; (8001d98 <main+0x7d4>)
 8001d2c:	f7ff fa3d 	bl	80011aa <set_level>
				set_level(&motor_3, 0);
 8001d30:	2100      	movs	r1, #0
 8001d32:	481a      	ldr	r0, [pc, #104]	; (8001d9c <main+0x7d8>)
 8001d34:	f7ff fa39 	bl	80011aa <set_level>
			while(throttle.usWidth < 1850){
 8001d38:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <main+0x7cc>)
 8001d3a:	8b5b      	ldrh	r3, [r3, #26]
 8001d3c:	f240 7239 	movw	r2, #1849	; 0x739
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d9f1      	bls.n	8001d28 <main+0x764>
			}
			set_level(&motor_1, 2048);
 8001d44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d48:	4813      	ldr	r0, [pc, #76]	; (8001d98 <main+0x7d4>)
 8001d4a:	f7ff fa2e 	bl	80011aa <set_level>
			set_level(&motor_3, 2048);
 8001d4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d52:	4812      	ldr	r0, [pc, #72]	; (8001d9c <main+0x7d8>)
 8001d54:	f7ff fa29 	bl	80011aa <set_level>
			HAL_Delay(220);
 8001d58:	20dc      	movs	r0, #220	; 0xdc
 8001d5a:	f000 fffb 	bl	8002d54 <HAL_Delay>
			set_level(&motor_1, 2048);
 8001d5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d62:	480d      	ldr	r0, [pc, #52]	; (8001d98 <main+0x7d4>)
 8001d64:	f7ff fa21 	bl	80011aa <set_level>
			set_level(&motor_3, -2048);
 8001d68:	490e      	ldr	r1, [pc, #56]	; (8001da4 <main+0x7e0>)
 8001d6a:	480c      	ldr	r0, [pc, #48]	; (8001d9c <main+0x7d8>)
 8001d6c:	f7ff fa1d 	bl	80011aa <set_level>
			HAL_Delay(300);
 8001d70:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001d74:	f000 ffee 	bl	8002d54 <HAL_Delay>
			state = 1;
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <main+0x7e4>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	701a      	strb	r2, [r3, #0]
		default:
			UART_Print_String("BAD CODE LOLOLOL\r\n");
 8001d7e:	480b      	ldr	r0, [pc, #44]	; (8001dac <main+0x7e8>)
 8001d80:	f7ff faf2 	bl	8001368 <UART_Print_String>
 8001d84:	e4fd      	b.n	8001782 <main+0x1be>
			break;
 8001d86:	bf00      	nop
 8001d88:	e4fb      	b.n	8001782 <main+0x1be>
			break;
 8001d8a:	bf00      	nop
		switch(state){
 8001d8c:	e4f9      	b.n	8001782 <main+0x1be>
 8001d8e:	bf00      	nop
 8001d90:	2000075c 	.word	0x2000075c
 8001d94:	20000794 	.word	0x20000794
 8001d98:	20000724 	.word	0x20000724
 8001d9c:	20000740 	.word	0x20000740
 8001da0:	20000778 	.word	0x20000778
 8001da4:	fffff800 	.word	0xfffff800
 8001da8:	200008fc 	.word	0x200008fc
 8001dac:	08011ac4 	.word	0x08011ac4

08001db0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b094      	sub	sp, #80	; 0x50
 8001db4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001db6:	f107 0320 	add.w	r3, r7, #32
 8001dba:	2230      	movs	r2, #48	; 0x30
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f00b f9a4 	bl	800d10c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <SystemClock_Config+0xc8>)
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	4a26      	ldr	r2, [pc, #152]	; (8001e78 <SystemClock_Config+0xc8>)
 8001dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de2:	6413      	str	r3, [r2, #64]	; 0x40
 8001de4:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <SystemClock_Config+0xc8>)
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001df0:	2300      	movs	r3, #0
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	4b21      	ldr	r3, [pc, #132]	; (8001e7c <SystemClock_Config+0xcc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a20      	ldr	r2, [pc, #128]	; (8001e7c <SystemClock_Config+0xcc>)
 8001dfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <SystemClock_Config+0xcc>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e16:	2302      	movs	r3, #2
 8001e18:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001e20:	2319      	movs	r3, #25
 8001e22:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 8001e24:	23c0      	movs	r3, #192	; 0xc0
 8001e26:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e2c:	2304      	movs	r3, #4
 8001e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e30:	f107 0320 	add.w	r3, r7, #32
 8001e34:	4618      	mov	r0, r3
 8001e36:	f003 fb31 	bl	800549c <HAL_RCC_OscConfig>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8001e40:	f000 fbc8 	bl	80025d4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e44:	230f      	movs	r3, #15
 8001e46:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e54:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e5a:	f107 030c 	add.w	r3, r7, #12
 8001e5e:	2103      	movs	r1, #3
 8001e60:	4618      	mov	r0, r3
 8001e62:	f003 fd93 	bl	800598c <HAL_RCC_ClockConfig>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8001e6c:	f000 fbb2 	bl	80025d4 <Error_Handler>
	}
}
 8001e70:	bf00      	nop
 8001e72:	3750      	adds	r7, #80	; 0x50
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40007000 	.word	0x40007000

08001e80 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001e86:	463b      	mov	r3, r7
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001e92:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <MX_ADC1_Init+0x98>)
 8001e94:	4a21      	ldr	r2, [pc, #132]	; (8001f1c <MX_ADC1_Init+0x9c>)
 8001e96:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e98:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <MX_ADC1_Init+0x98>)
 8001e9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e9e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ea0:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <MX_ADC1_Init+0x98>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001ea6:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <MX_ADC1_Init+0x98>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001eac:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <MX_ADC1_Init+0x98>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001eb2:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <MX_ADC1_Init+0x98>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001eba:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <MX_ADC1_Init+0x98>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ec0:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <MX_ADC1_Init+0x98>)
 8001ec2:	4a17      	ldr	r2, [pc, #92]	; (8001f20 <MX_ADC1_Init+0xa0>)
 8001ec4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ec6:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <MX_ADC1_Init+0x98>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001ecc:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <MX_ADC1_Init+0x98>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <MX_ADC1_Init+0x98>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001eda:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <MX_ADC1_Init+0x98>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ee0:	480d      	ldr	r0, [pc, #52]	; (8001f18 <MX_ADC1_Init+0x98>)
 8001ee2:	f000 ff5b 	bl	8002d9c <HAL_ADC_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8001eec:	f000 fb72 	bl	80025d4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001efc:	463b      	mov	r3, r7
 8001efe:	4619      	mov	r1, r3
 8001f00:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_ADC1_Init+0x98>)
 8001f02:	f001 f90f 	bl	8003124 <HAL_ADC_ConfigChannel>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8001f0c:	f000 fb62 	bl	80025d4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001f10:	bf00      	nop
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200004c4 	.word	0x200004c4
 8001f1c:	40012000 	.word	0x40012000
 8001f20:	0f000001 	.word	0x0f000001

08001f24 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f2a:	4a13      	ldr	r2, [pc, #76]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f2c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f30:	4a12      	ldr	r2, [pc, #72]	; (8001f7c <MX_I2C1_Init+0x58>)
 8001f32:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f46:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f48:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f54:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f60:	4804      	ldr	r0, [pc, #16]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f62:	f001 fe67 	bl	8003c34 <HAL_I2C_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001f6c:	f000 fb32 	bl	80025d4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	2000050c 	.word	0x2000050c
 8001f78:	40005400 	.word	0x40005400
 8001f7c:	000186a0 	.word	0x000186a0

08001f80 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f86:	f107 0308 	add.w	r3, r7, #8
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f94:	463b      	mov	r3, r7
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001f9c:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <MX_TIM1_Init+0x98>)
 8001f9e:	4a1f      	ldr	r2, [pc, #124]	; (800201c <MX_TIM1_Init+0x9c>)
 8001fa0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 95;
 8001fa2:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <MX_TIM1_Init+0x98>)
 8001fa4:	225f      	movs	r2, #95	; 0x5f
 8001fa6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <MX_TIM1_Init+0x98>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001fae:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <MX_TIM1_Init+0x98>)
 8001fb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fb4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb6:	4b18      	ldr	r3, [pc, #96]	; (8002018 <MX_TIM1_Init+0x98>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001fbc:	4b16      	ldr	r3, [pc, #88]	; (8002018 <MX_TIM1_Init+0x98>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <MX_TIM1_Init+0x98>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fc8:	4813      	ldr	r0, [pc, #76]	; (8002018 <MX_TIM1_Init+0x98>)
 8001fca:	f003 febf 	bl	8005d4c <HAL_TIM_Base_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM1_Init+0x58>
	{
		Error_Handler();
 8001fd4:	f000 fafe 	bl	80025d4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fdc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fde:	f107 0308 	add.w	r3, r7, #8
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480c      	ldr	r0, [pc, #48]	; (8002018 <MX_TIM1_Init+0x98>)
 8001fe6:	f004 fc35 	bl	8006854 <HAL_TIM_ConfigClockSource>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM1_Init+0x74>
	{
		Error_Handler();
 8001ff0:	f000 faf0 	bl	80025d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	4619      	mov	r1, r3
 8002000:	4805      	ldr	r0, [pc, #20]	; (8002018 <MX_TIM1_Init+0x98>)
 8002002:	f005 f945 	bl	8007290 <HAL_TIMEx_MasterConfigSynchronization>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 800200c:	f000 fae2 	bl	80025d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8002010:	bf00      	nop
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000560 	.word	0x20000560
 800201c:	40010000 	.word	0x40010000

08002020 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002026:	f107 0320 	add.w	r3, r7, #32
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	60da      	str	r2, [r3, #12]
 800203c:	611a      	str	r2, [r3, #16]
 800203e:	615a      	str	r2, [r3, #20]
 8002040:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002042:	4b33      	ldr	r3, [pc, #204]	; (8002110 <MX_TIM2_Init+0xf0>)
 8002044:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002048:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800204a:	4b31      	ldr	r3, [pc, #196]	; (8002110 <MX_TIM2_Init+0xf0>)
 800204c:	2200      	movs	r2, #0
 800204e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002050:	4b2f      	ldr	r3, [pc, #188]	; (8002110 <MX_TIM2_Init+0xf0>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 2048;
 8002056:	4b2e      	ldr	r3, [pc, #184]	; (8002110 <MX_TIM2_Init+0xf0>)
 8002058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800205c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800205e:	4b2c      	ldr	r3, [pc, #176]	; (8002110 <MX_TIM2_Init+0xf0>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002064:	4b2a      	ldr	r3, [pc, #168]	; (8002110 <MX_TIM2_Init+0xf0>)
 8002066:	2200      	movs	r2, #0
 8002068:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800206a:	4829      	ldr	r0, [pc, #164]	; (8002110 <MX_TIM2_Init+0xf0>)
 800206c:	f003 ff18 	bl	8005ea0 <HAL_TIM_PWM_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM2_Init+0x5a>
	{
		Error_Handler();
 8002076:	f000 faad 	bl	80025d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800207a:	2300      	movs	r3, #0
 800207c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002082:	f107 0320 	add.w	r3, r7, #32
 8002086:	4619      	mov	r1, r3
 8002088:	4821      	ldr	r0, [pc, #132]	; (8002110 <MX_TIM2_Init+0xf0>)
 800208a:	f005 f901 	bl	8007290 <HAL_TIMEx_MasterConfigSynchronization>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_TIM2_Init+0x78>
	{
		Error_Handler();
 8002094:	f000 fa9e 	bl	80025d4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002098:	2360      	movs	r3, #96	; 0x60
 800209a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	2200      	movs	r2, #0
 80020ac:	4619      	mov	r1, r3
 80020ae:	4818      	ldr	r0, [pc, #96]	; (8002110 <MX_TIM2_Init+0xf0>)
 80020b0:	f004 fb0e 	bl	80066d0 <HAL_TIM_PWM_ConfigChannel>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM2_Init+0x9e>
	{
		Error_Handler();
 80020ba:	f000 fa8b 	bl	80025d4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	2204      	movs	r2, #4
 80020c2:	4619      	mov	r1, r3
 80020c4:	4812      	ldr	r0, [pc, #72]	; (8002110 <MX_TIM2_Init+0xf0>)
 80020c6:	f004 fb03 	bl	80066d0 <HAL_TIM_PWM_ConfigChannel>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 80020d0:	f000 fa80 	bl	80025d4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	2208      	movs	r2, #8
 80020d8:	4619      	mov	r1, r3
 80020da:	480d      	ldr	r0, [pc, #52]	; (8002110 <MX_TIM2_Init+0xf0>)
 80020dc:	f004 faf8 	bl	80066d0 <HAL_TIM_PWM_ConfigChannel>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM2_Init+0xca>
	{
		Error_Handler();
 80020e6:	f000 fa75 	bl	80025d4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	220c      	movs	r2, #12
 80020ee:	4619      	mov	r1, r3
 80020f0:	4807      	ldr	r0, [pc, #28]	; (8002110 <MX_TIM2_Init+0xf0>)
 80020f2:	f004 faed 	bl	80066d0 <HAL_TIM_PWM_ConfigChannel>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM2_Init+0xe0>
	{
		Error_Handler();
 80020fc:	f000 fa6a 	bl	80025d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8002100:	4803      	ldr	r0, [pc, #12]	; (8002110 <MX_TIM2_Init+0xf0>)
 8002102:	f000 fbbd 	bl	8002880 <HAL_TIM_MspPostInit>

}
 8002106:	bf00      	nop
 8002108:	3728      	adds	r7, #40	; 0x28
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200005a8 	.word	0x200005a8

08002114 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	; 0x28
 8002118:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800211a:	f107 0320 	add.w	r3, r7, #32
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	60da      	str	r2, [r3, #12]
 8002130:	611a      	str	r2, [r3, #16]
 8002132:	615a      	str	r2, [r3, #20]
 8002134:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002136:	4b32      	ldr	r3, [pc, #200]	; (8002200 <MX_TIM3_Init+0xec>)
 8002138:	4a32      	ldr	r2, [pc, #200]	; (8002204 <MX_TIM3_Init+0xf0>)
 800213a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800213c:	4b30      	ldr	r3, [pc, #192]	; (8002200 <MX_TIM3_Init+0xec>)
 800213e:	2200      	movs	r2, #0
 8002140:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002142:	4b2f      	ldr	r3, [pc, #188]	; (8002200 <MX_TIM3_Init+0xec>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 2048;
 8002148:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <MX_TIM3_Init+0xec>)
 800214a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800214e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002150:	4b2b      	ldr	r3, [pc, #172]	; (8002200 <MX_TIM3_Init+0xec>)
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002156:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <MX_TIM3_Init+0xec>)
 8002158:	2200      	movs	r2, #0
 800215a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800215c:	4828      	ldr	r0, [pc, #160]	; (8002200 <MX_TIM3_Init+0xec>)
 800215e:	f003 fe9f 	bl	8005ea0 <HAL_TIM_PWM_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM3_Init+0x58>
	{
		Error_Handler();
 8002168:	f000 fa34 	bl	80025d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800216c:	2300      	movs	r3, #0
 800216e:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002174:	f107 0320 	add.w	r3, r7, #32
 8002178:	4619      	mov	r1, r3
 800217a:	4821      	ldr	r0, [pc, #132]	; (8002200 <MX_TIM3_Init+0xec>)
 800217c:	f005 f888 	bl	8007290 <HAL_TIMEx_MasterConfigSynchronization>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM3_Init+0x76>
	{
		Error_Handler();
 8002186:	f000 fa25 	bl	80025d4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800218a:	2360      	movs	r3, #96	; 0x60
 800218c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	2200      	movs	r2, #0
 800219e:	4619      	mov	r1, r3
 80021a0:	4817      	ldr	r0, [pc, #92]	; (8002200 <MX_TIM3_Init+0xec>)
 80021a2:	f004 fa95 	bl	80066d0 <HAL_TIM_PWM_ConfigChannel>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM3_Init+0x9c>
	{
		Error_Handler();
 80021ac:	f000 fa12 	bl	80025d4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	2204      	movs	r2, #4
 80021b4:	4619      	mov	r1, r3
 80021b6:	4812      	ldr	r0, [pc, #72]	; (8002200 <MX_TIM3_Init+0xec>)
 80021b8:	f004 fa8a 	bl	80066d0 <HAL_TIM_PWM_ConfigChannel>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 80021c2:	f000 fa07 	bl	80025d4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	2208      	movs	r2, #8
 80021ca:	4619      	mov	r1, r3
 80021cc:	480c      	ldr	r0, [pc, #48]	; (8002200 <MX_TIM3_Init+0xec>)
 80021ce:	f004 fa7f 	bl	80066d0 <HAL_TIM_PWM_ConfigChannel>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM3_Init+0xc8>
	{
		Error_Handler();
 80021d8:	f000 f9fc 	bl	80025d4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	220c      	movs	r2, #12
 80021e0:	4619      	mov	r1, r3
 80021e2:	4807      	ldr	r0, [pc, #28]	; (8002200 <MX_TIM3_Init+0xec>)
 80021e4:	f004 fa74 	bl	80066d0 <HAL_TIM_PWM_ConfigChannel>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_TIM3_Init+0xde>
	{
		Error_Handler();
 80021ee:	f000 f9f1 	bl	80025d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80021f2:	4803      	ldr	r0, [pc, #12]	; (8002200 <MX_TIM3_Init+0xec>)
 80021f4:	f000 fb44 	bl	8002880 <HAL_TIM_MspPostInit>

}
 80021f8:	bf00      	nop
 80021fa:	3728      	adds	r7, #40	; 0x28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	200005f0 	.word	0x200005f0
 8002204:	40000400 	.word	0x40000400

08002208 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08a      	sub	sp, #40	; 0x28
 800220c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800220e:	f107 0318 	add.w	r3, r7, #24
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800221c:	f107 0310 	add.w	r3, r7, #16
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8002226:	463b      	mov	r3, r7
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002232:	4b31      	ldr	r3, [pc, #196]	; (80022f8 <MX_TIM4_Init+0xf0>)
 8002234:	4a31      	ldr	r2, [pc, #196]	; (80022fc <MX_TIM4_Init+0xf4>)
 8002236:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 95;
 8002238:	4b2f      	ldr	r3, [pc, #188]	; (80022f8 <MX_TIM4_Init+0xf0>)
 800223a:	225f      	movs	r2, #95	; 0x5f
 800223c:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223e:	4b2e      	ldr	r3, [pc, #184]	; (80022f8 <MX_TIM4_Init+0xf0>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8002244:	4b2c      	ldr	r3, [pc, #176]	; (80022f8 <MX_TIM4_Init+0xf0>)
 8002246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800224a:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224c:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <MX_TIM4_Init+0xf0>)
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002252:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <MX_TIM4_Init+0xf0>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002258:	4827      	ldr	r0, [pc, #156]	; (80022f8 <MX_TIM4_Init+0xf0>)
 800225a:	f003 fd77 	bl	8005d4c <HAL_TIM_Base_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM4_Init+0x60>
	{
		Error_Handler();
 8002264:	f000 f9b6 	bl	80025d4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800226c:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800226e:	f107 0318 	add.w	r3, r7, #24
 8002272:	4619      	mov	r1, r3
 8002274:	4820      	ldr	r0, [pc, #128]	; (80022f8 <MX_TIM4_Init+0xf0>)
 8002276:	f004 faed 	bl	8006854 <HAL_TIM_ConfigClockSource>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM4_Init+0x7c>
	{
		Error_Handler();
 8002280:	f000 f9a8 	bl	80025d4 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002284:	481c      	ldr	r0, [pc, #112]	; (80022f8 <MX_TIM4_Init+0xf0>)
 8002286:	f003 ff0b 	bl	80060a0 <HAL_TIM_IC_Init>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_TIM4_Init+0x8c>
	{
		Error_Handler();
 8002290:	f000 f9a0 	bl	80025d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002294:	2300      	movs	r3, #0
 8002296:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800229c:	f107 0310 	add.w	r3, r7, #16
 80022a0:	4619      	mov	r1, r3
 80022a2:	4815      	ldr	r0, [pc, #84]	; (80022f8 <MX_TIM4_Init+0xf0>)
 80022a4:	f004 fff4 	bl	8007290 <HAL_TIMEx_MasterConfigSynchronization>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM4_Init+0xaa>
	{
		Error_Handler();
 80022ae:	f000 f991 	bl	80025d4 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80022b2:	230a      	movs	r3, #10
 80022b4:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80022b6:	2301      	movs	r3, #1
 80022b8:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80022c2:	463b      	mov	r3, r7
 80022c4:	2208      	movs	r2, #8
 80022c6:	4619      	mov	r1, r3
 80022c8:	480b      	ldr	r0, [pc, #44]	; (80022f8 <MX_TIM4_Init+0xf0>)
 80022ca:	f004 f965 	bl	8006598 <HAL_TIM_IC_ConfigChannel>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM4_Init+0xd0>
	{
		Error_Handler();
 80022d4:	f000 f97e 	bl	80025d4 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80022d8:	463b      	mov	r3, r7
 80022da:	220c      	movs	r2, #12
 80022dc:	4619      	mov	r1, r3
 80022de:	4806      	ldr	r0, [pc, #24]	; (80022f8 <MX_TIM4_Init+0xf0>)
 80022e0:	f004 f95a 	bl	8006598 <HAL_TIM_IC_ConfigChannel>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_TIM4_Init+0xe6>
	{
		Error_Handler();
 80022ea:	f000 f973 	bl	80025d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80022ee:	bf00      	nop
 80022f0:	3728      	adds	r7, #40	; 0x28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000638 	.word	0x20000638
 80022fc:	40000800 	.word	0x40000800

08002300 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002304:	4b11      	ldr	r3, [pc, #68]	; (800234c <MX_USART1_UART_Init+0x4c>)
 8002306:	4a12      	ldr	r2, [pc, #72]	; (8002350 <MX_USART1_UART_Init+0x50>)
 8002308:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800230a:	4b10      	ldr	r3, [pc, #64]	; (800234c <MX_USART1_UART_Init+0x4c>)
 800230c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002310:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <MX_USART1_UART_Init+0x4c>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <MX_USART1_UART_Init+0x4c>)
 800231a:	2200      	movs	r2, #0
 800231c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <MX_USART1_UART_Init+0x4c>)
 8002320:	2200      	movs	r2, #0
 8002322:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <MX_USART1_UART_Init+0x4c>)
 8002326:	220c      	movs	r2, #12
 8002328:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <MX_USART1_UART_Init+0x4c>)
 800232c:	2200      	movs	r2, #0
 800232e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <MX_USART1_UART_Init+0x4c>)
 8002332:	2200      	movs	r2, #0
 8002334:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002336:	4805      	ldr	r0, [pc, #20]	; (800234c <MX_USART1_UART_Init+0x4c>)
 8002338:	f005 f82c 	bl	8007394 <HAL_UART_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8002342:	f000 f947 	bl	80025d4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000680 	.word	0x20000680
 8002350:	40011000 	.word	0x40011000

08002354 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08a      	sub	sp, #40	; 0x28
 8002358:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235a:	f107 0314 	add.w	r3, r7, #20
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]
 8002368:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	4b5a      	ldr	r3, [pc, #360]	; (80024d8 <MX_GPIO_Init+0x184>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	4a59      	ldr	r2, [pc, #356]	; (80024d8 <MX_GPIO_Init+0x184>)
 8002374:	f043 0304 	orr.w	r3, r3, #4
 8002378:	6313      	str	r3, [r2, #48]	; 0x30
 800237a:	4b57      	ldr	r3, [pc, #348]	; (80024d8 <MX_GPIO_Init+0x184>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	4b53      	ldr	r3, [pc, #332]	; (80024d8 <MX_GPIO_Init+0x184>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	4a52      	ldr	r2, [pc, #328]	; (80024d8 <MX_GPIO_Init+0x184>)
 8002390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
 8002396:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <MX_GPIO_Init+0x184>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	4b4c      	ldr	r3, [pc, #304]	; (80024d8 <MX_GPIO_Init+0x184>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	4a4b      	ldr	r2, [pc, #300]	; (80024d8 <MX_GPIO_Init+0x184>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	6313      	str	r3, [r2, #48]	; 0x30
 80023b2:	4b49      	ldr	r3, [pc, #292]	; (80024d8 <MX_GPIO_Init+0x184>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	4b45      	ldr	r3, [pc, #276]	; (80024d8 <MX_GPIO_Init+0x184>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a44      	ldr	r2, [pc, #272]	; (80024d8 <MX_GPIO_Init+0x184>)
 80023c8:	f043 0302 	orr.w	r3, r3, #2
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b42      	ldr	r3, [pc, #264]	; (80024d8 <MX_GPIO_Init+0x184>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80023da:	2200      	movs	r2, #0
 80023dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023e0:	483e      	ldr	r0, [pc, #248]	; (80024dc <MX_GPIO_Init+0x188>)
 80023e2:	f001 fbf5 	bl	8003bd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, M1_EN_Pin|M2_EN_Pin, GPIO_PIN_RESET);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2190      	movs	r1, #144	; 0x90
 80023ea:	483d      	ldr	r0, [pc, #244]	; (80024e0 <MX_GPIO_Init+0x18c>)
 80023ec:	f001 fbf0 	bl	8003bd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, M3_EN_Pin|M4_EN_Pin, GPIO_PIN_RESET);
 80023f0:	2200      	movs	r2, #0
 80023f2:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 80023f6:	483b      	ldr	r0, [pc, #236]	; (80024e4 <MX_GPIO_Init+0x190>)
 80023f8:	f001 fbea 	bl	8003bd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : Line_Detect2_Pin */
	GPIO_InitStruct.Pin = Line_Detect2_Pin;
 80023fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002400:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002402:	2300      	movs	r3, #0
 8002404:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Line_Detect2_GPIO_Port, &GPIO_InitStruct);
 800240a:	f107 0314 	add.w	r3, r7, #20
 800240e:	4619      	mov	r1, r3
 8002410:	4832      	ldr	r0, [pc, #200]	; (80024dc <MX_GPIO_Init+0x188>)
 8002412:	f001 fa59 	bl	80038c8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC14 */
	GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002416:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800241a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241c:	2301      	movs	r3, #1
 800241e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002424:	2300      	movs	r3, #0
 8002426:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	4619      	mov	r1, r3
 800242e:	482b      	ldr	r0, [pc, #172]	; (80024dc <MX_GPIO_Init+0x188>)
 8002430:	f001 fa4a 	bl	80038c8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002434:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002438:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800243a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800243e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	4619      	mov	r1, r3
 800244a:	4824      	ldr	r0, [pc, #144]	; (80024dc <MX_GPIO_Init+0x188>)
 800244c:	f001 fa3c 	bl	80038c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : M1_EN_Pin M2_EN_Pin */
	GPIO_InitStruct.Pin = M1_EN_Pin|M2_EN_Pin;
 8002450:	2390      	movs	r3, #144	; 0x90
 8002452:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002454:	2301      	movs	r3, #1
 8002456:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2300      	movs	r3, #0
 800245e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	4619      	mov	r1, r3
 8002466:	481e      	ldr	r0, [pc, #120]	; (80024e0 <MX_GPIO_Init+0x18c>)
 8002468:	f001 fa2e 	bl	80038c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : M1_nFAULT_Pin M2_nFAULT_Pin Line_Detect1_Pin */
	GPIO_InitStruct.Pin = M1_nFAULT_Pin|M2_nFAULT_Pin|Line_Detect1_Pin;
 800246c:	f44f 6312 	mov.w	r3, #2336	; 0x920
 8002470:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002472:	2300      	movs	r3, #0
 8002474:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247a:	f107 0314 	add.w	r3, r7, #20
 800247e:	4619      	mov	r1, r3
 8002480:	4817      	ldr	r0, [pc, #92]	; (80024e0 <MX_GPIO_Init+0x18c>)
 8002482:	f001 fa21 	bl	80038c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : M3_EN_Pin M4_EN_Pin */
	GPIO_InitStruct.Pin = M3_EN_Pin|M4_EN_Pin;
 8002486:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800248a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800248c:	2301      	movs	r3, #1
 800248e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002494:	2300      	movs	r3, #0
 8002496:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	4619      	mov	r1, r3
 800249e:	4811      	ldr	r0, [pc, #68]	; (80024e4 <MX_GPIO_Init+0x190>)
 80024a0:	f001 fa12 	bl	80038c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : M3_nFAULT_Pin M4_nFAULT_Pin */
	GPIO_InitStruct.Pin = M3_nFAULT_Pin|M4_nFAULT_Pin;
 80024a4:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80024a8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b2:	f107 0314 	add.w	r3, r7, #20
 80024b6:	4619      	mov	r1, r3
 80024b8:	480a      	ldr	r0, [pc, #40]	; (80024e4 <MX_GPIO_Init+0x190>)
 80024ba:	f001 fa05 	bl	80038c8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024be:	2200      	movs	r2, #0
 80024c0:	2100      	movs	r1, #0
 80024c2:	2028      	movs	r0, #40	; 0x28
 80024c4:	f001 f937 	bl	8003736 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024c8:	2028      	movs	r0, #40	; 0x28
 80024ca:	f001 f950 	bl	800376e <HAL_NVIC_EnableIRQ>

}
 80024ce:	bf00      	nop
 80024d0:	3728      	adds	r7, #40	; 0x28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40020800 	.word	0x40020800
 80024e0:	40020000 	.word	0x40020000
 80024e4:	40020400 	.word	0x40020400

080024e8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

	// Throttle
	if(throttle.GPIO->IDR & throttle.IDR_Mask){ //throttle.Edge_Flag == 0
 80024f0:	4b25      	ldr	r3, [pc, #148]	; (8002588 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	4b24      	ldr	r3, [pc, #144]	; (8002588 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00c      	beq.n	800251a <HAL_TIM_IC_CaptureCallback+0x32>
		throttle.IC_Val1 = HAL_TIM_ReadCapturedValue(throttle.htim, throttle.TIM_CH); // read the first value
 8002500:	4b21      	ldr	r3, [pc, #132]	; (8002588 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a20      	ldr	r2, [pc, #128]	; (8002588 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002506:	8892      	ldrh	r2, [r2, #4]
 8002508:	4611      	mov	r1, r2
 800250a:	4618      	mov	r0, r3
 800250c:	f004 fa6a 	bl	80069e4 <HAL_TIM_ReadCapturedValue>
 8002510:	4603      	mov	r3, r0
 8002512:	b29a      	uxth	r2, r3
 8002514:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002516:	829a      	strh	r2, [r3, #20]
 8002518:	e00e      	b.n	8002538 <HAL_TIM_IC_CaptureCallback+0x50>
	}
	else{
		throttle.IC_Val2 = HAL_TIM_ReadCapturedValue(throttle.htim, throttle.TIM_CH);
 800251a:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <HAL_TIM_IC_CaptureCallback+0xa0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a1a      	ldr	r2, [pc, #104]	; (8002588 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002520:	8892      	ldrh	r2, [r2, #4]
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f004 fa5d 	bl	80069e4 <HAL_TIM_ReadCapturedValue>
 800252a:	4603      	mov	r3, r0
 800252c:	b29a      	uxth	r2, r3
 800252e:	4b16      	ldr	r3, [pc, #88]	; (8002588 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002530:	82da      	strh	r2, [r3, #22]
		getWidth(&throttle);
 8002532:	4815      	ldr	r0, [pc, #84]	; (8002588 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002534:	f7fe fedc 	bl	80012f0 <getWidth>
	}


	// Steering
	if(steering.GPIO->IDR & steering.IDR_Mask){  //steering.Edge_Flag == 0
 8002538:	4b14      	ldr	r3, [pc, #80]	; (800258c <HAL_TIM_IC_CaptureCallback+0xa4>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	691a      	ldr	r2, [r3, #16]
 800253e:	4b13      	ldr	r3, [pc, #76]	; (800258c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	4013      	ands	r3, r2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00c      	beq.n	8002562 <HAL_TIM_IC_CaptureCallback+0x7a>
		steering.IC_Val1 = HAL_TIM_ReadCapturedValue(steering.htim, steering.TIM_CH); // read the first value
 8002548:	4b10      	ldr	r3, [pc, #64]	; (800258c <HAL_TIM_IC_CaptureCallback+0xa4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a0f      	ldr	r2, [pc, #60]	; (800258c <HAL_TIM_IC_CaptureCallback+0xa4>)
 800254e:	8892      	ldrh	r2, [r2, #4]
 8002550:	4611      	mov	r1, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f004 fa46 	bl	80069e4 <HAL_TIM_ReadCapturedValue>
 8002558:	4603      	mov	r3, r0
 800255a:	b29a      	uxth	r2, r3
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_TIM_IC_CaptureCallback+0xa4>)
 800255e:	829a      	strh	r2, [r3, #20]
	else{
		steering.IC_Val2 = HAL_TIM_ReadCapturedValue(steering.htim, steering.TIM_CH);
		getWidth(&steering);
	}

}
 8002560:	e00e      	b.n	8002580 <HAL_TIM_IC_CaptureCallback+0x98>
		steering.IC_Val2 = HAL_TIM_ReadCapturedValue(steering.htim, steering.TIM_CH);
 8002562:	4b0a      	ldr	r3, [pc, #40]	; (800258c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a09      	ldr	r2, [pc, #36]	; (800258c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002568:	8892      	ldrh	r2, [r2, #4]
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f004 fa39 	bl	80069e4 <HAL_TIM_ReadCapturedValue>
 8002572:	4603      	mov	r3, r0
 8002574:	b29a      	uxth	r2, r3
 8002576:	4b05      	ldr	r3, [pc, #20]	; (800258c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002578:	82da      	strh	r2, [r3, #22]
		getWidth(&steering);
 800257a:	4804      	ldr	r0, [pc, #16]	; (800258c <HAL_TIM_IC_CaptureCallback+0xa4>)
 800257c:	f7fe feb8 	bl	80012f0 <getWidth>
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	2000075c 	.word	0x2000075c
 800258c:	20000778 	.word	0x20000778

08002590 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	80fb      	strh	r3, [r7, #6]

	if((US.Echo_GPIO->IDR & GPIO_IDR_ID15)){
 800259a:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <HAL_GPIO_EXTI_Callback+0x3c>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <HAL_GPIO_EXTI_Callback+0x24>
		US.EXTI_Val1 = TIM4->CNT;
 80025a8:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_GPIO_EXTI_Callback+0x40>)
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	b21a      	sxth	r2, r3
 80025ae:	4b07      	ldr	r3, [pc, #28]	; (80025cc <HAL_GPIO_EXTI_Callback+0x3c>)
 80025b0:	829a      	strh	r2, [r3, #20]
	}
	else{
		US.EXTI_Val2 = TIM4->CNT;
		HCSR04_DistCalc(&US);
	}
}
 80025b2:	e007      	b.n	80025c4 <HAL_GPIO_EXTI_Callback+0x34>
		US.EXTI_Val2 = TIM4->CNT;
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_GPIO_EXTI_Callback+0x40>)
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	b21a      	sxth	r2, r3
 80025ba:	4b04      	ldr	r3, [pc, #16]	; (80025cc <HAL_GPIO_EXTI_Callback+0x3c>)
 80025bc:	82da      	strh	r2, [r3, #22]
		HCSR04_DistCalc(&US);
 80025be:	4803      	ldr	r0, [pc, #12]	; (80025cc <HAL_GPIO_EXTI_Callback+0x3c>)
 80025c0:	f7fe fd22 	bl	8001008 <HCSR04_DistCalc>
}
 80025c4:	bf00      	nop
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20000708 	.word	0x20000708
 80025d0:	40000800 	.word	0x40000800

080025d4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025d8:	b672      	cpsid	i
}
 80025da:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80025dc:	e7fe      	b.n	80025dc <Error_Handler+0x8>
	...

080025e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	607b      	str	r3, [r7, #4]
 80025ea:	4b10      	ldr	r3, [pc, #64]	; (800262c <HAL_MspInit+0x4c>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	4a0f      	ldr	r2, [pc, #60]	; (800262c <HAL_MspInit+0x4c>)
 80025f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f4:	6453      	str	r3, [r2, #68]	; 0x44
 80025f6:	4b0d      	ldr	r3, [pc, #52]	; (800262c <HAL_MspInit+0x4c>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025fe:	607b      	str	r3, [r7, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	603b      	str	r3, [r7, #0]
 8002606:	4b09      	ldr	r3, [pc, #36]	; (800262c <HAL_MspInit+0x4c>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	4a08      	ldr	r2, [pc, #32]	; (800262c <HAL_MspInit+0x4c>)
 800260c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002610:	6413      	str	r3, [r2, #64]	; 0x40
 8002612:	4b06      	ldr	r3, [pc, #24]	; (800262c <HAL_MspInit+0x4c>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800

08002630 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	; 0x28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a17      	ldr	r2, [pc, #92]	; (80026ac <HAL_ADC_MspInit+0x7c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d127      	bne.n	80026a2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <HAL_ADC_MspInit+0x80>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	4a15      	ldr	r2, [pc, #84]	; (80026b0 <HAL_ADC_MspInit+0x80>)
 800265c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002660:	6453      	str	r3, [r2, #68]	; 0x44
 8002662:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <HAL_ADC_MspInit+0x80>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	4b0f      	ldr	r3, [pc, #60]	; (80026b0 <HAL_ADC_MspInit+0x80>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	4a0e      	ldr	r2, [pc, #56]	; (80026b0 <HAL_ADC_MspInit+0x80>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6313      	str	r3, [r2, #48]	; 0x30
 800267e:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <HAL_ADC_MspInit+0x80>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800268a:	2301      	movs	r3, #1
 800268c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800268e:	2303      	movs	r3, #3
 8002690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002696:	f107 0314 	add.w	r3, r7, #20
 800269a:	4619      	mov	r1, r3
 800269c:	4805      	ldr	r0, [pc, #20]	; (80026b4 <HAL_ADC_MspInit+0x84>)
 800269e:	f001 f913 	bl	80038c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026a2:	bf00      	nop
 80026a4:	3728      	adds	r7, #40	; 0x28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40012000 	.word	0x40012000
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40020000 	.word	0x40020000

080026b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	; 0x28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a19      	ldr	r2, [pc, #100]	; (800273c <HAL_I2C_MspInit+0x84>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d12b      	bne.n	8002732 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	4b18      	ldr	r3, [pc, #96]	; (8002740 <HAL_I2C_MspInit+0x88>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	4a17      	ldr	r2, [pc, #92]	; (8002740 <HAL_I2C_MspInit+0x88>)
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <HAL_I2C_MspInit+0x88>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026f6:	23c0      	movs	r3, #192	; 0xc0
 80026f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026fa:	2312      	movs	r3, #18
 80026fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002702:	2303      	movs	r3, #3
 8002704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002706:	2304      	movs	r3, #4
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800270a:	f107 0314 	add.w	r3, r7, #20
 800270e:	4619      	mov	r1, r3
 8002710:	480c      	ldr	r0, [pc, #48]	; (8002744 <HAL_I2C_MspInit+0x8c>)
 8002712:	f001 f8d9 	bl	80038c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	4b09      	ldr	r3, [pc, #36]	; (8002740 <HAL_I2C_MspInit+0x88>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	4a08      	ldr	r2, [pc, #32]	; (8002740 <HAL_I2C_MspInit+0x88>)
 8002720:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002724:	6413      	str	r3, [r2, #64]	; 0x40
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_I2C_MspInit+0x88>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002732:	bf00      	nop
 8002734:	3728      	adds	r7, #40	; 0x28
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40005400 	.word	0x40005400
 8002740:	40023800 	.word	0x40023800
 8002744:	40020400 	.word	0x40020400

08002748 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	; 0x28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a27      	ldr	r2, [pc, #156]	; (8002804 <HAL_TIM_Base_MspInit+0xbc>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d10e      	bne.n	8002788 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	4b26      	ldr	r3, [pc, #152]	; (8002808 <HAL_TIM_Base_MspInit+0xc0>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	4a25      	ldr	r2, [pc, #148]	; (8002808 <HAL_TIM_Base_MspInit+0xc0>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6453      	str	r3, [r2, #68]	; 0x44
 800277a:	4b23      	ldr	r3, [pc, #140]	; (8002808 <HAL_TIM_Base_MspInit+0xc0>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002786:	e039      	b.n	80027fc <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM4)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a1f      	ldr	r2, [pc, #124]	; (800280c <HAL_TIM_Base_MspInit+0xc4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d134      	bne.n	80027fc <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	4b1c      	ldr	r3, [pc, #112]	; (8002808 <HAL_TIM_Base_MspInit+0xc0>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	4a1b      	ldr	r2, [pc, #108]	; (8002808 <HAL_TIM_Base_MspInit+0xc0>)
 800279c:	f043 0304 	orr.w	r3, r3, #4
 80027a0:	6413      	str	r3, [r2, #64]	; 0x40
 80027a2:	4b19      	ldr	r3, [pc, #100]	; (8002808 <HAL_TIM_Base_MspInit+0xc0>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	4b15      	ldr	r3, [pc, #84]	; (8002808 <HAL_TIM_Base_MspInit+0xc0>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	4a14      	ldr	r2, [pc, #80]	; (8002808 <HAL_TIM_Base_MspInit+0xc0>)
 80027b8:	f043 0302 	orr.w	r3, r3, #2
 80027bc:	6313      	str	r3, [r2, #48]	; 0x30
 80027be:	4b12      	ldr	r3, [pc, #72]	; (8002808 <HAL_TIM_Base_MspInit+0xc0>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RC_Throttle_Pin|RC_Steering_Pin;
 80027ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d0:	2302      	movs	r3, #2
 80027d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d8:	2300      	movs	r3, #0
 80027da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027dc:	2302      	movs	r3, #2
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e0:	f107 0314 	add.w	r3, r7, #20
 80027e4:	4619      	mov	r1, r3
 80027e6:	480a      	ldr	r0, [pc, #40]	; (8002810 <HAL_TIM_Base_MspInit+0xc8>)
 80027e8:	f001 f86e 	bl	80038c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80027ec:	2200      	movs	r2, #0
 80027ee:	2100      	movs	r1, #0
 80027f0:	201e      	movs	r0, #30
 80027f2:	f000 ffa0 	bl	8003736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027f6:	201e      	movs	r0, #30
 80027f8:	f000 ffb9 	bl	800376e <HAL_NVIC_EnableIRQ>
}
 80027fc:	bf00      	nop
 80027fe:	3728      	adds	r7, #40	; 0x28
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40010000 	.word	0x40010000
 8002808:	40023800 	.word	0x40023800
 800280c:	40000800 	.word	0x40000800
 8002810:	40020400 	.word	0x40020400

08002814 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002824:	d10e      	bne.n	8002844 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	4b13      	ldr	r3, [pc, #76]	; (8002878 <HAL_TIM_PWM_MspInit+0x64>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	4a12      	ldr	r2, [pc, #72]	; (8002878 <HAL_TIM_PWM_MspInit+0x64>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6413      	str	r3, [r2, #64]	; 0x40
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_TIM_PWM_MspInit+0x64>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002842:	e012      	b.n	800286a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0c      	ldr	r2, [pc, #48]	; (800287c <HAL_TIM_PWM_MspInit+0x68>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d10d      	bne.n	800286a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	4b09      	ldr	r3, [pc, #36]	; (8002878 <HAL_TIM_PWM_MspInit+0x64>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	4a08      	ldr	r2, [pc, #32]	; (8002878 <HAL_TIM_PWM_MspInit+0x64>)
 8002858:	f043 0302 	orr.w	r3, r3, #2
 800285c:	6413      	str	r3, [r2, #64]	; 0x40
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_TIM_PWM_MspInit+0x64>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
}
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
 800287c:	40000400 	.word	0x40000400

08002880 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	; 0x28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a0:	d11f      	bne.n	80028e2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	4b22      	ldr	r3, [pc, #136]	; (8002930 <HAL_TIM_MspPostInit+0xb0>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	4a21      	ldr	r2, [pc, #132]	; (8002930 <HAL_TIM_MspPostInit+0xb0>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	6313      	str	r3, [r2, #48]	; 0x30
 80028b2:	4b1f      	ldr	r3, [pc, #124]	; (8002930 <HAL_TIM_MspPostInit+0xb0>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	693b      	ldr	r3, [r7, #16]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = M1_IN1_Pin|M1_IN2_Pin|M2_IN1_Pin|M2_IN2_Pin;
 80028be:	f248 030e 	movw	r3, #32782	; 0x800e
 80028c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028cc:	2300      	movs	r3, #0
 80028ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028d0:	2301      	movs	r3, #1
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d4:	f107 0314 	add.w	r3, r7, #20
 80028d8:	4619      	mov	r1, r3
 80028da:	4816      	ldr	r0, [pc, #88]	; (8002934 <HAL_TIM_MspPostInit+0xb4>)
 80028dc:	f000 fff4 	bl	80038c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028e0:	e022      	b.n	8002928 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a14      	ldr	r2, [pc, #80]	; (8002938 <HAL_TIM_MspPostInit+0xb8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d11d      	bne.n	8002928 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <HAL_TIM_MspPostInit+0xb0>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	4a0e      	ldr	r2, [pc, #56]	; (8002930 <HAL_TIM_MspPostInit+0xb0>)
 80028f6:	f043 0302 	orr.w	r3, r3, #2
 80028fa:	6313      	str	r3, [r2, #48]	; 0x30
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <HAL_TIM_MspPostInit+0xb0>)
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3_IN1_Pin|M3_IN2_Pin|M4_IN1_Pin|M4_IN2_Pin;
 8002908:	2333      	movs	r3, #51	; 0x33
 800290a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290c:	2302      	movs	r3, #2
 800290e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002914:	2300      	movs	r3, #0
 8002916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002918:	2302      	movs	r3, #2
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	4619      	mov	r1, r3
 8002922:	4806      	ldr	r0, [pc, #24]	; (800293c <HAL_TIM_MspPostInit+0xbc>)
 8002924:	f000 ffd0 	bl	80038c8 <HAL_GPIO_Init>
}
 8002928:	bf00      	nop
 800292a:	3728      	adds	r7, #40	; 0x28
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40023800 	.word	0x40023800
 8002934:	40020000 	.word	0x40020000
 8002938:	40000400 	.word	0x40000400
 800293c:	40020400 	.word	0x40020400

08002940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08a      	sub	sp, #40	; 0x28
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002948:	f107 0314 	add.w	r3, r7, #20
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a1d      	ldr	r2, [pc, #116]	; (80029d4 <HAL_UART_MspInit+0x94>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d134      	bne.n	80029cc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	4b1c      	ldr	r3, [pc, #112]	; (80029d8 <HAL_UART_MspInit+0x98>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	4a1b      	ldr	r2, [pc, #108]	; (80029d8 <HAL_UART_MspInit+0x98>)
 800296c:	f043 0310 	orr.w	r3, r3, #16
 8002970:	6453      	str	r3, [r2, #68]	; 0x44
 8002972:	4b19      	ldr	r3, [pc, #100]	; (80029d8 <HAL_UART_MspInit+0x98>)
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <HAL_UART_MspInit+0x98>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	4a14      	ldr	r2, [pc, #80]	; (80029d8 <HAL_UART_MspInit+0x98>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6313      	str	r3, [r2, #48]	; 0x30
 800298e:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <HAL_UART_MspInit+0x98>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800299a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800299e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a0:	2302      	movs	r3, #2
 80029a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a8:	2303      	movs	r3, #3
 80029aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029ac:	2307      	movs	r3, #7
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	4619      	mov	r1, r3
 80029b6:	4809      	ldr	r0, [pc, #36]	; (80029dc <HAL_UART_MspInit+0x9c>)
 80029b8:	f000 ff86 	bl	80038c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80029bc:	2200      	movs	r2, #0
 80029be:	2100      	movs	r1, #0
 80029c0:	2025      	movs	r0, #37	; 0x25
 80029c2:	f000 feb8 	bl	8003736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029c6:	2025      	movs	r0, #37	; 0x25
 80029c8:	f000 fed1 	bl	800376e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80029cc:	bf00      	nop
 80029ce:	3728      	adds	r7, #40	; 0x28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40011000 	.word	0x40011000
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40020000 	.word	0x40020000

080029e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029e4:	e7fe      	b.n	80029e4 <NMI_Handler+0x4>

080029e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029e6:	b480      	push	{r7}
 80029e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ea:	e7fe      	b.n	80029ea <HardFault_Handler+0x4>

080029ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029f0:	e7fe      	b.n	80029f0 <MemManage_Handler+0x4>

080029f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029f6:	e7fe      	b.n	80029f6 <BusFault_Handler+0x4>

080029f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029fc:	e7fe      	b.n	80029fc <UsageFault_Handler+0x4>

080029fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a2c:	f000 f972 	bl	8002d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a30:	bf00      	nop
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002a38:	4802      	ldr	r0, [pc, #8]	; (8002a44 <TIM4_IRQHandler+0x10>)
 8002a3a:	f003 fca5 	bl	8006388 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000638 	.word	0x20000638

08002a48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a4c:	4802      	ldr	r0, [pc, #8]	; (8002a58 <USART1_IRQHandler+0x10>)
 8002a4e:	f004 fd81 	bl	8007554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000680 	.word	0x20000680

08002a5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002a60:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002a64:	f001 f8ce 	bl	8003c04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a68:	bf00      	nop
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
	return 1;
 8002a70:	2301      	movs	r3, #1
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <_kill>:

int _kill(int pid, int sig)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a86:	f00a fb09 	bl	800d09c <__errno>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2216      	movs	r2, #22
 8002a8e:	601a      	str	r2, [r3, #0]
	return -1;
 8002a90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <_exit>:

void _exit (int status)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ffe7 	bl	8002a7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002aae:	e7fe      	b.n	8002aae <_exit+0x12>

08002ab0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	e00a      	b.n	8002ad8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ac2:	f3af 8000 	nop.w
 8002ac6:	4601      	mov	r1, r0
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	60ba      	str	r2, [r7, #8]
 8002ace:	b2ca      	uxtb	r2, r1
 8002ad0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	dbf0      	blt.n	8002ac2 <_read+0x12>
	}

return len;
 8002ae0:	687b      	ldr	r3, [r7, #4]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b086      	sub	sp, #24
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	e009      	b.n	8002b10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	1c5a      	adds	r2, r3, #1
 8002b00:	60ba      	str	r2, [r7, #8]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	dbf1      	blt.n	8002afc <_write+0x12>
	}
	return len;
 8002b18:	687b      	ldr	r3, [r7, #4]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <_close>:

int _close(int file)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
	return -1;
 8002b2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b4a:	605a      	str	r2, [r3, #4]
	return 0;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <_isatty>:

int _isatty(int file)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
	return 1;
 8002b62:	2301      	movs	r3, #1
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
	return 0;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b94:	4a14      	ldr	r2, [pc, #80]	; (8002be8 <_sbrk+0x5c>)
 8002b96:	4b15      	ldr	r3, [pc, #84]	; (8002bec <_sbrk+0x60>)
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ba0:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <_sbrk+0x64>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d102      	bne.n	8002bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ba8:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <_sbrk+0x64>)
 8002baa:	4a12      	ldr	r2, [pc, #72]	; (8002bf4 <_sbrk+0x68>)
 8002bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bae:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <_sbrk+0x64>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d207      	bcs.n	8002bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bbc:	f00a fa6e 	bl	800d09c <__errno>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	220c      	movs	r2, #12
 8002bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bca:	e009      	b.n	8002be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bcc:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <_sbrk+0x64>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bd2:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <_sbrk+0x64>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4413      	add	r3, r2
 8002bda:	4a05      	ldr	r2, [pc, #20]	; (8002bf0 <_sbrk+0x64>)
 8002bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bde:	68fb      	ldr	r3, [r7, #12]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20020000 	.word	0x20020000
 8002bec:	00000400 	.word	0x00000400
 8002bf0:	20000904 	.word	0x20000904
 8002bf4:	20000920 	.word	0x20000920

08002bf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <SystemInit+0x20>)
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c02:	4a05      	ldr	r2, [pc, #20]	; (8002c18 <SystemInit+0x20>)
 8002c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c20:	480d      	ldr	r0, [pc, #52]	; (8002c58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c22:	490e      	ldr	r1, [pc, #56]	; (8002c5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c24:	4a0e      	ldr	r2, [pc, #56]	; (8002c60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c28:	e002      	b.n	8002c30 <LoopCopyDataInit>

08002c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c2e:	3304      	adds	r3, #4

08002c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c34:	d3f9      	bcc.n	8002c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c36:	4a0b      	ldr	r2, [pc, #44]	; (8002c64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c38:	4c0b      	ldr	r4, [pc, #44]	; (8002c68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c3c:	e001      	b.n	8002c42 <LoopFillZerobss>

08002c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c40:	3204      	adds	r2, #4

08002c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c44:	d3fb      	bcc.n	8002c3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c46:	f7ff ffd7 	bl	8002bf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c4a:	f00a fa2d 	bl	800d0a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c4e:	f7fe fcb9 	bl	80015c4 <main>
  bx  lr    
 8002c52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c5c:	200004a8 	.word	0x200004a8
  ldr r2, =_sidata
 8002c60:	0801244c 	.word	0x0801244c
  ldr r2, =_sbss
 8002c64:	200004a8 	.word	0x200004a8
  ldr r4, =_ebss
 8002c68:	2000091c 	.word	0x2000091c

08002c6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c6c:	e7fe      	b.n	8002c6c <ADC_IRQHandler>
	...

08002c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c74:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <HAL_Init+0x40>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a0d      	ldr	r2, [pc, #52]	; (8002cb0 <HAL_Init+0x40>)
 8002c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_Init+0x40>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a0a      	ldr	r2, [pc, #40]	; (8002cb0 <HAL_Init+0x40>)
 8002c86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c8c:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <HAL_Init+0x40>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a07      	ldr	r2, [pc, #28]	; (8002cb0 <HAL_Init+0x40>)
 8002c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c98:	2003      	movs	r0, #3
 8002c9a:	f000 fd41 	bl	8003720 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c9e:	200f      	movs	r0, #15
 8002ca0:	f000 f808 	bl	8002cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ca4:	f7ff fc9c 	bl	80025e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40023c00 	.word	0x40023c00

08002cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cbc:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <HAL_InitTick+0x54>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <HAL_InitTick+0x58>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 fd59 	bl	800378a <HAL_SYSTICK_Config>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e00e      	b.n	8002d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b0f      	cmp	r3, #15
 8002ce6:	d80a      	bhi.n	8002cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ce8:	2200      	movs	r2, #0
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf0:	f000 fd21 	bl	8003736 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cf4:	4a06      	ldr	r2, [pc, #24]	; (8002d10 <HAL_InitTick+0x5c>)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	e000      	b.n	8002d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	2000000c 	.word	0x2000000c
 8002d0c:	20000014 	.word	0x20000014
 8002d10:	20000010 	.word	0x20000010

08002d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <HAL_IncTick+0x20>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <HAL_IncTick+0x24>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4413      	add	r3, r2
 8002d24:	4a04      	ldr	r2, [pc, #16]	; (8002d38 <HAL_IncTick+0x24>)
 8002d26:	6013      	str	r3, [r2, #0]
}
 8002d28:	bf00      	nop
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	20000014 	.word	0x20000014
 8002d38:	20000908 	.word	0x20000908

08002d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d40:	4b03      	ldr	r3, [pc, #12]	; (8002d50 <HAL_GetTick+0x14>)
 8002d42:	681b      	ldr	r3, [r3, #0]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20000908 	.word	0x20000908

08002d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d5c:	f7ff ffee 	bl	8002d3c <HAL_GetTick>
 8002d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6c:	d005      	beq.n	8002d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d6e:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <HAL_Delay+0x44>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	461a      	mov	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4413      	add	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d7a:	bf00      	nop
 8002d7c:	f7ff ffde 	bl	8002d3c <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d8f7      	bhi.n	8002d7c <HAL_Delay+0x28>
  {
  }
}
 8002d8c:	bf00      	nop
 8002d8e:	bf00      	nop
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000014 	.word	0x20000014

08002d9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e033      	b.n	8002e1a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d109      	bne.n	8002dce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff fc38 	bl	8002630 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d118      	bne.n	8002e0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002de2:	f023 0302 	bic.w	r3, r3, #2
 8002de6:	f043 0202 	orr.w	r2, r3, #2
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 faca 	bl	8003388 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f023 0303 	bic.w	r3, r3, #3
 8002e02:	f043 0201 	orr.w	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	641a      	str	r2, [r3, #64]	; 0x40
 8002e0a:	e001      	b.n	8002e10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_ADC_Start+0x1a>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e097      	b.n	8002f6e <HAL_ADC_Start+0x14a>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d018      	beq.n	8002e86 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e64:	4b45      	ldr	r3, [pc, #276]	; (8002f7c <HAL_ADC_Start+0x158>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a45      	ldr	r2, [pc, #276]	; (8002f80 <HAL_ADC_Start+0x15c>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	0c9a      	lsrs	r2, r3, #18
 8002e70:	4613      	mov	r3, r2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4413      	add	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e78:	e002      	b.n	8002e80 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f9      	bne.n	8002e7a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d15f      	bne.n	8002f54 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e9c:	f023 0301 	bic.w	r3, r3, #1
 8002ea0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d007      	beq.n	8002ec6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ebe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed2:	d106      	bne.n	8002ee2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed8:	f023 0206 	bic.w	r2, r3, #6
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	645a      	str	r2, [r3, #68]	; 0x44
 8002ee0:	e002      	b.n	8002ee8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ef0:	4b24      	ldr	r3, [pc, #144]	; (8002f84 <HAL_ADC_Start+0x160>)
 8002ef2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002efc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10f      	bne.n	8002f2a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d129      	bne.n	8002f6c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f26:	609a      	str	r2, [r3, #8]
 8002f28:	e020      	b.n	8002f6c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a16      	ldr	r2, [pc, #88]	; (8002f88 <HAL_ADC_Start+0x164>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d11b      	bne.n	8002f6c <HAL_ADC_Start+0x148>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d114      	bne.n	8002f6c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f50:	609a      	str	r2, [r3, #8]
 8002f52:	e00b      	b.n	8002f6c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	f043 0210 	orr.w	r2, r3, #16
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f64:	f043 0201 	orr.w	r2, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	2000000c 	.word	0x2000000c
 8002f80:	431bde83 	.word	0x431bde83
 8002f84:	40012300 	.word	0x40012300
 8002f88:	40012000 	.word	0x40012000

08002f8c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_ADC_Stop+0x16>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e021      	b.n	8002fe6 <HAL_ADC_Stop+0x5a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0201 	bic.w	r2, r2, #1
 8002fb8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d109      	bne.n	8002fdc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fd0:	f023 0301 	bic.w	r3, r3, #1
 8002fd4:	f043 0201 	orr.w	r2, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800300e:	d113      	bne.n	8003038 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800301a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800301e:	d10b      	bne.n	8003038 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	f043 0220 	orr.w	r2, r3, #32
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e063      	b.n	8003100 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003038:	f7ff fe80 	bl	8002d3c <HAL_GetTick>
 800303c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800303e:	e021      	b.n	8003084 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003046:	d01d      	beq.n	8003084 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d007      	beq.n	800305e <HAL_ADC_PollForConversion+0x6c>
 800304e:	f7ff fe75 	bl	8002d3c <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d212      	bcs.n	8003084 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b02      	cmp	r3, #2
 800306a:	d00b      	beq.n	8003084 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	f043 0204 	orr.w	r2, r3, #4
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e03d      	b.n	8003100 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b02      	cmp	r3, #2
 8003090:	d1d6      	bne.n	8003040 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f06f 0212 	mvn.w	r2, #18
 800309a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d123      	bne.n	80030fe <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d11f      	bne.n	80030fe <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d006      	beq.n	80030da <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d111      	bne.n	80030fe <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d105      	bne.n	80030fe <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f043 0201 	orr.w	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003116:	4618      	mov	r0, r3
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800312e:	2300      	movs	r3, #0
 8003130:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x1c>
 800313c:	2302      	movs	r3, #2
 800313e:	e113      	b.n	8003368 <HAL_ADC_ConfigChannel+0x244>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b09      	cmp	r3, #9
 800314e:	d925      	bls.n	800319c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68d9      	ldr	r1, [r3, #12]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	b29b      	uxth	r3, r3
 800315c:	461a      	mov	r2, r3
 800315e:	4613      	mov	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	4413      	add	r3, r2
 8003164:	3b1e      	subs	r3, #30
 8003166:	2207      	movs	r2, #7
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43da      	mvns	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	400a      	ands	r2, r1
 8003174:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68d9      	ldr	r1, [r3, #12]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	b29b      	uxth	r3, r3
 8003186:	4618      	mov	r0, r3
 8003188:	4603      	mov	r3, r0
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	4403      	add	r3, r0
 800318e:	3b1e      	subs	r3, #30
 8003190:	409a      	lsls	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	60da      	str	r2, [r3, #12]
 800319a:	e022      	b.n	80031e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6919      	ldr	r1, [r3, #16]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	4613      	mov	r3, r2
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	4413      	add	r3, r2
 80031b0:	2207      	movs	r2, #7
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43da      	mvns	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	400a      	ands	r2, r1
 80031be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6919      	ldr	r1, [r3, #16]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	4618      	mov	r0, r3
 80031d2:	4603      	mov	r3, r0
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4403      	add	r3, r0
 80031d8:	409a      	lsls	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b06      	cmp	r3, #6
 80031e8:	d824      	bhi.n	8003234 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	3b05      	subs	r3, #5
 80031fc:	221f      	movs	r2, #31
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43da      	mvns	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	400a      	ands	r2, r1
 800320a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	b29b      	uxth	r3, r3
 8003218:	4618      	mov	r0, r3
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	3b05      	subs	r3, #5
 8003226:	fa00 f203 	lsl.w	r2, r0, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	635a      	str	r2, [r3, #52]	; 0x34
 8003232:	e04c      	b.n	80032ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b0c      	cmp	r3, #12
 800323a:	d824      	bhi.n	8003286 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	3b23      	subs	r3, #35	; 0x23
 800324e:	221f      	movs	r2, #31
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43da      	mvns	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	400a      	ands	r2, r1
 800325c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	b29b      	uxth	r3, r3
 800326a:	4618      	mov	r0, r3
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	3b23      	subs	r3, #35	; 0x23
 8003278:	fa00 f203 	lsl.w	r2, r0, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	631a      	str	r2, [r3, #48]	; 0x30
 8003284:	e023      	b.n	80032ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	3b41      	subs	r3, #65	; 0x41
 8003298:	221f      	movs	r2, #31
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43da      	mvns	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	400a      	ands	r2, r1
 80032a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	4618      	mov	r0, r3
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	3b41      	subs	r3, #65	; 0x41
 80032c2:	fa00 f203 	lsl.w	r2, r0, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032ce:	4b29      	ldr	r3, [pc, #164]	; (8003374 <HAL_ADC_ConfigChannel+0x250>)
 80032d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a28      	ldr	r2, [pc, #160]	; (8003378 <HAL_ADC_ConfigChannel+0x254>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d10f      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x1d8>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b12      	cmp	r3, #18
 80032e2:	d10b      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a1d      	ldr	r2, [pc, #116]	; (8003378 <HAL_ADC_ConfigChannel+0x254>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d12b      	bne.n	800335e <HAL_ADC_ConfigChannel+0x23a>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a1c      	ldr	r2, [pc, #112]	; (800337c <HAL_ADC_ConfigChannel+0x258>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d003      	beq.n	8003318 <HAL_ADC_ConfigChannel+0x1f4>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b11      	cmp	r3, #17
 8003316:	d122      	bne.n	800335e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a11      	ldr	r2, [pc, #68]	; (800337c <HAL_ADC_ConfigChannel+0x258>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d111      	bne.n	800335e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800333a:	4b11      	ldr	r3, [pc, #68]	; (8003380 <HAL_ADC_ConfigChannel+0x25c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a11      	ldr	r2, [pc, #68]	; (8003384 <HAL_ADC_ConfigChannel+0x260>)
 8003340:	fba2 2303 	umull	r2, r3, r2, r3
 8003344:	0c9a      	lsrs	r2, r3, #18
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003350:	e002      	b.n	8003358 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	3b01      	subs	r3, #1
 8003356:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f9      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40012300 	.word	0x40012300
 8003378:	40012000 	.word	0x40012000
 800337c:	10000012 	.word	0x10000012
 8003380:	2000000c 	.word	0x2000000c
 8003384:	431bde83 	.word	0x431bde83

08003388 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003390:	4b79      	ldr	r3, [pc, #484]	; (8003578 <ADC_Init+0x1f0>)
 8003392:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	431a      	orrs	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6859      	ldr	r1, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	021a      	lsls	r2, r3, #8
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80033e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003402:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6899      	ldr	r1, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	4a58      	ldr	r2, [pc, #352]	; (800357c <ADC_Init+0x1f4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d022      	beq.n	8003466 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800342e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6899      	ldr	r1, [r3, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003450:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6899      	ldr	r1, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	e00f      	b.n	8003486 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003474:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003484:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0202 	bic.w	r2, r2, #2
 8003494:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6899      	ldr	r1, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	7e1b      	ldrb	r3, [r3, #24]
 80034a0:	005a      	lsls	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d01b      	beq.n	80034ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80034d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6859      	ldr	r1, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	3b01      	subs	r3, #1
 80034e0:	035a      	lsls	r2, r3, #13
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	e007      	b.n	80034fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800350a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	3b01      	subs	r3, #1
 8003518:	051a      	lsls	r2, r3, #20
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003530:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6899      	ldr	r1, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800353e:	025a      	lsls	r2, r3, #9
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003556:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6899      	ldr	r1, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	029a      	lsls	r2, r3, #10
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	609a      	str	r2, [r3, #8]
}
 800356c:	bf00      	nop
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	40012300 	.word	0x40012300
 800357c:	0f000001 	.word	0x0f000001

08003580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800359c:	4013      	ands	r3, r2
 800359e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035b2:	4a04      	ldr	r2, [pc, #16]	; (80035c4 <__NVIC_SetPriorityGrouping+0x44>)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	60d3      	str	r3, [r2, #12]
}
 80035b8:	bf00      	nop
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	e000ed00 	.word	0xe000ed00

080035c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035cc:	4b04      	ldr	r3, [pc, #16]	; (80035e0 <__NVIC_GetPriorityGrouping+0x18>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	0a1b      	lsrs	r3, r3, #8
 80035d2:	f003 0307 	and.w	r3, r3, #7
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	e000ed00 	.word	0xe000ed00

080035e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	db0b      	blt.n	800360e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	f003 021f 	and.w	r2, r3, #31
 80035fc:	4907      	ldr	r1, [pc, #28]	; (800361c <__NVIC_EnableIRQ+0x38>)
 80035fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	2001      	movs	r0, #1
 8003606:	fa00 f202 	lsl.w	r2, r0, r2
 800360a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	e000e100 	.word	0xe000e100

08003620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	6039      	str	r1, [r7, #0]
 800362a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800362c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003630:	2b00      	cmp	r3, #0
 8003632:	db0a      	blt.n	800364a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	b2da      	uxtb	r2, r3
 8003638:	490c      	ldr	r1, [pc, #48]	; (800366c <__NVIC_SetPriority+0x4c>)
 800363a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363e:	0112      	lsls	r2, r2, #4
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	440b      	add	r3, r1
 8003644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003648:	e00a      	b.n	8003660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	b2da      	uxtb	r2, r3
 800364e:	4908      	ldr	r1, [pc, #32]	; (8003670 <__NVIC_SetPriority+0x50>)
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	3b04      	subs	r3, #4
 8003658:	0112      	lsls	r2, r2, #4
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	440b      	add	r3, r1
 800365e:	761a      	strb	r2, [r3, #24]
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	e000e100 	.word	0xe000e100
 8003670:	e000ed00 	.word	0xe000ed00

08003674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003674:	b480      	push	{r7}
 8003676:	b089      	sub	sp, #36	; 0x24
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f1c3 0307 	rsb	r3, r3, #7
 800368e:	2b04      	cmp	r3, #4
 8003690:	bf28      	it	cs
 8003692:	2304      	movcs	r3, #4
 8003694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	3304      	adds	r3, #4
 800369a:	2b06      	cmp	r3, #6
 800369c:	d902      	bls.n	80036a4 <NVIC_EncodePriority+0x30>
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	3b03      	subs	r3, #3
 80036a2:	e000      	b.n	80036a6 <NVIC_EncodePriority+0x32>
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a8:	f04f 32ff 	mov.w	r2, #4294967295
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43da      	mvns	r2, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	401a      	ands	r2, r3
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036bc:	f04f 31ff 	mov.w	r1, #4294967295
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	fa01 f303 	lsl.w	r3, r1, r3
 80036c6:	43d9      	mvns	r1, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036cc:	4313      	orrs	r3, r2
         );
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3724      	adds	r7, #36	; 0x24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036ec:	d301      	bcc.n	80036f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ee:	2301      	movs	r3, #1
 80036f0:	e00f      	b.n	8003712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036f2:	4a0a      	ldr	r2, [pc, #40]	; (800371c <SysTick_Config+0x40>)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036fa:	210f      	movs	r1, #15
 80036fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003700:	f7ff ff8e 	bl	8003620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003704:	4b05      	ldr	r3, [pc, #20]	; (800371c <SysTick_Config+0x40>)
 8003706:	2200      	movs	r2, #0
 8003708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800370a:	4b04      	ldr	r3, [pc, #16]	; (800371c <SysTick_Config+0x40>)
 800370c:	2207      	movs	r2, #7
 800370e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	e000e010 	.word	0xe000e010

08003720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff ff29 	bl	8003580 <__NVIC_SetPriorityGrouping>
}
 800372e:	bf00      	nop
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003736:	b580      	push	{r7, lr}
 8003738:	b086      	sub	sp, #24
 800373a:	af00      	add	r7, sp, #0
 800373c:	4603      	mov	r3, r0
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	607a      	str	r2, [r7, #4]
 8003742:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003748:	f7ff ff3e 	bl	80035c8 <__NVIC_GetPriorityGrouping>
 800374c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	6978      	ldr	r0, [r7, #20]
 8003754:	f7ff ff8e 	bl	8003674 <NVIC_EncodePriority>
 8003758:	4602      	mov	r2, r0
 800375a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800375e:	4611      	mov	r1, r2
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff ff5d 	bl	8003620 <__NVIC_SetPriority>
}
 8003766:	bf00      	nop
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	4603      	mov	r3, r0
 8003776:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff ff31 	bl	80035e4 <__NVIC_EnableIRQ>
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b082      	sub	sp, #8
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff ffa2 	bl	80036dc <SysTick_Config>
 8003798:	4603      	mov	r3, r0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b084      	sub	sp, #16
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037b0:	f7ff fac4 	bl	8002d3c <HAL_GetTick>
 80037b4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d008      	beq.n	80037d4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2280      	movs	r2, #128	; 0x80
 80037c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e052      	b.n	800387a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0216 	bic.w	r2, r2, #22
 80037e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695a      	ldr	r2, [r3, #20]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037f2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d103      	bne.n	8003804 <HAL_DMA_Abort+0x62>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003800:	2b00      	cmp	r3, #0
 8003802:	d007      	beq.n	8003814 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0208 	bic.w	r2, r2, #8
 8003812:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0201 	bic.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003824:	e013      	b.n	800384e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003826:	f7ff fa89 	bl	8002d3c <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b05      	cmp	r3, #5
 8003832:	d90c      	bls.n	800384e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2220      	movs	r2, #32
 8003838:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2203      	movs	r2, #3
 800383e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e015      	b.n	800387a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e4      	bne.n	8003826 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003860:	223f      	movs	r2, #63	; 0x3f
 8003862:	409a      	lsls	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d004      	beq.n	80038a0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2280      	movs	r2, #128	; 0x80
 800389a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e00c      	b.n	80038ba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2205      	movs	r2, #5
 80038a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0201 	bic.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b089      	sub	sp, #36	; 0x24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038da:	2300      	movs	r3, #0
 80038dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038de:	2300      	movs	r3, #0
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	e159      	b.n	8003b98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038e4:	2201      	movs	r2, #1
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	4013      	ands	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	f040 8148 	bne.w	8003b92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	2b01      	cmp	r3, #1
 800390c:	d005      	beq.n	800391a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003916:	2b02      	cmp	r3, #2
 8003918:	d130      	bne.n	800397c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	2203      	movs	r2, #3
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	43db      	mvns	r3, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4013      	ands	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4313      	orrs	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003950:	2201      	movs	r2, #1
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 0201 	and.w	r2, r3, #1
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	2b03      	cmp	r3, #3
 8003986:	d017      	beq.n	80039b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	2203      	movs	r2, #3
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	43db      	mvns	r3, r3
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	4013      	ands	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d123      	bne.n	8003a0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	08da      	lsrs	r2, r3, #3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3208      	adds	r2, #8
 80039cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	220f      	movs	r2, #15
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4013      	ands	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	08da      	lsrs	r2, r3, #3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3208      	adds	r2, #8
 8003a06:	69b9      	ldr	r1, [r7, #24]
 8003a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	2203      	movs	r2, #3
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4013      	ands	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 0203 	and.w	r2, r3, #3
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80a2 	beq.w	8003b92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	4b57      	ldr	r3, [pc, #348]	; (8003bb0 <HAL_GPIO_Init+0x2e8>)
 8003a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a56:	4a56      	ldr	r2, [pc, #344]	; (8003bb0 <HAL_GPIO_Init+0x2e8>)
 8003a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a5e:	4b54      	ldr	r3, [pc, #336]	; (8003bb0 <HAL_GPIO_Init+0x2e8>)
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a6a:	4a52      	ldr	r2, [pc, #328]	; (8003bb4 <HAL_GPIO_Init+0x2ec>)
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	089b      	lsrs	r3, r3, #2
 8003a70:	3302      	adds	r3, #2
 8003a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	220f      	movs	r2, #15
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43db      	mvns	r3, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a49      	ldr	r2, [pc, #292]	; (8003bb8 <HAL_GPIO_Init+0x2f0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d019      	beq.n	8003aca <HAL_GPIO_Init+0x202>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a48      	ldr	r2, [pc, #288]	; (8003bbc <HAL_GPIO_Init+0x2f4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d013      	beq.n	8003ac6 <HAL_GPIO_Init+0x1fe>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a47      	ldr	r2, [pc, #284]	; (8003bc0 <HAL_GPIO_Init+0x2f8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00d      	beq.n	8003ac2 <HAL_GPIO_Init+0x1fa>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a46      	ldr	r2, [pc, #280]	; (8003bc4 <HAL_GPIO_Init+0x2fc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d007      	beq.n	8003abe <HAL_GPIO_Init+0x1f6>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a45      	ldr	r2, [pc, #276]	; (8003bc8 <HAL_GPIO_Init+0x300>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d101      	bne.n	8003aba <HAL_GPIO_Init+0x1f2>
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	e008      	b.n	8003acc <HAL_GPIO_Init+0x204>
 8003aba:	2307      	movs	r3, #7
 8003abc:	e006      	b.n	8003acc <HAL_GPIO_Init+0x204>
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e004      	b.n	8003acc <HAL_GPIO_Init+0x204>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e002      	b.n	8003acc <HAL_GPIO_Init+0x204>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <HAL_GPIO_Init+0x204>
 8003aca:	2300      	movs	r3, #0
 8003acc:	69fa      	ldr	r2, [r7, #28]
 8003ace:	f002 0203 	and.w	r2, r2, #3
 8003ad2:	0092      	lsls	r2, r2, #2
 8003ad4:	4093      	lsls	r3, r2
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003adc:	4935      	ldr	r1, [pc, #212]	; (8003bb4 <HAL_GPIO_Init+0x2ec>)
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	089b      	lsrs	r3, r3, #2
 8003ae2:	3302      	adds	r3, #2
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aea:	4b38      	ldr	r3, [pc, #224]	; (8003bcc <HAL_GPIO_Init+0x304>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	43db      	mvns	r3, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4013      	ands	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b0e:	4a2f      	ldr	r2, [pc, #188]	; (8003bcc <HAL_GPIO_Init+0x304>)
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b14:	4b2d      	ldr	r3, [pc, #180]	; (8003bcc <HAL_GPIO_Init+0x304>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b38:	4a24      	ldr	r2, [pc, #144]	; (8003bcc <HAL_GPIO_Init+0x304>)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b3e:	4b23      	ldr	r3, [pc, #140]	; (8003bcc <HAL_GPIO_Init+0x304>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	43db      	mvns	r3, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b62:	4a1a      	ldr	r2, [pc, #104]	; (8003bcc <HAL_GPIO_Init+0x304>)
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b68:	4b18      	ldr	r3, [pc, #96]	; (8003bcc <HAL_GPIO_Init+0x304>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	43db      	mvns	r3, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4013      	ands	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b8c:	4a0f      	ldr	r2, [pc, #60]	; (8003bcc <HAL_GPIO_Init+0x304>)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	3301      	adds	r3, #1
 8003b96:	61fb      	str	r3, [r7, #28]
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	2b0f      	cmp	r3, #15
 8003b9c:	f67f aea2 	bls.w	80038e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ba0:	bf00      	nop
 8003ba2:	bf00      	nop
 8003ba4:	3724      	adds	r7, #36	; 0x24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40013800 	.word	0x40013800
 8003bb8:	40020000 	.word	0x40020000
 8003bbc:	40020400 	.word	0x40020400
 8003bc0:	40020800 	.word	0x40020800
 8003bc4:	40020c00 	.word	0x40020c00
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40013c00 	.word	0x40013c00

08003bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	807b      	strh	r3, [r7, #2]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003be0:	787b      	ldrb	r3, [r7, #1]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003be6:	887a      	ldrh	r2, [r7, #2]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bec:	e003      	b.n	8003bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bee:	887b      	ldrh	r3, [r7, #2]
 8003bf0:	041a      	lsls	r2, r3, #16
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	619a      	str	r2, [r3, #24]
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
	...

08003c04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c0e:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c10:	695a      	ldr	r2, [r3, #20]
 8003c12:	88fb      	ldrh	r3, [r7, #6]
 8003c14:	4013      	ands	r3, r2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d006      	beq.n	8003c28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c1a:	4a05      	ldr	r2, [pc, #20]	; (8003c30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c1c:	88fb      	ldrh	r3, [r7, #6]
 8003c1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c20:	88fb      	ldrh	r3, [r7, #6]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fe fcb4 	bl	8002590 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c28:	bf00      	nop
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40013c00 	.word	0x40013c00

08003c34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e12b      	b.n	8003e9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7fe fd2c 	bl	80026b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2224      	movs	r2, #36	; 0x24
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0201 	bic.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c98:	f002 f830 	bl	8005cfc <HAL_RCC_GetPCLK1Freq>
 8003c9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	4a81      	ldr	r2, [pc, #516]	; (8003ea8 <HAL_I2C_Init+0x274>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d807      	bhi.n	8003cb8 <HAL_I2C_Init+0x84>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4a80      	ldr	r2, [pc, #512]	; (8003eac <HAL_I2C_Init+0x278>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	bf94      	ite	ls
 8003cb0:	2301      	movls	r3, #1
 8003cb2:	2300      	movhi	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	e006      	b.n	8003cc6 <HAL_I2C_Init+0x92>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4a7d      	ldr	r2, [pc, #500]	; (8003eb0 <HAL_I2C_Init+0x27c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	bf94      	ite	ls
 8003cc0:	2301      	movls	r3, #1
 8003cc2:	2300      	movhi	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e0e7      	b.n	8003e9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	4a78      	ldr	r2, [pc, #480]	; (8003eb4 <HAL_I2C_Init+0x280>)
 8003cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd6:	0c9b      	lsrs	r3, r3, #18
 8003cd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	4a6a      	ldr	r2, [pc, #424]	; (8003ea8 <HAL_I2C_Init+0x274>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d802      	bhi.n	8003d08 <HAL_I2C_Init+0xd4>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	3301      	adds	r3, #1
 8003d06:	e009      	b.n	8003d1c <HAL_I2C_Init+0xe8>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d0e:	fb02 f303 	mul.w	r3, r2, r3
 8003d12:	4a69      	ldr	r2, [pc, #420]	; (8003eb8 <HAL_I2C_Init+0x284>)
 8003d14:	fba2 2303 	umull	r2, r3, r2, r3
 8003d18:	099b      	lsrs	r3, r3, #6
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6812      	ldr	r2, [r2, #0]
 8003d20:	430b      	orrs	r3, r1
 8003d22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	495c      	ldr	r1, [pc, #368]	; (8003ea8 <HAL_I2C_Init+0x274>)
 8003d38:	428b      	cmp	r3, r1
 8003d3a:	d819      	bhi.n	8003d70 <HAL_I2C_Init+0x13c>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	1e59      	subs	r1, r3, #1
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d4a:	1c59      	adds	r1, r3, #1
 8003d4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d50:	400b      	ands	r3, r1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <HAL_I2C_Init+0x138>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1e59      	subs	r1, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d64:	3301      	adds	r3, #1
 8003d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d6a:	e051      	b.n	8003e10 <HAL_I2C_Init+0x1dc>
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	e04f      	b.n	8003e10 <HAL_I2C_Init+0x1dc>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d111      	bne.n	8003d9c <HAL_I2C_Init+0x168>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	1e58      	subs	r0, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6859      	ldr	r1, [r3, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	440b      	add	r3, r1
 8003d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bf0c      	ite	eq
 8003d94:	2301      	moveq	r3, #1
 8003d96:	2300      	movne	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	e012      	b.n	8003dc2 <HAL_I2C_Init+0x18e>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1e58      	subs	r0, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6859      	ldr	r1, [r3, #4]
 8003da4:	460b      	mov	r3, r1
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	0099      	lsls	r1, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db2:	3301      	adds	r3, #1
 8003db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	bf0c      	ite	eq
 8003dbc:	2301      	moveq	r3, #1
 8003dbe:	2300      	movne	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_I2C_Init+0x196>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e022      	b.n	8003e10 <HAL_I2C_Init+0x1dc>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10e      	bne.n	8003df0 <HAL_I2C_Init+0x1bc>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	1e58      	subs	r0, r3, #1
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6859      	ldr	r1, [r3, #4]
 8003dda:	460b      	mov	r3, r1
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	440b      	add	r3, r1
 8003de0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003de4:	3301      	adds	r3, #1
 8003de6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dee:	e00f      	b.n	8003e10 <HAL_I2C_Init+0x1dc>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	1e58      	subs	r0, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6859      	ldr	r1, [r3, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	0099      	lsls	r1, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e06:	3301      	adds	r3, #1
 8003e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	6809      	ldr	r1, [r1, #0]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69da      	ldr	r2, [r3, #28]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6911      	ldr	r1, [r2, #16]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	68d2      	ldr	r2, [r2, #12]
 8003e4a:	4311      	orrs	r1, r2
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6812      	ldr	r2, [r2, #0]
 8003e50:	430b      	orrs	r3, r1
 8003e52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695a      	ldr	r2, [r3, #20]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0201 	orr.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	000186a0 	.word	0x000186a0
 8003eac:	001e847f 	.word	0x001e847f
 8003eb0:	003d08ff 	.word	0x003d08ff
 8003eb4:	431bde83 	.word	0x431bde83
 8003eb8:	10624dd3 	.word	0x10624dd3

08003ebc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af02      	add	r7, sp, #8
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	607a      	str	r2, [r7, #4]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	460b      	mov	r3, r1
 8003eca:	817b      	strh	r3, [r7, #10]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ed0:	f7fe ff34 	bl	8002d3c <HAL_GetTick>
 8003ed4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	f040 80e0 	bne.w	80040a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	2319      	movs	r3, #25
 8003eea:	2201      	movs	r2, #1
 8003eec:	4970      	ldr	r1, [pc, #448]	; (80040b0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f001 f8f6 	bl	80050e0 <I2C_WaitOnFlagUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003efa:	2302      	movs	r3, #2
 8003efc:	e0d3      	b.n	80040a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d101      	bne.n	8003f0c <HAL_I2C_Master_Transmit+0x50>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e0cc      	b.n	80040a6 <HAL_I2C_Master_Transmit+0x1ea>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d007      	beq.n	8003f32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 0201 	orr.w	r2, r2, #1
 8003f30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2221      	movs	r2, #33	; 0x21
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2210      	movs	r2, #16
 8003f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	893a      	ldrh	r2, [r7, #8]
 8003f62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4a50      	ldr	r2, [pc, #320]	; (80040b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f74:	8979      	ldrh	r1, [r7, #10]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	6a3a      	ldr	r2, [r7, #32]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 fde2 	bl	8004b44 <I2C_MasterRequestWrite>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e08d      	b.n	80040a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	613b      	str	r3, [r7, #16]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	613b      	str	r3, [r7, #16]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003fa0:	e066      	b.n	8004070 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	6a39      	ldr	r1, [r7, #32]
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f001 f970 	bl	800528c <I2C_WaitOnTXEFlagUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00d      	beq.n	8003fce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d107      	bne.n	8003fca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e06b      	b.n	80040a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	781a      	ldrb	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b04      	cmp	r3, #4
 800400a:	d11b      	bne.n	8004044 <HAL_I2C_Master_Transmit+0x188>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004010:	2b00      	cmp	r3, #0
 8004012:	d017      	beq.n	8004044 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	781a      	ldrb	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	6a39      	ldr	r1, [r7, #32]
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f001 f960 	bl	800530e <I2C_WaitOnBTFFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00d      	beq.n	8004070 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	2b04      	cmp	r3, #4
 800405a:	d107      	bne.n	800406c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800406a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e01a      	b.n	80040a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004074:	2b00      	cmp	r3, #0
 8004076:	d194      	bne.n	8003fa2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004086:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	e000      	b.n	80040a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80040a4:	2302      	movs	r3, #2
  }
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	00100002 	.word	0x00100002
 80040b4:	ffff0000 	.word	0xffff0000

080040b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08c      	sub	sp, #48	; 0x30
 80040bc:	af02      	add	r7, sp, #8
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	607a      	str	r2, [r7, #4]
 80040c2:	461a      	mov	r2, r3
 80040c4:	460b      	mov	r3, r1
 80040c6:	817b      	strh	r3, [r7, #10]
 80040c8:	4613      	mov	r3, r2
 80040ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040cc:	f7fe fe36 	bl	8002d3c <HAL_GetTick>
 80040d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b20      	cmp	r3, #32
 80040dc:	f040 820b 	bne.w	80044f6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	2319      	movs	r3, #25
 80040e6:	2201      	movs	r2, #1
 80040e8:	497c      	ldr	r1, [pc, #496]	; (80042dc <HAL_I2C_Master_Receive+0x224>)
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 fff8 	bl	80050e0 <I2C_WaitOnFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80040f6:	2302      	movs	r3, #2
 80040f8:	e1fe      	b.n	80044f8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_I2C_Master_Receive+0x50>
 8004104:	2302      	movs	r3, #2
 8004106:	e1f7      	b.n	80044f8 <HAL_I2C_Master_Receive+0x440>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b01      	cmp	r3, #1
 800411c:	d007      	beq.n	800412e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0201 	orr.w	r2, r2, #1
 800412c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800413c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2222      	movs	r2, #34	; 0x22
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2210      	movs	r2, #16
 800414a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	893a      	ldrh	r2, [r7, #8]
 800415e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4a5c      	ldr	r2, [pc, #368]	; (80042e0 <HAL_I2C_Master_Receive+0x228>)
 800416e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004170:	8979      	ldrh	r1, [r7, #10]
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 fd66 	bl	8004c48 <I2C_MasterRequestRead>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e1b8      	b.n	80044f8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418a:	2b00      	cmp	r3, #0
 800418c:	d113      	bne.n	80041b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800418e:	2300      	movs	r3, #0
 8004190:	623b      	str	r3, [r7, #32]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	623b      	str	r3, [r7, #32]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	623b      	str	r3, [r7, #32]
 80041a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	e18c      	b.n	80044d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d11b      	bne.n	80041f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ce:	2300      	movs	r3, #0
 80041d0:	61fb      	str	r3, [r7, #28]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	61fb      	str	r3, [r7, #28]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	61fb      	str	r3, [r7, #28]
 80041e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	e16c      	b.n	80044d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d11b      	bne.n	8004236 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800420c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800421c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800421e:	2300      	movs	r3, #0
 8004220:	61bb      	str	r3, [r7, #24]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	61bb      	str	r3, [r7, #24]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	61bb      	str	r3, [r7, #24]
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	e14c      	b.n	80044d0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004244:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800425c:	e138      	b.n	80044d0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004262:	2b03      	cmp	r3, #3
 8004264:	f200 80f1 	bhi.w	800444a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426c:	2b01      	cmp	r3, #1
 800426e:	d123      	bne.n	80042b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004272:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f001 f88b 	bl	8005390 <I2C_WaitOnRXNEFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e139      	b.n	80044f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691a      	ldr	r2, [r3, #16]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042b6:	e10b      	b.n	80044d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d14e      	bne.n	800435e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c6:	2200      	movs	r2, #0
 80042c8:	4906      	ldr	r1, [pc, #24]	; (80042e4 <HAL_I2C_Master_Receive+0x22c>)
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 ff08 	bl	80050e0 <I2C_WaitOnFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e10e      	b.n	80044f8 <HAL_I2C_Master_Receive+0x440>
 80042da:	bf00      	nop
 80042dc:	00100002 	.word	0x00100002
 80042e0:	ffff0000 	.word	0xffff0000
 80042e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004320:	b29b      	uxth	r3, r3
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800435c:	e0b8      	b.n	80044d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004364:	2200      	movs	r2, #0
 8004366:	4966      	ldr	r1, [pc, #408]	; (8004500 <HAL_I2C_Master_Receive+0x448>)
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 feb9 	bl	80050e0 <I2C_WaitOnFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0bf      	b.n	80044f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004386:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691a      	ldr	r2, [r3, #16]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	2200      	movs	r2, #0
 80043c2:	494f      	ldr	r1, [pc, #316]	; (8004500 <HAL_I2C_Master_Receive+0x448>)
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f000 fe8b 	bl	80050e0 <I2C_WaitOnFlagUntilTimeout>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e091      	b.n	80044f8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004432:	3b01      	subs	r3, #1
 8004434:	b29a      	uxth	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004448:	e042      	b.n	80044d0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800444a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800444c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 ff9e 	bl	8005390 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e04c      	b.n	80044f8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	2b04      	cmp	r3, #4
 800449c:	d118      	bne.n	80044d0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b29a      	uxth	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f47f aec2 	bne.w	800425e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	e000      	b.n	80044f8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80044f6:	2302      	movs	r3, #2
  }
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3728      	adds	r7, #40	; 0x28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	00010004 	.word	0x00010004

08004504 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b088      	sub	sp, #32
 8004508:	af02      	add	r7, sp, #8
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	4608      	mov	r0, r1
 800450e:	4611      	mov	r1, r2
 8004510:	461a      	mov	r2, r3
 8004512:	4603      	mov	r3, r0
 8004514:	817b      	strh	r3, [r7, #10]
 8004516:	460b      	mov	r3, r1
 8004518:	813b      	strh	r3, [r7, #8]
 800451a:	4613      	mov	r3, r2
 800451c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800451e:	f7fe fc0d 	bl	8002d3c <HAL_GetTick>
 8004522:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b20      	cmp	r3, #32
 800452e:	f040 80d9 	bne.w	80046e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	2319      	movs	r3, #25
 8004538:	2201      	movs	r2, #1
 800453a:	496d      	ldr	r1, [pc, #436]	; (80046f0 <HAL_I2C_Mem_Write+0x1ec>)
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f000 fdcf 	bl	80050e0 <I2C_WaitOnFlagUntilTimeout>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004548:	2302      	movs	r3, #2
 800454a:	e0cc      	b.n	80046e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_I2C_Mem_Write+0x56>
 8004556:	2302      	movs	r3, #2
 8004558:	e0c5      	b.n	80046e6 <HAL_I2C_Mem_Write+0x1e2>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b01      	cmp	r3, #1
 800456e:	d007      	beq.n	8004580 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0201 	orr.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800458e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2221      	movs	r2, #33	; 0x21
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2240      	movs	r2, #64	; 0x40
 800459c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a3a      	ldr	r2, [r7, #32]
 80045aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4a4d      	ldr	r2, [pc, #308]	; (80046f4 <HAL_I2C_Mem_Write+0x1f0>)
 80045c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045c2:	88f8      	ldrh	r0, [r7, #6]
 80045c4:	893a      	ldrh	r2, [r7, #8]
 80045c6:	8979      	ldrh	r1, [r7, #10]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	9301      	str	r3, [sp, #4]
 80045cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	4603      	mov	r3, r0
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 fc06 	bl	8004de4 <I2C_RequestMemoryWrite>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d052      	beq.n	8004684 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e081      	b.n	80046e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 fe50 	bl	800528c <I2C_WaitOnTXEFlagUntilTimeout>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00d      	beq.n	800460e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d107      	bne.n	800460a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004608:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e06b      	b.n	80046e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	781a      	ldrb	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004628:	3b01      	subs	r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b04      	cmp	r3, #4
 800464a:	d11b      	bne.n	8004684 <HAL_I2C_Mem_Write+0x180>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004650:	2b00      	cmp	r3, #0
 8004652:	d017      	beq.n	8004684 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	781a      	ldrb	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467a:	b29b      	uxth	r3, r3
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1aa      	bne.n	80045e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 fe3c 	bl	800530e <I2C_WaitOnBTFFlagUntilTimeout>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00d      	beq.n	80046b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d107      	bne.n	80046b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e016      	b.n	80046e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046e0:	2300      	movs	r3, #0
 80046e2:	e000      	b.n	80046e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80046e4:	2302      	movs	r3, #2
  }
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	00100002 	.word	0x00100002
 80046f4:	ffff0000 	.word	0xffff0000

080046f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08c      	sub	sp, #48	; 0x30
 80046fc:	af02      	add	r7, sp, #8
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	4608      	mov	r0, r1
 8004702:	4611      	mov	r1, r2
 8004704:	461a      	mov	r2, r3
 8004706:	4603      	mov	r3, r0
 8004708:	817b      	strh	r3, [r7, #10]
 800470a:	460b      	mov	r3, r1
 800470c:	813b      	strh	r3, [r7, #8]
 800470e:	4613      	mov	r3, r2
 8004710:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004712:	f7fe fb13 	bl	8002d3c <HAL_GetTick>
 8004716:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b20      	cmp	r3, #32
 8004722:	f040 8208 	bne.w	8004b36 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	2319      	movs	r3, #25
 800472c:	2201      	movs	r2, #1
 800472e:	497b      	ldr	r1, [pc, #492]	; (800491c <HAL_I2C_Mem_Read+0x224>)
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 fcd5 	bl	80050e0 <I2C_WaitOnFlagUntilTimeout>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800473c:	2302      	movs	r3, #2
 800473e:	e1fb      	b.n	8004b38 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <HAL_I2C_Mem_Read+0x56>
 800474a:	2302      	movs	r3, #2
 800474c:	e1f4      	b.n	8004b38 <HAL_I2C_Mem_Read+0x440>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b01      	cmp	r3, #1
 8004762:	d007      	beq.n	8004774 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0201 	orr.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004782:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2222      	movs	r2, #34	; 0x22
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2240      	movs	r2, #64	; 0x40
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800479e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80047a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4a5b      	ldr	r2, [pc, #364]	; (8004920 <HAL_I2C_Mem_Read+0x228>)
 80047b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047b6:	88f8      	ldrh	r0, [r7, #6]
 80047b8:	893a      	ldrh	r2, [r7, #8]
 80047ba:	8979      	ldrh	r1, [r7, #10]
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	9301      	str	r3, [sp, #4]
 80047c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	4603      	mov	r3, r0
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 fba2 	bl	8004f10 <I2C_RequestMemoryRead>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e1b0      	b.n	8004b38 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d113      	bne.n	8004806 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047de:	2300      	movs	r3, #0
 80047e0:	623b      	str	r3, [r7, #32]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	623b      	str	r3, [r7, #32]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	623b      	str	r3, [r7, #32]
 80047f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	e184      	b.n	8004b10 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480a:	2b01      	cmp	r3, #1
 800480c:	d11b      	bne.n	8004846 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800481c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800481e:	2300      	movs	r3, #0
 8004820:	61fb      	str	r3, [r7, #28]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	61fb      	str	r3, [r7, #28]
 8004832:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	e164      	b.n	8004b10 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484a:	2b02      	cmp	r3, #2
 800484c:	d11b      	bne.n	8004886 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800485c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800486c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800486e:	2300      	movs	r3, #0
 8004870:	61bb      	str	r3, [r7, #24]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	61bb      	str	r3, [r7, #24]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	61bb      	str	r3, [r7, #24]
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	e144      	b.n	8004b10 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004886:	2300      	movs	r3, #0
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	617b      	str	r3, [r7, #20]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	617b      	str	r3, [r7, #20]
 800489a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800489c:	e138      	b.n	8004b10 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	f200 80f1 	bhi.w	8004a8a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d123      	bne.n	80048f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 fd6b 	bl	8005390 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e139      	b.n	8004b38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691a      	ldr	r2, [r3, #16]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048f6:	e10b      	b.n	8004b10 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d14e      	bne.n	800499e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004906:	2200      	movs	r2, #0
 8004908:	4906      	ldr	r1, [pc, #24]	; (8004924 <HAL_I2C_Mem_Read+0x22c>)
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 fbe8 	bl	80050e0 <I2C_WaitOnFlagUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d008      	beq.n	8004928 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e10e      	b.n	8004b38 <HAL_I2C_Mem_Read+0x440>
 800491a:	bf00      	nop
 800491c:	00100002 	.word	0x00100002
 8004920:	ffff0000 	.word	0xffff0000
 8004924:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004936:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691a      	ldr	r2, [r3, #16]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004960:	b29b      	uxth	r3, r3
 8004962:	3b01      	subs	r3, #1
 8004964:	b29a      	uxth	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	691a      	ldr	r2, [r3, #16]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	b2d2      	uxtb	r2, r2
 8004976:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004986:	3b01      	subs	r3, #1
 8004988:	b29a      	uxth	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004992:	b29b      	uxth	r3, r3
 8004994:	3b01      	subs	r3, #1
 8004996:	b29a      	uxth	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800499c:	e0b8      	b.n	8004b10 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a4:	2200      	movs	r2, #0
 80049a6:	4966      	ldr	r1, [pc, #408]	; (8004b40 <HAL_I2C_Mem_Read+0x448>)
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f000 fb99 	bl	80050e0 <I2C_WaitOnFlagUntilTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0bf      	b.n	8004b38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691a      	ldr	r2, [r3, #16]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a00:	2200      	movs	r2, #0
 8004a02:	494f      	ldr	r1, [pc, #316]	; (8004b40 <HAL_I2C_Mem_Read+0x448>)
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 fb6b 	bl	80050e0 <I2C_WaitOnFlagUntilTimeout>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e091      	b.n	8004b38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691a      	ldr	r2, [r3, #16]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a40:	3b01      	subs	r3, #1
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a88:	e042      	b.n	8004b10 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 fc7e 	bl	8005390 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e04c      	b.n	8004b38 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aba:	3b01      	subs	r3, #1
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d118      	bne.n	8004b10 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	b2d2      	uxtb	r2, r2
 8004aea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f47f aec2 	bne.w	800489e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	e000      	b.n	8004b38 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004b36:	2302      	movs	r3, #2
  }
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3728      	adds	r7, #40	; 0x28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	00010004 	.word	0x00010004

08004b44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	607a      	str	r2, [r7, #4]
 8004b4e:	603b      	str	r3, [r7, #0]
 8004b50:	460b      	mov	r3, r1
 8004b52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d006      	beq.n	8004b6e <I2C_MasterRequestWrite+0x2a>
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d003      	beq.n	8004b6e <I2C_MasterRequestWrite+0x2a>
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b6c:	d108      	bne.n	8004b80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	e00b      	b.n	8004b98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	2b12      	cmp	r3, #18
 8004b86:	d107      	bne.n	8004b98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 fa9b 	bl	80050e0 <I2C_WaitOnFlagUntilTimeout>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00d      	beq.n	8004bcc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bbe:	d103      	bne.n	8004bc8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e035      	b.n	8004c38 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bd4:	d108      	bne.n	8004be8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bd6:	897b      	ldrh	r3, [r7, #10]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	461a      	mov	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004be4:	611a      	str	r2, [r3, #16]
 8004be6:	e01b      	b.n	8004c20 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004be8:	897b      	ldrh	r3, [r7, #10]
 8004bea:	11db      	asrs	r3, r3, #7
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	f003 0306 	and.w	r3, r3, #6
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	f063 030f 	orn	r3, r3, #15
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	490e      	ldr	r1, [pc, #56]	; (8004c40 <I2C_MasterRequestWrite+0xfc>)
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 fac1 	bl	800518e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e010      	b.n	8004c38 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c16:	897b      	ldrh	r3, [r7, #10]
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	4907      	ldr	r1, [pc, #28]	; (8004c44 <I2C_MasterRequestWrite+0x100>)
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 fab1 	bl	800518e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	00010008 	.word	0x00010008
 8004c44:	00010002 	.word	0x00010002

08004c48 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	607a      	str	r2, [r7, #4]
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	460b      	mov	r3, r1
 8004c56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c6c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d006      	beq.n	8004c82 <I2C_MasterRequestRead+0x3a>
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d003      	beq.n	8004c82 <I2C_MasterRequestRead+0x3a>
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c80:	d108      	bne.n	8004c94 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	e00b      	b.n	8004cac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c98:	2b11      	cmp	r3, #17
 8004c9a:	d107      	bne.n	8004cac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004caa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 fa11 	bl	80050e0 <I2C_WaitOnFlagUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00d      	beq.n	8004ce0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cd2:	d103      	bne.n	8004cdc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e079      	b.n	8004dd4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ce8:	d108      	bne.n	8004cfc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004cea:	897b      	ldrh	r3, [r7, #10]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	f043 0301 	orr.w	r3, r3, #1
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	611a      	str	r2, [r3, #16]
 8004cfa:	e05f      	b.n	8004dbc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004cfc:	897b      	ldrh	r3, [r7, #10]
 8004cfe:	11db      	asrs	r3, r3, #7
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	f003 0306 	and.w	r3, r3, #6
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	f063 030f 	orn	r3, r3, #15
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	4930      	ldr	r1, [pc, #192]	; (8004ddc <I2C_MasterRequestRead+0x194>)
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 fa37 	bl	800518e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e054      	b.n	8004dd4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d2a:	897b      	ldrh	r3, [r7, #10]
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	4929      	ldr	r1, [pc, #164]	; (8004de0 <I2C_MasterRequestRead+0x198>)
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 fa27 	bl	800518e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e044      	b.n	8004dd4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	613b      	str	r3, [r7, #16]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	613b      	str	r3, [r7, #16]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	613b      	str	r3, [r7, #16]
 8004d5e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d6e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 f9af 	bl	80050e0 <I2C_WaitOnFlagUntilTimeout>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00d      	beq.n	8004da4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d96:	d103      	bne.n	8004da0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d9e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e017      	b.n	8004dd4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004da4:	897b      	ldrh	r3, [r7, #10]
 8004da6:	11db      	asrs	r3, r3, #7
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	f003 0306 	and.w	r3, r3, #6
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	f063 030e 	orn	r3, r3, #14
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	4907      	ldr	r1, [pc, #28]	; (8004de0 <I2C_MasterRequestRead+0x198>)
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 f9e3 	bl	800518e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e000      	b.n	8004dd4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	00010008 	.word	0x00010008
 8004de0:	00010002 	.word	0x00010002

08004de4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	4608      	mov	r0, r1
 8004dee:	4611      	mov	r1, r2
 8004df0:	461a      	mov	r2, r3
 8004df2:	4603      	mov	r3, r0
 8004df4:	817b      	strh	r3, [r7, #10]
 8004df6:	460b      	mov	r3, r1
 8004df8:	813b      	strh	r3, [r7, #8]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 f960 	bl	80050e0 <I2C_WaitOnFlagUntilTimeout>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00d      	beq.n	8004e42 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e34:	d103      	bne.n	8004e3e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e05f      	b.n	8004f02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e42:	897b      	ldrh	r3, [r7, #10]
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	461a      	mov	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	6a3a      	ldr	r2, [r7, #32]
 8004e56:	492d      	ldr	r1, [pc, #180]	; (8004f0c <I2C_RequestMemoryWrite+0x128>)
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 f998 	bl	800518e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e04c      	b.n	8004f02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e80:	6a39      	ldr	r1, [r7, #32]
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 fa02 	bl	800528c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00d      	beq.n	8004eaa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d107      	bne.n	8004ea6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ea4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e02b      	b.n	8004f02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004eaa:	88fb      	ldrh	r3, [r7, #6]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d105      	bne.n	8004ebc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004eb0:	893b      	ldrh	r3, [r7, #8]
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	611a      	str	r2, [r3, #16]
 8004eba:	e021      	b.n	8004f00 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ebc:	893b      	ldrh	r3, [r7, #8]
 8004ebe:	0a1b      	lsrs	r3, r3, #8
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ecc:	6a39      	ldr	r1, [r7, #32]
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 f9dc 	bl	800528c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00d      	beq.n	8004ef6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d107      	bne.n	8004ef2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e005      	b.n	8004f02 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ef6:	893b      	ldrh	r3, [r7, #8]
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	00010002 	.word	0x00010002

08004f10 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af02      	add	r7, sp, #8
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	4608      	mov	r0, r1
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	4603      	mov	r3, r0
 8004f20:	817b      	strh	r3, [r7, #10]
 8004f22:	460b      	mov	r3, r1
 8004f24:	813b      	strh	r3, [r7, #8]
 8004f26:	4613      	mov	r3, r2
 8004f28:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f38:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 f8c2 	bl	80050e0 <I2C_WaitOnFlagUntilTimeout>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00d      	beq.n	8004f7e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f70:	d103      	bne.n	8004f7a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e0aa      	b.n	80050d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f7e:	897b      	ldrh	r3, [r7, #10]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	461a      	mov	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	6a3a      	ldr	r2, [r7, #32]
 8004f92:	4952      	ldr	r1, [pc, #328]	; (80050dc <I2C_RequestMemoryRead+0x1cc>)
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 f8fa 	bl	800518e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e097      	b.n	80050d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	617b      	str	r3, [r7, #20]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fbc:	6a39      	ldr	r1, [r7, #32]
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f000 f964 	bl	800528c <I2C_WaitOnTXEFlagUntilTimeout>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00d      	beq.n	8004fe6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	d107      	bne.n	8004fe2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e076      	b.n	80050d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fe6:	88fb      	ldrh	r3, [r7, #6]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d105      	bne.n	8004ff8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fec:	893b      	ldrh	r3, [r7, #8]
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	611a      	str	r2, [r3, #16]
 8004ff6:	e021      	b.n	800503c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ff8:	893b      	ldrh	r3, [r7, #8]
 8004ffa:	0a1b      	lsrs	r3, r3, #8
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	b2da      	uxtb	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005008:	6a39      	ldr	r1, [r7, #32]
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 f93e 	bl	800528c <I2C_WaitOnTXEFlagUntilTimeout>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00d      	beq.n	8005032 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	2b04      	cmp	r3, #4
 800501c:	d107      	bne.n	800502e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800502c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e050      	b.n	80050d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005032:	893b      	ldrh	r3, [r7, #8]
 8005034:	b2da      	uxtb	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800503c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800503e:	6a39      	ldr	r1, [r7, #32]
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f000 f923 	bl	800528c <I2C_WaitOnTXEFlagUntilTimeout>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00d      	beq.n	8005068 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005050:	2b04      	cmp	r3, #4
 8005052:	d107      	bne.n	8005064 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005062:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e035      	b.n	80050d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005076:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	2200      	movs	r2, #0
 8005080:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 f82b 	bl	80050e0 <I2C_WaitOnFlagUntilTimeout>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00d      	beq.n	80050ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800509e:	d103      	bne.n	80050a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e013      	b.n	80050d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80050ac:	897b      	ldrh	r3, [r7, #10]
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	f043 0301 	orr.w	r3, r3, #1
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	6a3a      	ldr	r2, [r7, #32]
 80050c0:	4906      	ldr	r1, [pc, #24]	; (80050dc <I2C_RequestMemoryRead+0x1cc>)
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 f863 	bl	800518e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e000      	b.n	80050d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	00010002 	.word	0x00010002

080050e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	603b      	str	r3, [r7, #0]
 80050ec:	4613      	mov	r3, r2
 80050ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050f0:	e025      	b.n	800513e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f8:	d021      	beq.n	800513e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050fa:	f7fd fe1f 	bl	8002d3c <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	429a      	cmp	r2, r3
 8005108:	d302      	bcc.n	8005110 <I2C_WaitOnFlagUntilTimeout+0x30>
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d116      	bne.n	800513e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2220      	movs	r2, #32
 800511a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512a:	f043 0220 	orr.w	r2, r3, #32
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e023      	b.n	8005186 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	0c1b      	lsrs	r3, r3, #16
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b01      	cmp	r3, #1
 8005146:	d10d      	bne.n	8005164 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	43da      	mvns	r2, r3
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	4013      	ands	r3, r2
 8005154:	b29b      	uxth	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	bf0c      	ite	eq
 800515a:	2301      	moveq	r3, #1
 800515c:	2300      	movne	r3, #0
 800515e:	b2db      	uxtb	r3, r3
 8005160:	461a      	mov	r2, r3
 8005162:	e00c      	b.n	800517e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	43da      	mvns	r2, r3
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4013      	ands	r3, r2
 8005170:	b29b      	uxth	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	bf0c      	ite	eq
 8005176:	2301      	moveq	r3, #1
 8005178:	2300      	movne	r3, #0
 800517a:	b2db      	uxtb	r3, r3
 800517c:	461a      	mov	r2, r3
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	429a      	cmp	r2, r3
 8005182:	d0b6      	beq.n	80050f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	60f8      	str	r0, [r7, #12]
 8005196:	60b9      	str	r1, [r7, #8]
 8005198:	607a      	str	r2, [r7, #4]
 800519a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800519c:	e051      	b.n	8005242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ac:	d123      	bne.n	80051f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2220      	movs	r2, #32
 80051d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	f043 0204 	orr.w	r2, r3, #4
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e046      	b.n	8005284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fc:	d021      	beq.n	8005242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051fe:	f7fd fd9d 	bl	8002d3c <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	429a      	cmp	r2, r3
 800520c:	d302      	bcc.n	8005214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d116      	bne.n	8005242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2220      	movs	r2, #32
 800521e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	f043 0220 	orr.w	r2, r3, #32
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e020      	b.n	8005284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	0c1b      	lsrs	r3, r3, #16
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b01      	cmp	r3, #1
 800524a:	d10c      	bne.n	8005266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	43da      	mvns	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4013      	ands	r3, r2
 8005258:	b29b      	uxth	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	bf14      	ite	ne
 800525e:	2301      	movne	r3, #1
 8005260:	2300      	moveq	r3, #0
 8005262:	b2db      	uxtb	r3, r3
 8005264:	e00b      	b.n	800527e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	43da      	mvns	r2, r3
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	4013      	ands	r3, r2
 8005272:	b29b      	uxth	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	bf14      	ite	ne
 8005278:	2301      	movne	r3, #1
 800527a:	2300      	moveq	r3, #0
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d18d      	bne.n	800519e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005298:	e02d      	b.n	80052f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 f8ce 	bl	800543c <I2C_IsAcknowledgeFailed>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e02d      	b.n	8005306 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b0:	d021      	beq.n	80052f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b2:	f7fd fd43 	bl	8002d3c <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d302      	bcc.n	80052c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d116      	bne.n	80052f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	f043 0220 	orr.w	r2, r3, #32
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e007      	b.n	8005306 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005300:	2b80      	cmp	r3, #128	; 0x80
 8005302:	d1ca      	bne.n	800529a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800531a:	e02d      	b.n	8005378 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 f88d 	bl	800543c <I2C_IsAcknowledgeFailed>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e02d      	b.n	8005388 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005332:	d021      	beq.n	8005378 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005334:	f7fd fd02 	bl	8002d3c <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	429a      	cmp	r2, r3
 8005342:	d302      	bcc.n	800534a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d116      	bne.n	8005378 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2220      	movs	r2, #32
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	f043 0220 	orr.w	r2, r3, #32
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e007      	b.n	8005388 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	f003 0304 	and.w	r3, r3, #4
 8005382:	2b04      	cmp	r3, #4
 8005384:	d1ca      	bne.n	800531c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800539c:	e042      	b.n	8005424 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	f003 0310 	and.w	r3, r3, #16
 80053a8:	2b10      	cmp	r3, #16
 80053aa:	d119      	bne.n	80053e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f06f 0210 	mvn.w	r2, #16
 80053b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2220      	movs	r2, #32
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e029      	b.n	8005434 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053e0:	f7fd fcac 	bl	8002d3c <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d302      	bcc.n	80053f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d116      	bne.n	8005424 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2220      	movs	r2, #32
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005410:	f043 0220 	orr.w	r2, r3, #32
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e007      	b.n	8005434 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542e:	2b40      	cmp	r3, #64	; 0x40
 8005430:	d1b5      	bne.n	800539e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800544e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005452:	d11b      	bne.n	800548c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800545c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2220      	movs	r2, #32
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	f043 0204 	orr.w	r2, r3, #4
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
	...

0800549c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e267      	b.n	800597e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d075      	beq.n	80055a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054ba:	4b88      	ldr	r3, [pc, #544]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f003 030c 	and.w	r3, r3, #12
 80054c2:	2b04      	cmp	r3, #4
 80054c4:	d00c      	beq.n	80054e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054c6:	4b85      	ldr	r3, [pc, #532]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	d112      	bne.n	80054f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054d2:	4b82      	ldr	r3, [pc, #520]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054de:	d10b      	bne.n	80054f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054e0:	4b7e      	ldr	r3, [pc, #504]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d05b      	beq.n	80055a4 <HAL_RCC_OscConfig+0x108>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d157      	bne.n	80055a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e242      	b.n	800597e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005500:	d106      	bne.n	8005510 <HAL_RCC_OscConfig+0x74>
 8005502:	4b76      	ldr	r3, [pc, #472]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a75      	ldr	r2, [pc, #468]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 8005508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800550c:	6013      	str	r3, [r2, #0]
 800550e:	e01d      	b.n	800554c <HAL_RCC_OscConfig+0xb0>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005518:	d10c      	bne.n	8005534 <HAL_RCC_OscConfig+0x98>
 800551a:	4b70      	ldr	r3, [pc, #448]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a6f      	ldr	r2, [pc, #444]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 8005520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005524:	6013      	str	r3, [r2, #0]
 8005526:	4b6d      	ldr	r3, [pc, #436]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a6c      	ldr	r2, [pc, #432]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 800552c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005530:	6013      	str	r3, [r2, #0]
 8005532:	e00b      	b.n	800554c <HAL_RCC_OscConfig+0xb0>
 8005534:	4b69      	ldr	r3, [pc, #420]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a68      	ldr	r2, [pc, #416]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 800553a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800553e:	6013      	str	r3, [r2, #0]
 8005540:	4b66      	ldr	r3, [pc, #408]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a65      	ldr	r2, [pc, #404]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 8005546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800554a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d013      	beq.n	800557c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005554:	f7fd fbf2 	bl	8002d3c <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800555c:	f7fd fbee 	bl	8002d3c <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b64      	cmp	r3, #100	; 0x64
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e207      	b.n	800597e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800556e:	4b5b      	ldr	r3, [pc, #364]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0f0      	beq.n	800555c <HAL_RCC_OscConfig+0xc0>
 800557a:	e014      	b.n	80055a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800557c:	f7fd fbde 	bl	8002d3c <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005584:	f7fd fbda 	bl	8002d3c <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b64      	cmp	r3, #100	; 0x64
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e1f3      	b.n	800597e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005596:	4b51      	ldr	r3, [pc, #324]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1f0      	bne.n	8005584 <HAL_RCC_OscConfig+0xe8>
 80055a2:	e000      	b.n	80055a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d063      	beq.n	800567a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055b2:	4b4a      	ldr	r3, [pc, #296]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 030c 	and.w	r3, r3, #12
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00b      	beq.n	80055d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055be:	4b47      	ldr	r3, [pc, #284]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055c6:	2b08      	cmp	r3, #8
 80055c8:	d11c      	bne.n	8005604 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ca:	4b44      	ldr	r3, [pc, #272]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d116      	bne.n	8005604 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055d6:	4b41      	ldr	r3, [pc, #260]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d005      	beq.n	80055ee <HAL_RCC_OscConfig+0x152>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d001      	beq.n	80055ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e1c7      	b.n	800597e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055ee:	4b3b      	ldr	r3, [pc, #236]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	4937      	ldr	r1, [pc, #220]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005602:	e03a      	b.n	800567a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d020      	beq.n	800564e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800560c:	4b34      	ldr	r3, [pc, #208]	; (80056e0 <HAL_RCC_OscConfig+0x244>)
 800560e:	2201      	movs	r2, #1
 8005610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005612:	f7fd fb93 	bl	8002d3c <HAL_GetTick>
 8005616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005618:	e008      	b.n	800562c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800561a:	f7fd fb8f 	bl	8002d3c <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d901      	bls.n	800562c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e1a8      	b.n	800597e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800562c:	4b2b      	ldr	r3, [pc, #172]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0f0      	beq.n	800561a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005638:	4b28      	ldr	r3, [pc, #160]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	4925      	ldr	r1, [pc, #148]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 8005648:	4313      	orrs	r3, r2
 800564a:	600b      	str	r3, [r1, #0]
 800564c:	e015      	b.n	800567a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800564e:	4b24      	ldr	r3, [pc, #144]	; (80056e0 <HAL_RCC_OscConfig+0x244>)
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005654:	f7fd fb72 	bl	8002d3c <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800565c:	f7fd fb6e 	bl	8002d3c <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e187      	b.n	800597e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800566e:	4b1b      	ldr	r3, [pc, #108]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1f0      	bne.n	800565c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0308 	and.w	r3, r3, #8
 8005682:	2b00      	cmp	r3, #0
 8005684:	d036      	beq.n	80056f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d016      	beq.n	80056bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800568e:	4b15      	ldr	r3, [pc, #84]	; (80056e4 <HAL_RCC_OscConfig+0x248>)
 8005690:	2201      	movs	r2, #1
 8005692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005694:	f7fd fb52 	bl	8002d3c <HAL_GetTick>
 8005698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800569a:	e008      	b.n	80056ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800569c:	f7fd fb4e 	bl	8002d3c <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e167      	b.n	800597e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056ae:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <HAL_RCC_OscConfig+0x240>)
 80056b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d0f0      	beq.n	800569c <HAL_RCC_OscConfig+0x200>
 80056ba:	e01b      	b.n	80056f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056bc:	4b09      	ldr	r3, [pc, #36]	; (80056e4 <HAL_RCC_OscConfig+0x248>)
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056c2:	f7fd fb3b 	bl	8002d3c <HAL_GetTick>
 80056c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056c8:	e00e      	b.n	80056e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056ca:	f7fd fb37 	bl	8002d3c <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d907      	bls.n	80056e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e150      	b.n	800597e <HAL_RCC_OscConfig+0x4e2>
 80056dc:	40023800 	.word	0x40023800
 80056e0:	42470000 	.word	0x42470000
 80056e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056e8:	4b88      	ldr	r3, [pc, #544]	; (800590c <HAL_RCC_OscConfig+0x470>)
 80056ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1ea      	bne.n	80056ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 8097 	beq.w	8005830 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005702:	2300      	movs	r3, #0
 8005704:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005706:	4b81      	ldr	r3, [pc, #516]	; (800590c <HAL_RCC_OscConfig+0x470>)
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10f      	bne.n	8005732 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005712:	2300      	movs	r3, #0
 8005714:	60bb      	str	r3, [r7, #8]
 8005716:	4b7d      	ldr	r3, [pc, #500]	; (800590c <HAL_RCC_OscConfig+0x470>)
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	4a7c      	ldr	r2, [pc, #496]	; (800590c <HAL_RCC_OscConfig+0x470>)
 800571c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005720:	6413      	str	r3, [r2, #64]	; 0x40
 8005722:	4b7a      	ldr	r3, [pc, #488]	; (800590c <HAL_RCC_OscConfig+0x470>)
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800572a:	60bb      	str	r3, [r7, #8]
 800572c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800572e:	2301      	movs	r3, #1
 8005730:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005732:	4b77      	ldr	r3, [pc, #476]	; (8005910 <HAL_RCC_OscConfig+0x474>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573a:	2b00      	cmp	r3, #0
 800573c:	d118      	bne.n	8005770 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800573e:	4b74      	ldr	r3, [pc, #464]	; (8005910 <HAL_RCC_OscConfig+0x474>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a73      	ldr	r2, [pc, #460]	; (8005910 <HAL_RCC_OscConfig+0x474>)
 8005744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800574a:	f7fd faf7 	bl	8002d3c <HAL_GetTick>
 800574e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005750:	e008      	b.n	8005764 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005752:	f7fd faf3 	bl	8002d3c <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e10c      	b.n	800597e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005764:	4b6a      	ldr	r3, [pc, #424]	; (8005910 <HAL_RCC_OscConfig+0x474>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0f0      	beq.n	8005752 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d106      	bne.n	8005786 <HAL_RCC_OscConfig+0x2ea>
 8005778:	4b64      	ldr	r3, [pc, #400]	; (800590c <HAL_RCC_OscConfig+0x470>)
 800577a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577c:	4a63      	ldr	r2, [pc, #396]	; (800590c <HAL_RCC_OscConfig+0x470>)
 800577e:	f043 0301 	orr.w	r3, r3, #1
 8005782:	6713      	str	r3, [r2, #112]	; 0x70
 8005784:	e01c      	b.n	80057c0 <HAL_RCC_OscConfig+0x324>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	2b05      	cmp	r3, #5
 800578c:	d10c      	bne.n	80057a8 <HAL_RCC_OscConfig+0x30c>
 800578e:	4b5f      	ldr	r3, [pc, #380]	; (800590c <HAL_RCC_OscConfig+0x470>)
 8005790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005792:	4a5e      	ldr	r2, [pc, #376]	; (800590c <HAL_RCC_OscConfig+0x470>)
 8005794:	f043 0304 	orr.w	r3, r3, #4
 8005798:	6713      	str	r3, [r2, #112]	; 0x70
 800579a:	4b5c      	ldr	r3, [pc, #368]	; (800590c <HAL_RCC_OscConfig+0x470>)
 800579c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579e:	4a5b      	ldr	r2, [pc, #364]	; (800590c <HAL_RCC_OscConfig+0x470>)
 80057a0:	f043 0301 	orr.w	r3, r3, #1
 80057a4:	6713      	str	r3, [r2, #112]	; 0x70
 80057a6:	e00b      	b.n	80057c0 <HAL_RCC_OscConfig+0x324>
 80057a8:	4b58      	ldr	r3, [pc, #352]	; (800590c <HAL_RCC_OscConfig+0x470>)
 80057aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ac:	4a57      	ldr	r2, [pc, #348]	; (800590c <HAL_RCC_OscConfig+0x470>)
 80057ae:	f023 0301 	bic.w	r3, r3, #1
 80057b2:	6713      	str	r3, [r2, #112]	; 0x70
 80057b4:	4b55      	ldr	r3, [pc, #340]	; (800590c <HAL_RCC_OscConfig+0x470>)
 80057b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b8:	4a54      	ldr	r2, [pc, #336]	; (800590c <HAL_RCC_OscConfig+0x470>)
 80057ba:	f023 0304 	bic.w	r3, r3, #4
 80057be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d015      	beq.n	80057f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057c8:	f7fd fab8 	bl	8002d3c <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ce:	e00a      	b.n	80057e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057d0:	f7fd fab4 	bl	8002d3c <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	f241 3288 	movw	r2, #5000	; 0x1388
 80057de:	4293      	cmp	r3, r2
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e0cb      	b.n	800597e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057e6:	4b49      	ldr	r3, [pc, #292]	; (800590c <HAL_RCC_OscConfig+0x470>)
 80057e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0ee      	beq.n	80057d0 <HAL_RCC_OscConfig+0x334>
 80057f2:	e014      	b.n	800581e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057f4:	f7fd faa2 	bl	8002d3c <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057fa:	e00a      	b.n	8005812 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057fc:	f7fd fa9e 	bl	8002d3c <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	f241 3288 	movw	r2, #5000	; 0x1388
 800580a:	4293      	cmp	r3, r2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e0b5      	b.n	800597e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005812:	4b3e      	ldr	r3, [pc, #248]	; (800590c <HAL_RCC_OscConfig+0x470>)
 8005814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1ee      	bne.n	80057fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800581e:	7dfb      	ldrb	r3, [r7, #23]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d105      	bne.n	8005830 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005824:	4b39      	ldr	r3, [pc, #228]	; (800590c <HAL_RCC_OscConfig+0x470>)
 8005826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005828:	4a38      	ldr	r2, [pc, #224]	; (800590c <HAL_RCC_OscConfig+0x470>)
 800582a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800582e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 80a1 	beq.w	800597c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800583a:	4b34      	ldr	r3, [pc, #208]	; (800590c <HAL_RCC_OscConfig+0x470>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 030c 	and.w	r3, r3, #12
 8005842:	2b08      	cmp	r3, #8
 8005844:	d05c      	beq.n	8005900 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	2b02      	cmp	r3, #2
 800584c:	d141      	bne.n	80058d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800584e:	4b31      	ldr	r3, [pc, #196]	; (8005914 <HAL_RCC_OscConfig+0x478>)
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005854:	f7fd fa72 	bl	8002d3c <HAL_GetTick>
 8005858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800585a:	e008      	b.n	800586e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800585c:	f7fd fa6e 	bl	8002d3c <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b02      	cmp	r3, #2
 8005868:	d901      	bls.n	800586e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e087      	b.n	800597e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800586e:	4b27      	ldr	r3, [pc, #156]	; (800590c <HAL_RCC_OscConfig+0x470>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1f0      	bne.n	800585c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	69da      	ldr	r2, [r3, #28]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	431a      	orrs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	019b      	lsls	r3, r3, #6
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005890:	085b      	lsrs	r3, r3, #1
 8005892:	3b01      	subs	r3, #1
 8005894:	041b      	lsls	r3, r3, #16
 8005896:	431a      	orrs	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	061b      	lsls	r3, r3, #24
 800589e:	491b      	ldr	r1, [pc, #108]	; (800590c <HAL_RCC_OscConfig+0x470>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058a4:	4b1b      	ldr	r3, [pc, #108]	; (8005914 <HAL_RCC_OscConfig+0x478>)
 80058a6:	2201      	movs	r2, #1
 80058a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058aa:	f7fd fa47 	bl	8002d3c <HAL_GetTick>
 80058ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058b0:	e008      	b.n	80058c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058b2:	f7fd fa43 	bl	8002d3c <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e05c      	b.n	800597e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058c4:	4b11      	ldr	r3, [pc, #68]	; (800590c <HAL_RCC_OscConfig+0x470>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d0f0      	beq.n	80058b2 <HAL_RCC_OscConfig+0x416>
 80058d0:	e054      	b.n	800597c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058d2:	4b10      	ldr	r3, [pc, #64]	; (8005914 <HAL_RCC_OscConfig+0x478>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058d8:	f7fd fa30 	bl	8002d3c <HAL_GetTick>
 80058dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058de:	e008      	b.n	80058f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058e0:	f7fd fa2c 	bl	8002d3c <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e045      	b.n	800597e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058f2:	4b06      	ldr	r3, [pc, #24]	; (800590c <HAL_RCC_OscConfig+0x470>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1f0      	bne.n	80058e0 <HAL_RCC_OscConfig+0x444>
 80058fe:	e03d      	b.n	800597c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d107      	bne.n	8005918 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e038      	b.n	800597e <HAL_RCC_OscConfig+0x4e2>
 800590c:	40023800 	.word	0x40023800
 8005910:	40007000 	.word	0x40007000
 8005914:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005918:	4b1b      	ldr	r3, [pc, #108]	; (8005988 <HAL_RCC_OscConfig+0x4ec>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d028      	beq.n	8005978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005930:	429a      	cmp	r2, r3
 8005932:	d121      	bne.n	8005978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800593e:	429a      	cmp	r2, r3
 8005940:	d11a      	bne.n	8005978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005948:	4013      	ands	r3, r2
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800594e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005950:	4293      	cmp	r3, r2
 8005952:	d111      	bne.n	8005978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595e:	085b      	lsrs	r3, r3, #1
 8005960:	3b01      	subs	r3, #1
 8005962:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005964:	429a      	cmp	r2, r3
 8005966:	d107      	bne.n	8005978 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005972:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005974:	429a      	cmp	r2, r3
 8005976:	d001      	beq.n	800597c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e000      	b.n	800597e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	40023800 	.word	0x40023800

0800598c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e0cc      	b.n	8005b3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059a0:	4b68      	ldr	r3, [pc, #416]	; (8005b44 <HAL_RCC_ClockConfig+0x1b8>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0307 	and.w	r3, r3, #7
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d90c      	bls.n	80059c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ae:	4b65      	ldr	r3, [pc, #404]	; (8005b44 <HAL_RCC_ClockConfig+0x1b8>)
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b6:	4b63      	ldr	r3, [pc, #396]	; (8005b44 <HAL_RCC_ClockConfig+0x1b8>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d001      	beq.n	80059c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e0b8      	b.n	8005b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d020      	beq.n	8005a16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d005      	beq.n	80059ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059e0:	4b59      	ldr	r3, [pc, #356]	; (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	4a58      	ldr	r2, [pc, #352]	; (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 80059e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d005      	beq.n	8005a04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059f8:	4b53      	ldr	r3, [pc, #332]	; (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	4a52      	ldr	r2, [pc, #328]	; (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 80059fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a04:	4b50      	ldr	r3, [pc, #320]	; (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	494d      	ldr	r1, [pc, #308]	; (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d044      	beq.n	8005aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d107      	bne.n	8005a3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a2a:	4b47      	ldr	r3, [pc, #284]	; (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d119      	bne.n	8005a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e07f      	b.n	8005b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d003      	beq.n	8005a4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	d107      	bne.n	8005a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a4a:	4b3f      	ldr	r3, [pc, #252]	; (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d109      	bne.n	8005a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e06f      	b.n	8005b3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a5a:	4b3b      	ldr	r3, [pc, #236]	; (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e067      	b.n	8005b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a6a:	4b37      	ldr	r3, [pc, #220]	; (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f023 0203 	bic.w	r2, r3, #3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	4934      	ldr	r1, [pc, #208]	; (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a7c:	f7fd f95e 	bl	8002d3c <HAL_GetTick>
 8005a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a82:	e00a      	b.n	8005a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a84:	f7fd f95a 	bl	8002d3c <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e04f      	b.n	8005b3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a9a:	4b2b      	ldr	r3, [pc, #172]	; (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 020c 	and.w	r2, r3, #12
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d1eb      	bne.n	8005a84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005aac:	4b25      	ldr	r3, [pc, #148]	; (8005b44 <HAL_RCC_ClockConfig+0x1b8>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0307 	and.w	r3, r3, #7
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d20c      	bcs.n	8005ad4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aba:	4b22      	ldr	r3, [pc, #136]	; (8005b44 <HAL_RCC_ClockConfig+0x1b8>)
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ac2:	4b20      	ldr	r3, [pc, #128]	; (8005b44 <HAL_RCC_ClockConfig+0x1b8>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0307 	and.w	r3, r3, #7
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d001      	beq.n	8005ad4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e032      	b.n	8005b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d008      	beq.n	8005af2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ae0:	4b19      	ldr	r3, [pc, #100]	; (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	4916      	ldr	r1, [pc, #88]	; (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0308 	and.w	r3, r3, #8
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d009      	beq.n	8005b12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005afe:	4b12      	ldr	r3, [pc, #72]	; (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	490e      	ldr	r1, [pc, #56]	; (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b12:	f000 f821 	bl	8005b58 <HAL_RCC_GetSysClockFreq>
 8005b16:	4602      	mov	r2, r0
 8005b18:	4b0b      	ldr	r3, [pc, #44]	; (8005b48 <HAL_RCC_ClockConfig+0x1bc>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	091b      	lsrs	r3, r3, #4
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	490a      	ldr	r1, [pc, #40]	; (8005b4c <HAL_RCC_ClockConfig+0x1c0>)
 8005b24:	5ccb      	ldrb	r3, [r1, r3]
 8005b26:	fa22 f303 	lsr.w	r3, r2, r3
 8005b2a:	4a09      	ldr	r2, [pc, #36]	; (8005b50 <HAL_RCC_ClockConfig+0x1c4>)
 8005b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b2e:	4b09      	ldr	r3, [pc, #36]	; (8005b54 <HAL_RCC_ClockConfig+0x1c8>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fd f8be 	bl	8002cb4 <HAL_InitTick>

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	40023c00 	.word	0x40023c00
 8005b48:	40023800 	.word	0x40023800
 8005b4c:	08011f7c 	.word	0x08011f7c
 8005b50:	2000000c 	.word	0x2000000c
 8005b54:	20000010 	.word	0x20000010

08005b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b5c:	b090      	sub	sp, #64	; 0x40
 8005b5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	637b      	str	r3, [r7, #52]	; 0x34
 8005b64:	2300      	movs	r3, #0
 8005b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b68:	2300      	movs	r3, #0
 8005b6a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b70:	4b59      	ldr	r3, [pc, #356]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f003 030c 	and.w	r3, r3, #12
 8005b78:	2b08      	cmp	r3, #8
 8005b7a:	d00d      	beq.n	8005b98 <HAL_RCC_GetSysClockFreq+0x40>
 8005b7c:	2b08      	cmp	r3, #8
 8005b7e:	f200 80a1 	bhi.w	8005cc4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d002      	beq.n	8005b8c <HAL_RCC_GetSysClockFreq+0x34>
 8005b86:	2b04      	cmp	r3, #4
 8005b88:	d003      	beq.n	8005b92 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b8a:	e09b      	b.n	8005cc4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b8c:	4b53      	ldr	r3, [pc, #332]	; (8005cdc <HAL_RCC_GetSysClockFreq+0x184>)
 8005b8e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005b90:	e09b      	b.n	8005cca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b92:	4b53      	ldr	r3, [pc, #332]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005b96:	e098      	b.n	8005cca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b98:	4b4f      	ldr	r3, [pc, #316]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ba0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ba2:	4b4d      	ldr	r3, [pc, #308]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d028      	beq.n	8005c00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bae:	4b4a      	ldr	r3, [pc, #296]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	099b      	lsrs	r3, r3, #6
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	623b      	str	r3, [r7, #32]
 8005bb8:	627a      	str	r2, [r7, #36]	; 0x24
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	4b47      	ldr	r3, [pc, #284]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005bc4:	fb03 f201 	mul.w	r2, r3, r1
 8005bc8:	2300      	movs	r3, #0
 8005bca:	fb00 f303 	mul.w	r3, r0, r3
 8005bce:	4413      	add	r3, r2
 8005bd0:	4a43      	ldr	r2, [pc, #268]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005bd2:	fba0 1202 	umull	r1, r2, r0, r2
 8005bd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bd8:	460a      	mov	r2, r1
 8005bda:	62ba      	str	r2, [r7, #40]	; 0x28
 8005bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bde:	4413      	add	r3, r2
 8005be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be4:	2200      	movs	r2, #0
 8005be6:	61bb      	str	r3, [r7, #24]
 8005be8:	61fa      	str	r2, [r7, #28]
 8005bea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005bf2:	f7fb f851 	bl	8000c98 <__aeabi_uldivmod>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bfe:	e053      	b.n	8005ca8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c00:	4b35      	ldr	r3, [pc, #212]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	099b      	lsrs	r3, r3, #6
 8005c06:	2200      	movs	r2, #0
 8005c08:	613b      	str	r3, [r7, #16]
 8005c0a:	617a      	str	r2, [r7, #20]
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005c12:	f04f 0b00 	mov.w	fp, #0
 8005c16:	4652      	mov	r2, sl
 8005c18:	465b      	mov	r3, fp
 8005c1a:	f04f 0000 	mov.w	r0, #0
 8005c1e:	f04f 0100 	mov.w	r1, #0
 8005c22:	0159      	lsls	r1, r3, #5
 8005c24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c28:	0150      	lsls	r0, r2, #5
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	ebb2 080a 	subs.w	r8, r2, sl
 8005c32:	eb63 090b 	sbc.w	r9, r3, fp
 8005c36:	f04f 0200 	mov.w	r2, #0
 8005c3a:	f04f 0300 	mov.w	r3, #0
 8005c3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005c42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005c46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005c4a:	ebb2 0408 	subs.w	r4, r2, r8
 8005c4e:	eb63 0509 	sbc.w	r5, r3, r9
 8005c52:	f04f 0200 	mov.w	r2, #0
 8005c56:	f04f 0300 	mov.w	r3, #0
 8005c5a:	00eb      	lsls	r3, r5, #3
 8005c5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c60:	00e2      	lsls	r2, r4, #3
 8005c62:	4614      	mov	r4, r2
 8005c64:	461d      	mov	r5, r3
 8005c66:	eb14 030a 	adds.w	r3, r4, sl
 8005c6a:	603b      	str	r3, [r7, #0]
 8005c6c:	eb45 030b 	adc.w	r3, r5, fp
 8005c70:	607b      	str	r3, [r7, #4]
 8005c72:	f04f 0200 	mov.w	r2, #0
 8005c76:	f04f 0300 	mov.w	r3, #0
 8005c7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c7e:	4629      	mov	r1, r5
 8005c80:	028b      	lsls	r3, r1, #10
 8005c82:	4621      	mov	r1, r4
 8005c84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c88:	4621      	mov	r1, r4
 8005c8a:	028a      	lsls	r2, r1, #10
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	4619      	mov	r1, r3
 8005c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c92:	2200      	movs	r2, #0
 8005c94:	60bb      	str	r3, [r7, #8]
 8005c96:	60fa      	str	r2, [r7, #12]
 8005c98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c9c:	f7fa fffc 	bl	8000c98 <__aeabi_uldivmod>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ca8:	4b0b      	ldr	r3, [pc, #44]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	0c1b      	lsrs	r3, r3, #16
 8005cae:	f003 0303 	and.w	r3, r3, #3
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005cb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005cc2:	e002      	b.n	8005cca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005cc4:	4b05      	ldr	r3, [pc, #20]	; (8005cdc <HAL_RCC_GetSysClockFreq+0x184>)
 8005cc6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3740      	adds	r7, #64	; 0x40
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cd6:	bf00      	nop
 8005cd8:	40023800 	.word	0x40023800
 8005cdc:	00f42400 	.word	0x00f42400
 8005ce0:	017d7840 	.word	0x017d7840

08005ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ce8:	4b03      	ldr	r3, [pc, #12]	; (8005cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cea:	681b      	ldr	r3, [r3, #0]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	2000000c 	.word	0x2000000c

08005cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d00:	f7ff fff0 	bl	8005ce4 <HAL_RCC_GetHCLKFreq>
 8005d04:	4602      	mov	r2, r0
 8005d06:	4b05      	ldr	r3, [pc, #20]	; (8005d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	0a9b      	lsrs	r3, r3, #10
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	4903      	ldr	r1, [pc, #12]	; (8005d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d12:	5ccb      	ldrb	r3, [r1, r3]
 8005d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	40023800 	.word	0x40023800
 8005d20:	08011f8c 	.word	0x08011f8c

08005d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d28:	f7ff ffdc 	bl	8005ce4 <HAL_RCC_GetHCLKFreq>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	0b5b      	lsrs	r3, r3, #13
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	4903      	ldr	r1, [pc, #12]	; (8005d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d3a:	5ccb      	ldrb	r3, [r1, r3]
 8005d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	40023800 	.word	0x40023800
 8005d48:	08011f8c 	.word	0x08011f8c

08005d4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d101      	bne.n	8005d5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e041      	b.n	8005de2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d106      	bne.n	8005d78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7fc fce8 	bl	8002748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	3304      	adds	r3, #4
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	f000 fe96 	bl	8006abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
	...

08005dec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d001      	beq.n	8005e04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e03c      	b.n	8005e7e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a1e      	ldr	r2, [pc, #120]	; (8005e8c <HAL_TIM_Base_Start+0xa0>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d018      	beq.n	8005e48 <HAL_TIM_Base_Start+0x5c>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e1e:	d013      	beq.n	8005e48 <HAL_TIM_Base_Start+0x5c>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a1a      	ldr	r2, [pc, #104]	; (8005e90 <HAL_TIM_Base_Start+0xa4>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d00e      	beq.n	8005e48 <HAL_TIM_Base_Start+0x5c>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a19      	ldr	r2, [pc, #100]	; (8005e94 <HAL_TIM_Base_Start+0xa8>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d009      	beq.n	8005e48 <HAL_TIM_Base_Start+0x5c>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a17      	ldr	r2, [pc, #92]	; (8005e98 <HAL_TIM_Base_Start+0xac>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d004      	beq.n	8005e48 <HAL_TIM_Base_Start+0x5c>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a16      	ldr	r2, [pc, #88]	; (8005e9c <HAL_TIM_Base_Start+0xb0>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d111      	bne.n	8005e6c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2b06      	cmp	r3, #6
 8005e58:	d010      	beq.n	8005e7c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f042 0201 	orr.w	r2, r2, #1
 8005e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e6a:	e007      	b.n	8005e7c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0201 	orr.w	r2, r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	40010000 	.word	0x40010000
 8005e90:	40000400 	.word	0x40000400
 8005e94:	40000800 	.word	0x40000800
 8005e98:	40000c00 	.word	0x40000c00
 8005e9c:	40014000 	.word	0x40014000

08005ea0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e041      	b.n	8005f36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d106      	bne.n	8005ecc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7fc fca4 	bl	8002814 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3304      	adds	r3, #4
 8005edc:	4619      	mov	r1, r3
 8005ede:	4610      	mov	r0, r2
 8005ee0:	f000 fdec 	bl	8006abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d109      	bne.n	8005f64 <HAL_TIM_PWM_Start+0x24>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	bf14      	ite	ne
 8005f5c:	2301      	movne	r3, #1
 8005f5e:	2300      	moveq	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	e022      	b.n	8005faa <HAL_TIM_PWM_Start+0x6a>
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d109      	bne.n	8005f7e <HAL_TIM_PWM_Start+0x3e>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	bf14      	ite	ne
 8005f76:	2301      	movne	r3, #1
 8005f78:	2300      	moveq	r3, #0
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	e015      	b.n	8005faa <HAL_TIM_PWM_Start+0x6a>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d109      	bne.n	8005f98 <HAL_TIM_PWM_Start+0x58>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	bf14      	ite	ne
 8005f90:	2301      	movne	r3, #1
 8005f92:	2300      	moveq	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	e008      	b.n	8005faa <HAL_TIM_PWM_Start+0x6a>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	bf14      	ite	ne
 8005fa4:	2301      	movne	r3, #1
 8005fa6:	2300      	moveq	r3, #0
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e068      	b.n	8006084 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d104      	bne.n	8005fc2 <HAL_TIM_PWM_Start+0x82>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fc0:	e013      	b.n	8005fea <HAL_TIM_PWM_Start+0xaa>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	d104      	bne.n	8005fd2 <HAL_TIM_PWM_Start+0x92>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fd0:	e00b      	b.n	8005fea <HAL_TIM_PWM_Start+0xaa>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d104      	bne.n	8005fe2 <HAL_TIM_PWM_Start+0xa2>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fe0:	e003      	b.n	8005fea <HAL_TIM_PWM_Start+0xaa>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	6839      	ldr	r1, [r7, #0]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f001 f926 	bl	8007244 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a23      	ldr	r2, [pc, #140]	; (800608c <HAL_TIM_PWM_Start+0x14c>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d107      	bne.n	8006012 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006010:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a1d      	ldr	r2, [pc, #116]	; (800608c <HAL_TIM_PWM_Start+0x14c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d018      	beq.n	800604e <HAL_TIM_PWM_Start+0x10e>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006024:	d013      	beq.n	800604e <HAL_TIM_PWM_Start+0x10e>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a19      	ldr	r2, [pc, #100]	; (8006090 <HAL_TIM_PWM_Start+0x150>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d00e      	beq.n	800604e <HAL_TIM_PWM_Start+0x10e>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a17      	ldr	r2, [pc, #92]	; (8006094 <HAL_TIM_PWM_Start+0x154>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d009      	beq.n	800604e <HAL_TIM_PWM_Start+0x10e>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a16      	ldr	r2, [pc, #88]	; (8006098 <HAL_TIM_PWM_Start+0x158>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d004      	beq.n	800604e <HAL_TIM_PWM_Start+0x10e>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a14      	ldr	r2, [pc, #80]	; (800609c <HAL_TIM_PWM_Start+0x15c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d111      	bne.n	8006072 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b06      	cmp	r3, #6
 800605e:	d010      	beq.n	8006082 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0201 	orr.w	r2, r2, #1
 800606e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006070:	e007      	b.n	8006082 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f042 0201 	orr.w	r2, r2, #1
 8006080:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	40010000 	.word	0x40010000
 8006090:	40000400 	.word	0x40000400
 8006094:	40000800 	.word	0x40000800
 8006098:	40000c00 	.word	0x40000c00
 800609c:	40014000 	.word	0x40014000

080060a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e041      	b.n	8006136 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d106      	bne.n	80060cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f839 	bl	800613e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3304      	adds	r3, #4
 80060dc:	4619      	mov	r1, r3
 80060de:	4610      	mov	r0, r2
 80060e0:	f000 fcec 	bl	8006abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800613e:	b480      	push	{r7}
 8006140:	b083      	sub	sp, #12
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006146:	bf00      	nop
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
	...

08006154 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d104      	bne.n	8006172 <HAL_TIM_IC_Start_IT+0x1e>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800616e:	b2db      	uxtb	r3, r3
 8006170:	e013      	b.n	800619a <HAL_TIM_IC_Start_IT+0x46>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b04      	cmp	r3, #4
 8006176:	d104      	bne.n	8006182 <HAL_TIM_IC_Start_IT+0x2e>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800617e:	b2db      	uxtb	r3, r3
 8006180:	e00b      	b.n	800619a <HAL_TIM_IC_Start_IT+0x46>
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b08      	cmp	r3, #8
 8006186:	d104      	bne.n	8006192 <HAL_TIM_IC_Start_IT+0x3e>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800618e:	b2db      	uxtb	r3, r3
 8006190:	e003      	b.n	800619a <HAL_TIM_IC_Start_IT+0x46>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006198:	b2db      	uxtb	r3, r3
 800619a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d104      	bne.n	80061ac <HAL_TIM_IC_Start_IT+0x58>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	e013      	b.n	80061d4 <HAL_TIM_IC_Start_IT+0x80>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	2b04      	cmp	r3, #4
 80061b0:	d104      	bne.n	80061bc <HAL_TIM_IC_Start_IT+0x68>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	e00b      	b.n	80061d4 <HAL_TIM_IC_Start_IT+0x80>
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2b08      	cmp	r3, #8
 80061c0:	d104      	bne.n	80061cc <HAL_TIM_IC_Start_IT+0x78>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	e003      	b.n	80061d4 <HAL_TIM_IC_Start_IT+0x80>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80061d6:	7bbb      	ldrb	r3, [r7, #14]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d102      	bne.n	80061e2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80061dc:	7b7b      	ldrb	r3, [r7, #13]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d001      	beq.n	80061e6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e0c2      	b.n	800636c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d104      	bne.n	80061f6 <HAL_TIM_IC_Start_IT+0xa2>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061f4:	e013      	b.n	800621e <HAL_TIM_IC_Start_IT+0xca>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d104      	bne.n	8006206 <HAL_TIM_IC_Start_IT+0xb2>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006204:	e00b      	b.n	800621e <HAL_TIM_IC_Start_IT+0xca>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b08      	cmp	r3, #8
 800620a:	d104      	bne.n	8006216 <HAL_TIM_IC_Start_IT+0xc2>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006214:	e003      	b.n	800621e <HAL_TIM_IC_Start_IT+0xca>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2202      	movs	r2, #2
 800621a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d104      	bne.n	800622e <HAL_TIM_IC_Start_IT+0xda>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800622c:	e013      	b.n	8006256 <HAL_TIM_IC_Start_IT+0x102>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b04      	cmp	r3, #4
 8006232:	d104      	bne.n	800623e <HAL_TIM_IC_Start_IT+0xea>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800623c:	e00b      	b.n	8006256 <HAL_TIM_IC_Start_IT+0x102>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b08      	cmp	r3, #8
 8006242:	d104      	bne.n	800624e <HAL_TIM_IC_Start_IT+0xfa>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800624c:	e003      	b.n	8006256 <HAL_TIM_IC_Start_IT+0x102>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2202      	movs	r2, #2
 8006252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b0c      	cmp	r3, #12
 800625a:	d841      	bhi.n	80062e0 <HAL_TIM_IC_Start_IT+0x18c>
 800625c:	a201      	add	r2, pc, #4	; (adr r2, 8006264 <HAL_TIM_IC_Start_IT+0x110>)
 800625e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006262:	bf00      	nop
 8006264:	08006299 	.word	0x08006299
 8006268:	080062e1 	.word	0x080062e1
 800626c:	080062e1 	.word	0x080062e1
 8006270:	080062e1 	.word	0x080062e1
 8006274:	080062ab 	.word	0x080062ab
 8006278:	080062e1 	.word	0x080062e1
 800627c:	080062e1 	.word	0x080062e1
 8006280:	080062e1 	.word	0x080062e1
 8006284:	080062bd 	.word	0x080062bd
 8006288:	080062e1 	.word	0x080062e1
 800628c:	080062e1 	.word	0x080062e1
 8006290:	080062e1 	.word	0x080062e1
 8006294:	080062cf 	.word	0x080062cf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68da      	ldr	r2, [r3, #12]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f042 0202 	orr.w	r2, r2, #2
 80062a6:	60da      	str	r2, [r3, #12]
      break;
 80062a8:	e01d      	b.n	80062e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68da      	ldr	r2, [r3, #12]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f042 0204 	orr.w	r2, r2, #4
 80062b8:	60da      	str	r2, [r3, #12]
      break;
 80062ba:	e014      	b.n	80062e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f042 0208 	orr.w	r2, r2, #8
 80062ca:	60da      	str	r2, [r3, #12]
      break;
 80062cc:	e00b      	b.n	80062e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68da      	ldr	r2, [r3, #12]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f042 0210 	orr.w	r2, r2, #16
 80062dc:	60da      	str	r2, [r3, #12]
      break;
 80062de:	e002      	b.n	80062e6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	73fb      	strb	r3, [r7, #15]
      break;
 80062e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d13e      	bne.n	800636a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2201      	movs	r2, #1
 80062f2:	6839      	ldr	r1, [r7, #0]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f000 ffa5 	bl	8007244 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a1d      	ldr	r2, [pc, #116]	; (8006374 <HAL_TIM_IC_Start_IT+0x220>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d018      	beq.n	8006336 <HAL_TIM_IC_Start_IT+0x1e2>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800630c:	d013      	beq.n	8006336 <HAL_TIM_IC_Start_IT+0x1e2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a19      	ldr	r2, [pc, #100]	; (8006378 <HAL_TIM_IC_Start_IT+0x224>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d00e      	beq.n	8006336 <HAL_TIM_IC_Start_IT+0x1e2>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a17      	ldr	r2, [pc, #92]	; (800637c <HAL_TIM_IC_Start_IT+0x228>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d009      	beq.n	8006336 <HAL_TIM_IC_Start_IT+0x1e2>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a16      	ldr	r2, [pc, #88]	; (8006380 <HAL_TIM_IC_Start_IT+0x22c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d004      	beq.n	8006336 <HAL_TIM_IC_Start_IT+0x1e2>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a14      	ldr	r2, [pc, #80]	; (8006384 <HAL_TIM_IC_Start_IT+0x230>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d111      	bne.n	800635a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f003 0307 	and.w	r3, r3, #7
 8006340:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	2b06      	cmp	r3, #6
 8006346:	d010      	beq.n	800636a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 0201 	orr.w	r2, r2, #1
 8006356:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006358:	e007      	b.n	800636a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f042 0201 	orr.w	r2, r2, #1
 8006368:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800636a:	7bfb      	ldrb	r3, [r7, #15]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	40010000 	.word	0x40010000
 8006378:	40000400 	.word	0x40000400
 800637c:	40000800 	.word	0x40000800
 8006380:	40000c00 	.word	0x40000c00
 8006384:	40014000 	.word	0x40014000

08006388 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b02      	cmp	r3, #2
 800639c:	d122      	bne.n	80063e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	f003 0302 	and.w	r3, r3, #2
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d11b      	bne.n	80063e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f06f 0202 	mvn.w	r2, #2
 80063b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	f003 0303 	and.w	r3, r3, #3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7fc f88c 	bl	80024e8 <HAL_TIM_IC_CaptureCallback>
 80063d0:	e005      	b.n	80063de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fb54 	bl	8006a80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fb5b 	bl	8006a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f003 0304 	and.w	r3, r3, #4
 80063ee:	2b04      	cmp	r3, #4
 80063f0:	d122      	bne.n	8006438 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f003 0304 	and.w	r3, r3, #4
 80063fc:	2b04      	cmp	r3, #4
 80063fe:	d11b      	bne.n	8006438 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f06f 0204 	mvn.w	r2, #4
 8006408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2202      	movs	r2, #2
 800640e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7fc f862 	bl	80024e8 <HAL_TIM_IC_CaptureCallback>
 8006424:	e005      	b.n	8006432 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fb2a 	bl	8006a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fb31 	bl	8006a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f003 0308 	and.w	r3, r3, #8
 8006442:	2b08      	cmp	r3, #8
 8006444:	d122      	bne.n	800648c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f003 0308 	and.w	r3, r3, #8
 8006450:	2b08      	cmp	r3, #8
 8006452:	d11b      	bne.n	800648c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f06f 0208 	mvn.w	r2, #8
 800645c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2204      	movs	r2, #4
 8006462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	f003 0303 	and.w	r3, r3, #3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7fc f838 	bl	80024e8 <HAL_TIM_IC_CaptureCallback>
 8006478:	e005      	b.n	8006486 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fb00 	bl	8006a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fb07 	bl	8006a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f003 0310 	and.w	r3, r3, #16
 8006496:	2b10      	cmp	r3, #16
 8006498:	d122      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f003 0310 	and.w	r3, r3, #16
 80064a4:	2b10      	cmp	r3, #16
 80064a6:	d11b      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f06f 0210 	mvn.w	r2, #16
 80064b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2208      	movs	r2, #8
 80064b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7fc f80e 	bl	80024e8 <HAL_TIM_IC_CaptureCallback>
 80064cc:	e005      	b.n	80064da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fad6 	bl	8006a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fadd 	bl	8006a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d10e      	bne.n	800650c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d107      	bne.n	800650c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f06f 0201 	mvn.w	r2, #1
 8006504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fab0 	bl	8006a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006516:	2b80      	cmp	r3, #128	; 0x80
 8006518:	d10e      	bne.n	8006538 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006524:	2b80      	cmp	r3, #128	; 0x80
 8006526:	d107      	bne.n	8006538 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 ff24 	bl	8007380 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006542:	2b40      	cmp	r3, #64	; 0x40
 8006544:	d10e      	bne.n	8006564 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006550:	2b40      	cmp	r3, #64	; 0x40
 8006552:	d107      	bne.n	8006564 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800655c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 faa2 	bl	8006aa8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f003 0320 	and.w	r3, r3, #32
 800656e:	2b20      	cmp	r3, #32
 8006570:	d10e      	bne.n	8006590 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f003 0320 	and.w	r3, r3, #32
 800657c:	2b20      	cmp	r3, #32
 800657e:	d107      	bne.n	8006590 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f06f 0220 	mvn.w	r2, #32
 8006588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 feee 	bl	800736c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006590:	bf00      	nop
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d101      	bne.n	80065b6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80065b2:	2302      	movs	r3, #2
 80065b4:	e088      	b.n	80066c8 <HAL_TIM_IC_ConfigChannel+0x130>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d11b      	bne.n	80065fc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6818      	ldr	r0, [r3, #0]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	6819      	ldr	r1, [r3, #0]
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f000 fc7e 	bl	8006ed4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	699a      	ldr	r2, [r3, #24]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 020c 	bic.w	r2, r2, #12
 80065e6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6999      	ldr	r1, [r3, #24]
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	689a      	ldr	r2, [r3, #8]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	619a      	str	r2, [r3, #24]
 80065fa:	e060      	b.n	80066be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d11c      	bne.n	800663c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6818      	ldr	r0, [r3, #0]
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	6819      	ldr	r1, [r3, #0]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f000 fcf6 	bl	8007002 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	699a      	ldr	r2, [r3, #24]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006624:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	6999      	ldr	r1, [r3, #24]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	021a      	lsls	r2, r3, #8
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	619a      	str	r2, [r3, #24]
 800663a:	e040      	b.n	80066be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b08      	cmp	r3, #8
 8006640:	d11b      	bne.n	800667a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6818      	ldr	r0, [r3, #0]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	6819      	ldr	r1, [r3, #0]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f000 fd43 	bl	80070dc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	69da      	ldr	r2, [r3, #28]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f022 020c 	bic.w	r2, r2, #12
 8006664:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69d9      	ldr	r1, [r3, #28]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	61da      	str	r2, [r3, #28]
 8006678:	e021      	b.n	80066be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2b0c      	cmp	r3, #12
 800667e:	d11c      	bne.n	80066ba <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6818      	ldr	r0, [r3, #0]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	6819      	ldr	r1, [r3, #0]
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f000 fd60 	bl	8007154 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	69da      	ldr	r2, [r3, #28]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80066a2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	69d9      	ldr	r1, [r3, #28]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	021a      	lsls	r2, r3, #8
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	61da      	str	r2, [r3, #28]
 80066b8:	e001      	b.n	80066be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066dc:	2300      	movs	r3, #0
 80066de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d101      	bne.n	80066ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066ea:	2302      	movs	r3, #2
 80066ec:	e0ae      	b.n	800684c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b0c      	cmp	r3, #12
 80066fa:	f200 809f 	bhi.w	800683c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80066fe:	a201      	add	r2, pc, #4	; (adr r2, 8006704 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006704:	08006739 	.word	0x08006739
 8006708:	0800683d 	.word	0x0800683d
 800670c:	0800683d 	.word	0x0800683d
 8006710:	0800683d 	.word	0x0800683d
 8006714:	08006779 	.word	0x08006779
 8006718:	0800683d 	.word	0x0800683d
 800671c:	0800683d 	.word	0x0800683d
 8006720:	0800683d 	.word	0x0800683d
 8006724:	080067bb 	.word	0x080067bb
 8006728:	0800683d 	.word	0x0800683d
 800672c:	0800683d 	.word	0x0800683d
 8006730:	0800683d 	.word	0x0800683d
 8006734:	080067fb 	.word	0x080067fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68b9      	ldr	r1, [r7, #8]
 800673e:	4618      	mov	r0, r3
 8006740:	f000 fa3c 	bl	8006bbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	699a      	ldr	r2, [r3, #24]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f042 0208 	orr.w	r2, r2, #8
 8006752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	699a      	ldr	r2, [r3, #24]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0204 	bic.w	r2, r2, #4
 8006762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6999      	ldr	r1, [r3, #24]
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	691a      	ldr	r2, [r3, #16]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	619a      	str	r2, [r3, #24]
      break;
 8006776:	e064      	b.n	8006842 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68b9      	ldr	r1, [r7, #8]
 800677e:	4618      	mov	r0, r3
 8006780:	f000 fa82 	bl	8006c88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699a      	ldr	r2, [r3, #24]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	699a      	ldr	r2, [r3, #24]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6999      	ldr	r1, [r3, #24]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	021a      	lsls	r2, r3, #8
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	430a      	orrs	r2, r1
 80067b6:	619a      	str	r2, [r3, #24]
      break;
 80067b8:	e043      	b.n	8006842 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68b9      	ldr	r1, [r7, #8]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 facd 	bl	8006d60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	69da      	ldr	r2, [r3, #28]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f042 0208 	orr.w	r2, r2, #8
 80067d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69da      	ldr	r2, [r3, #28]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0204 	bic.w	r2, r2, #4
 80067e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	69d9      	ldr	r1, [r3, #28]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	691a      	ldr	r2, [r3, #16]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	61da      	str	r2, [r3, #28]
      break;
 80067f8:	e023      	b.n	8006842 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68b9      	ldr	r1, [r7, #8]
 8006800:	4618      	mov	r0, r3
 8006802:	f000 fb17 	bl	8006e34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69da      	ldr	r2, [r3, #28]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	69da      	ldr	r2, [r3, #28]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	69d9      	ldr	r1, [r3, #28]
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	021a      	lsls	r2, r3, #8
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	61da      	str	r2, [r3, #28]
      break;
 800683a:	e002      	b.n	8006842 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	75fb      	strb	r3, [r7, #23]
      break;
 8006840:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800684a:	7dfb      	ldrb	r3, [r7, #23]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3718      	adds	r7, #24
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006868:	2b01      	cmp	r3, #1
 800686a:	d101      	bne.n	8006870 <HAL_TIM_ConfigClockSource+0x1c>
 800686c:	2302      	movs	r3, #2
 800686e:	e0b4      	b.n	80069da <HAL_TIM_ConfigClockSource+0x186>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800688e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006896:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a8:	d03e      	beq.n	8006928 <HAL_TIM_ConfigClockSource+0xd4>
 80068aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ae:	f200 8087 	bhi.w	80069c0 <HAL_TIM_ConfigClockSource+0x16c>
 80068b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b6:	f000 8086 	beq.w	80069c6 <HAL_TIM_ConfigClockSource+0x172>
 80068ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068be:	d87f      	bhi.n	80069c0 <HAL_TIM_ConfigClockSource+0x16c>
 80068c0:	2b70      	cmp	r3, #112	; 0x70
 80068c2:	d01a      	beq.n	80068fa <HAL_TIM_ConfigClockSource+0xa6>
 80068c4:	2b70      	cmp	r3, #112	; 0x70
 80068c6:	d87b      	bhi.n	80069c0 <HAL_TIM_ConfigClockSource+0x16c>
 80068c8:	2b60      	cmp	r3, #96	; 0x60
 80068ca:	d050      	beq.n	800696e <HAL_TIM_ConfigClockSource+0x11a>
 80068cc:	2b60      	cmp	r3, #96	; 0x60
 80068ce:	d877      	bhi.n	80069c0 <HAL_TIM_ConfigClockSource+0x16c>
 80068d0:	2b50      	cmp	r3, #80	; 0x50
 80068d2:	d03c      	beq.n	800694e <HAL_TIM_ConfigClockSource+0xfa>
 80068d4:	2b50      	cmp	r3, #80	; 0x50
 80068d6:	d873      	bhi.n	80069c0 <HAL_TIM_ConfigClockSource+0x16c>
 80068d8:	2b40      	cmp	r3, #64	; 0x40
 80068da:	d058      	beq.n	800698e <HAL_TIM_ConfigClockSource+0x13a>
 80068dc:	2b40      	cmp	r3, #64	; 0x40
 80068de:	d86f      	bhi.n	80069c0 <HAL_TIM_ConfigClockSource+0x16c>
 80068e0:	2b30      	cmp	r3, #48	; 0x30
 80068e2:	d064      	beq.n	80069ae <HAL_TIM_ConfigClockSource+0x15a>
 80068e4:	2b30      	cmp	r3, #48	; 0x30
 80068e6:	d86b      	bhi.n	80069c0 <HAL_TIM_ConfigClockSource+0x16c>
 80068e8:	2b20      	cmp	r3, #32
 80068ea:	d060      	beq.n	80069ae <HAL_TIM_ConfigClockSource+0x15a>
 80068ec:	2b20      	cmp	r3, #32
 80068ee:	d867      	bhi.n	80069c0 <HAL_TIM_ConfigClockSource+0x16c>
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d05c      	beq.n	80069ae <HAL_TIM_ConfigClockSource+0x15a>
 80068f4:	2b10      	cmp	r3, #16
 80068f6:	d05a      	beq.n	80069ae <HAL_TIM_ConfigClockSource+0x15a>
 80068f8:	e062      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6818      	ldr	r0, [r3, #0]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	6899      	ldr	r1, [r3, #8]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	f000 fc7b 	bl	8007204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800691c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	609a      	str	r2, [r3, #8]
      break;
 8006926:	e04f      	b.n	80069c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6818      	ldr	r0, [r3, #0]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	6899      	ldr	r1, [r3, #8]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	f000 fc64 	bl	8007204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689a      	ldr	r2, [r3, #8]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800694a:	609a      	str	r2, [r3, #8]
      break;
 800694c:	e03c      	b.n	80069c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6818      	ldr	r0, [r3, #0]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	6859      	ldr	r1, [r3, #4]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	461a      	mov	r2, r3
 800695c:	f000 fb22 	bl	8006fa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2150      	movs	r1, #80	; 0x50
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fc31 	bl	80071ce <TIM_ITRx_SetConfig>
      break;
 800696c:	e02c      	b.n	80069c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6818      	ldr	r0, [r3, #0]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	6859      	ldr	r1, [r3, #4]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	461a      	mov	r2, r3
 800697c:	f000 fb7e 	bl	800707c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2160      	movs	r1, #96	; 0x60
 8006986:	4618      	mov	r0, r3
 8006988:	f000 fc21 	bl	80071ce <TIM_ITRx_SetConfig>
      break;
 800698c:	e01c      	b.n	80069c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6818      	ldr	r0, [r3, #0]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	6859      	ldr	r1, [r3, #4]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	461a      	mov	r2, r3
 800699c:	f000 fb02 	bl	8006fa4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2140      	movs	r1, #64	; 0x40
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 fc11 	bl	80071ce <TIM_ITRx_SetConfig>
      break;
 80069ac:	e00c      	b.n	80069c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4619      	mov	r1, r3
 80069b8:	4610      	mov	r0, r2
 80069ba:	f000 fc08 	bl	80071ce <TIM_ITRx_SetConfig>
      break;
 80069be:	e003      	b.n	80069c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	73fb      	strb	r3, [r7, #15]
      break;
 80069c4:	e000      	b.n	80069c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b0c      	cmp	r3, #12
 80069f6:	d831      	bhi.n	8006a5c <HAL_TIM_ReadCapturedValue+0x78>
 80069f8:	a201      	add	r2, pc, #4	; (adr r2, 8006a00 <HAL_TIM_ReadCapturedValue+0x1c>)
 80069fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fe:	bf00      	nop
 8006a00:	08006a35 	.word	0x08006a35
 8006a04:	08006a5d 	.word	0x08006a5d
 8006a08:	08006a5d 	.word	0x08006a5d
 8006a0c:	08006a5d 	.word	0x08006a5d
 8006a10:	08006a3f 	.word	0x08006a3f
 8006a14:	08006a5d 	.word	0x08006a5d
 8006a18:	08006a5d 	.word	0x08006a5d
 8006a1c:	08006a5d 	.word	0x08006a5d
 8006a20:	08006a49 	.word	0x08006a49
 8006a24:	08006a5d 	.word	0x08006a5d
 8006a28:	08006a5d 	.word	0x08006a5d
 8006a2c:	08006a5d 	.word	0x08006a5d
 8006a30:	08006a53 	.word	0x08006a53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a3a:	60fb      	str	r3, [r7, #12]

      break;
 8006a3c:	e00f      	b.n	8006a5e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a44:	60fb      	str	r3, [r7, #12]

      break;
 8006a46:	e00a      	b.n	8006a5e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4e:	60fb      	str	r3, [r7, #12]

      break;
 8006a50:	e005      	b.n	8006a5e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a58:	60fb      	str	r3, [r7, #12]

      break;
 8006a5a:	e000      	b.n	8006a5e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006a5c:	bf00      	nop
  }

  return tmpreg;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a34      	ldr	r2, [pc, #208]	; (8006ba0 <TIM_Base_SetConfig+0xe4>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d00f      	beq.n	8006af4 <TIM_Base_SetConfig+0x38>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ada:	d00b      	beq.n	8006af4 <TIM_Base_SetConfig+0x38>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a31      	ldr	r2, [pc, #196]	; (8006ba4 <TIM_Base_SetConfig+0xe8>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d007      	beq.n	8006af4 <TIM_Base_SetConfig+0x38>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a30      	ldr	r2, [pc, #192]	; (8006ba8 <TIM_Base_SetConfig+0xec>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d003      	beq.n	8006af4 <TIM_Base_SetConfig+0x38>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a2f      	ldr	r2, [pc, #188]	; (8006bac <TIM_Base_SetConfig+0xf0>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d108      	bne.n	8006b06 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a25      	ldr	r2, [pc, #148]	; (8006ba0 <TIM_Base_SetConfig+0xe4>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d01b      	beq.n	8006b46 <TIM_Base_SetConfig+0x8a>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b14:	d017      	beq.n	8006b46 <TIM_Base_SetConfig+0x8a>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a22      	ldr	r2, [pc, #136]	; (8006ba4 <TIM_Base_SetConfig+0xe8>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d013      	beq.n	8006b46 <TIM_Base_SetConfig+0x8a>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a21      	ldr	r2, [pc, #132]	; (8006ba8 <TIM_Base_SetConfig+0xec>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d00f      	beq.n	8006b46 <TIM_Base_SetConfig+0x8a>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a20      	ldr	r2, [pc, #128]	; (8006bac <TIM_Base_SetConfig+0xf0>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d00b      	beq.n	8006b46 <TIM_Base_SetConfig+0x8a>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a1f      	ldr	r2, [pc, #124]	; (8006bb0 <TIM_Base_SetConfig+0xf4>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d007      	beq.n	8006b46 <TIM_Base_SetConfig+0x8a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a1e      	ldr	r2, [pc, #120]	; (8006bb4 <TIM_Base_SetConfig+0xf8>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d003      	beq.n	8006b46 <TIM_Base_SetConfig+0x8a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a1d      	ldr	r2, [pc, #116]	; (8006bb8 <TIM_Base_SetConfig+0xfc>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d108      	bne.n	8006b58 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a08      	ldr	r2, [pc, #32]	; (8006ba0 <TIM_Base_SetConfig+0xe4>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d103      	bne.n	8006b8c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	691a      	ldr	r2, [r3, #16]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	615a      	str	r2, [r3, #20]
}
 8006b92:	bf00      	nop
 8006b94:	3714      	adds	r7, #20
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	40010000 	.word	0x40010000
 8006ba4:	40000400 	.word	0x40000400
 8006ba8:	40000800 	.word	0x40000800
 8006bac:	40000c00 	.word	0x40000c00
 8006bb0:	40014000 	.word	0x40014000
 8006bb4:	40014400 	.word	0x40014400
 8006bb8:	40014800 	.word	0x40014800

08006bbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	f023 0201 	bic.w	r2, r3, #1
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 0303 	bic.w	r3, r3, #3
 8006bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f023 0302 	bic.w	r3, r3, #2
 8006c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a1c      	ldr	r2, [pc, #112]	; (8006c84 <TIM_OC1_SetConfig+0xc8>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d10c      	bne.n	8006c32 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f023 0308 	bic.w	r3, r3, #8
 8006c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	f023 0304 	bic.w	r3, r3, #4
 8006c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a13      	ldr	r2, [pc, #76]	; (8006c84 <TIM_OC1_SetConfig+0xc8>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d111      	bne.n	8006c5e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	685a      	ldr	r2, [r3, #4]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	621a      	str	r2, [r3, #32]
}
 8006c78:	bf00      	nop
 8006c7a:	371c      	adds	r7, #28
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	40010000 	.word	0x40010000

08006c88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	f023 0210 	bic.w	r2, r3, #16
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	021b      	lsls	r3, r3, #8
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f023 0320 	bic.w	r3, r3, #32
 8006cd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	011b      	lsls	r3, r3, #4
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a1e      	ldr	r2, [pc, #120]	; (8006d5c <TIM_OC2_SetConfig+0xd4>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d10d      	bne.n	8006d04 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	011b      	lsls	r3, r3, #4
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a15      	ldr	r2, [pc, #84]	; (8006d5c <TIM_OC2_SetConfig+0xd4>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d113      	bne.n	8006d34 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	621a      	str	r2, [r3, #32]
}
 8006d4e:	bf00      	nop
 8006d50:	371c      	adds	r7, #28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	40010000 	.word	0x40010000

08006d60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f023 0303 	bic.w	r3, r3, #3
 8006d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	021b      	lsls	r3, r3, #8
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a1d      	ldr	r2, [pc, #116]	; (8006e30 <TIM_OC3_SetConfig+0xd0>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d10d      	bne.n	8006dda <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	021b      	lsls	r3, r3, #8
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a14      	ldr	r2, [pc, #80]	; (8006e30 <TIM_OC3_SetConfig+0xd0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d113      	bne.n	8006e0a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	011b      	lsls	r3, r3, #4
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	011b      	lsls	r3, r3, #4
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	685a      	ldr	r2, [r3, #4]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	621a      	str	r2, [r3, #32]
}
 8006e24:	bf00      	nop
 8006e26:	371c      	adds	r7, #28
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr
 8006e30:	40010000 	.word	0x40010000

08006e34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b087      	sub	sp, #28
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	021b      	lsls	r3, r3, #8
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	031b      	lsls	r3, r3, #12
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a10      	ldr	r2, [pc, #64]	; (8006ed0 <TIM_OC4_SetConfig+0x9c>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d109      	bne.n	8006ea8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	019b      	lsls	r3, r3, #6
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	621a      	str	r2, [r3, #32]
}
 8006ec2:	bf00      	nop
 8006ec4:	371c      	adds	r7, #28
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	40010000 	.word	0x40010000

08006ed4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b087      	sub	sp, #28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
 8006ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	f023 0201 	bic.w	r2, r3, #1
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6a1b      	ldr	r3, [r3, #32]
 8006ef8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4a24      	ldr	r2, [pc, #144]	; (8006f90 <TIM_TI1_SetConfig+0xbc>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d013      	beq.n	8006f2a <TIM_TI1_SetConfig+0x56>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f08:	d00f      	beq.n	8006f2a <TIM_TI1_SetConfig+0x56>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	4a21      	ldr	r2, [pc, #132]	; (8006f94 <TIM_TI1_SetConfig+0xc0>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d00b      	beq.n	8006f2a <TIM_TI1_SetConfig+0x56>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	4a20      	ldr	r2, [pc, #128]	; (8006f98 <TIM_TI1_SetConfig+0xc4>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d007      	beq.n	8006f2a <TIM_TI1_SetConfig+0x56>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	4a1f      	ldr	r2, [pc, #124]	; (8006f9c <TIM_TI1_SetConfig+0xc8>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d003      	beq.n	8006f2a <TIM_TI1_SetConfig+0x56>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	4a1e      	ldr	r2, [pc, #120]	; (8006fa0 <TIM_TI1_SetConfig+0xcc>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d101      	bne.n	8006f2e <TIM_TI1_SetConfig+0x5a>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e000      	b.n	8006f30 <TIM_TI1_SetConfig+0x5c>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d008      	beq.n	8006f46 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	f023 0303 	bic.w	r3, r3, #3
 8006f3a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]
 8006f44:	e003      	b.n	8006f4e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f043 0301 	orr.w	r3, r3, #1
 8006f4c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	011b      	lsls	r3, r3, #4
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	f023 030a 	bic.w	r3, r3, #10
 8006f68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f003 030a 	and.w	r3, r3, #10
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	621a      	str	r2, [r3, #32]
}
 8006f82:	bf00      	nop
 8006f84:	371c      	adds	r7, #28
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	40010000 	.word	0x40010000
 8006f94:	40000400 	.word	0x40000400
 8006f98:	40000800 	.word	0x40000800
 8006f9c:	40000c00 	.word	0x40000c00
 8006fa0:	40014000 	.word	0x40014000

08006fa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	f023 0201 	bic.w	r2, r3, #1
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	011b      	lsls	r3, r3, #4
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f023 030a 	bic.w	r3, r3, #10
 8006fe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	621a      	str	r2, [r3, #32]
}
 8006ff6:	bf00      	nop
 8006ff8:	371c      	adds	r7, #28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007002:	b480      	push	{r7}
 8007004:	b087      	sub	sp, #28
 8007006:	af00      	add	r7, sp, #0
 8007008:	60f8      	str	r0, [r7, #12]
 800700a:	60b9      	str	r1, [r7, #8]
 800700c:	607a      	str	r2, [r7, #4]
 800700e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	f023 0210 	bic.w	r2, r3, #16
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800702e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	021b      	lsls	r3, r3, #8
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	4313      	orrs	r3, r2
 8007038:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007040:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	031b      	lsls	r3, r3, #12
 8007046:	b29b      	uxth	r3, r3
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	4313      	orrs	r3, r2
 800704c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007054:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	011b      	lsls	r3, r3, #4
 800705a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	4313      	orrs	r3, r2
 8007062:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	621a      	str	r2, [r3, #32]
}
 8007070:	bf00      	nop
 8007072:	371c      	adds	r7, #28
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	f023 0210 	bic.w	r2, r3, #16
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	031b      	lsls	r3, r3, #12
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	011b      	lsls	r3, r3, #4
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	621a      	str	r2, [r3, #32]
}
 80070d0:	bf00      	nop
 80070d2:	371c      	adds	r7, #28
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80070dc:	b480      	push	{r7}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
 80070e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f023 0303 	bic.w	r3, r3, #3
 8007108:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4313      	orrs	r3, r2
 8007110:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007118:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	011b      	lsls	r3, r3, #4
 800711e:	b2db      	uxtb	r3, r3
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	4313      	orrs	r3, r2
 8007124:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800712c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	021b      	lsls	r3, r3, #8
 8007132:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	4313      	orrs	r3, r2
 800713a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	621a      	str	r2, [r3, #32]
}
 8007148:	bf00      	nop
 800714a:	371c      	adds	r7, #28
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007154:	b480      	push	{r7}
 8007156:	b087      	sub	sp, #28
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
 8007160:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6a1b      	ldr	r3, [r3, #32]
 8007178:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007180:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	021b      	lsls	r3, r3, #8
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	4313      	orrs	r3, r2
 800718a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007192:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	031b      	lsls	r3, r3, #12
 8007198:	b29b      	uxth	r3, r3
 800719a:	697a      	ldr	r2, [r7, #20]
 800719c:	4313      	orrs	r3, r2
 800719e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80071a6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	031b      	lsls	r3, r3, #12
 80071ac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	621a      	str	r2, [r3, #32]
}
 80071c2:	bf00      	nop
 80071c4:	371c      	adds	r7, #28
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b085      	sub	sp, #20
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071e6:	683a      	ldr	r2, [r7, #0]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	f043 0307 	orr.w	r3, r3, #7
 80071f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	609a      	str	r2, [r3, #8]
}
 80071f8:	bf00      	nop
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
 8007210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800721e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	021a      	lsls	r2, r3, #8
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	431a      	orrs	r2, r3
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	4313      	orrs	r3, r2
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	4313      	orrs	r3, r2
 8007230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	609a      	str	r2, [r3, #8]
}
 8007238:	bf00      	nop
 800723a:	371c      	adds	r7, #28
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f003 031f 	and.w	r3, r3, #31
 8007256:	2201      	movs	r2, #1
 8007258:	fa02 f303 	lsl.w	r3, r2, r3
 800725c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a1a      	ldr	r2, [r3, #32]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	43db      	mvns	r3, r3
 8007266:	401a      	ands	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6a1a      	ldr	r2, [r3, #32]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	f003 031f 	and.w	r3, r3, #31
 8007276:	6879      	ldr	r1, [r7, #4]
 8007278:	fa01 f303 	lsl.w	r3, r1, r3
 800727c:	431a      	orrs	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	621a      	str	r2, [r3, #32]
}
 8007282:	bf00      	nop
 8007284:	371c      	adds	r7, #28
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
	...

08007290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d101      	bne.n	80072a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072a4:	2302      	movs	r3, #2
 80072a6:	e050      	b.n	800734a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a1c      	ldr	r2, [pc, #112]	; (8007358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d018      	beq.n	800731e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f4:	d013      	beq.n	800731e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a18      	ldr	r2, [pc, #96]	; (800735c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d00e      	beq.n	800731e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a16      	ldr	r2, [pc, #88]	; (8007360 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d009      	beq.n	800731e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a15      	ldr	r2, [pc, #84]	; (8007364 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d004      	beq.n	800731e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a13      	ldr	r2, [pc, #76]	; (8007368 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d10c      	bne.n	8007338 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007324:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	4313      	orrs	r3, r2
 800732e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	40010000 	.word	0x40010000
 800735c:	40000400 	.word	0x40000400
 8007360:	40000800 	.word	0x40000800
 8007364:	40000c00 	.word	0x40000c00
 8007368:	40014000 	.word	0x40014000

0800736c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e03f      	b.n	8007426 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d106      	bne.n	80073c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7fb fac0 	bl	8002940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2224      	movs	r2, #36	; 0x24
 80073c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68da      	ldr	r2, [r3, #12]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fd7b 	bl	8007ed4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	691a      	ldr	r2, [r3, #16]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	695a      	ldr	r2, [r3, #20]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68da      	ldr	r2, [r3, #12]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800740c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2220      	movs	r2, #32
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2220      	movs	r2, #32
 8007420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3708      	adds	r7, #8
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b08a      	sub	sp, #40	; 0x28
 8007432:	af02      	add	r7, sp, #8
 8007434:	60f8      	str	r0, [r7, #12]
 8007436:	60b9      	str	r1, [r7, #8]
 8007438:	603b      	str	r3, [r7, #0]
 800743a:	4613      	mov	r3, r2
 800743c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800743e:	2300      	movs	r3, #0
 8007440:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b20      	cmp	r3, #32
 800744c:	d17c      	bne.n	8007548 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <HAL_UART_Transmit+0x2c>
 8007454:	88fb      	ldrh	r3, [r7, #6]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e075      	b.n	800754a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007464:	2b01      	cmp	r3, #1
 8007466:	d101      	bne.n	800746c <HAL_UART_Transmit+0x3e>
 8007468:	2302      	movs	r3, #2
 800746a:	e06e      	b.n	800754a <HAL_UART_Transmit+0x11c>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2221      	movs	r2, #33	; 0x21
 800747e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007482:	f7fb fc5b 	bl	8002d3c <HAL_GetTick>
 8007486:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	88fa      	ldrh	r2, [r7, #6]
 800748c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	88fa      	ldrh	r2, [r7, #6]
 8007492:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800749c:	d108      	bne.n	80074b0 <HAL_UART_Transmit+0x82>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d104      	bne.n	80074b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80074a6:	2300      	movs	r3, #0
 80074a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	61bb      	str	r3, [r7, #24]
 80074ae:	e003      	b.n	80074b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074b4:	2300      	movs	r3, #0
 80074b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80074c0:	e02a      	b.n	8007518 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2200      	movs	r2, #0
 80074ca:	2180      	movs	r1, #128	; 0x80
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 faf9 	bl	8007ac4 <UART_WaitOnFlagUntilTimeout>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d001      	beq.n	80074dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e036      	b.n	800754a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10b      	bne.n	80074fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	461a      	mov	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	3302      	adds	r3, #2
 80074f6:	61bb      	str	r3, [r7, #24]
 80074f8:	e007      	b.n	800750a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	781a      	ldrb	r2, [r3, #0]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	3301      	adds	r3, #1
 8007508:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800750e:	b29b      	uxth	r3, r3
 8007510:	3b01      	subs	r3, #1
 8007512:	b29a      	uxth	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800751c:	b29b      	uxth	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1cf      	bne.n	80074c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	2200      	movs	r2, #0
 800752a:	2140      	movs	r1, #64	; 0x40
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f000 fac9 	bl	8007ac4 <UART_WaitOnFlagUntilTimeout>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e006      	b.n	800754a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2220      	movs	r2, #32
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007544:	2300      	movs	r3, #0
 8007546:	e000      	b.n	800754a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007548:	2302      	movs	r3, #2
  }
}
 800754a:	4618      	mov	r0, r3
 800754c:	3720      	adds	r7, #32
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
	...

08007554 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b0ba      	sub	sp, #232	; 0xe8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800757a:	2300      	movs	r3, #0
 800757c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007580:	2300      	movs	r3, #0
 8007582:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800758a:	f003 030f 	and.w	r3, r3, #15
 800758e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007592:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10f      	bne.n	80075ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800759a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800759e:	f003 0320 	and.w	r3, r3, #32
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d009      	beq.n	80075ba <HAL_UART_IRQHandler+0x66>
 80075a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075aa:	f003 0320 	and.w	r3, r3, #32
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fbd3 	bl	8007d5e <UART_Receive_IT>
      return;
 80075b8:	e256      	b.n	8007a68 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80075ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f000 80de 	beq.w	8007780 <HAL_UART_IRQHandler+0x22c>
 80075c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d106      	bne.n	80075de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80075d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 80d1 	beq.w	8007780 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80075de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00b      	beq.n	8007602 <HAL_UART_IRQHandler+0xae>
 80075ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d005      	beq.n	8007602 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	f043 0201 	orr.w	r2, r3, #1
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007606:	f003 0304 	and.w	r3, r3, #4
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00b      	beq.n	8007626 <HAL_UART_IRQHandler+0xd2>
 800760e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b00      	cmp	r3, #0
 8007618:	d005      	beq.n	8007626 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	f043 0202 	orr.w	r2, r3, #2
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00b      	beq.n	800764a <HAL_UART_IRQHandler+0xf6>
 8007632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b00      	cmp	r3, #0
 800763c:	d005      	beq.n	800764a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007642:	f043 0204 	orr.w	r2, r3, #4
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800764a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800764e:	f003 0308 	and.w	r3, r3, #8
 8007652:	2b00      	cmp	r3, #0
 8007654:	d011      	beq.n	800767a <HAL_UART_IRQHandler+0x126>
 8007656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800765a:	f003 0320 	and.w	r3, r3, #32
 800765e:	2b00      	cmp	r3, #0
 8007660:	d105      	bne.n	800766e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	2b00      	cmp	r3, #0
 800766c:	d005      	beq.n	800767a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	f043 0208 	orr.w	r2, r3, #8
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 81ed 	beq.w	8007a5e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007688:	f003 0320 	and.w	r3, r3, #32
 800768c:	2b00      	cmp	r3, #0
 800768e:	d008      	beq.n	80076a2 <HAL_UART_IRQHandler+0x14e>
 8007690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007694:	f003 0320 	and.w	r3, r3, #32
 8007698:	2b00      	cmp	r3, #0
 800769a:	d002      	beq.n	80076a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fb5e 	bl	8007d5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ac:	2b40      	cmp	r3, #64	; 0x40
 80076ae:	bf0c      	ite	eq
 80076b0:	2301      	moveq	r3, #1
 80076b2:	2300      	movne	r3, #0
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076be:	f003 0308 	and.w	r3, r3, #8
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d103      	bne.n	80076ce <HAL_UART_IRQHandler+0x17a>
 80076c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d04f      	beq.n	800776e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fa66 	bl	8007ba0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076de:	2b40      	cmp	r3, #64	; 0x40
 80076e0:	d141      	bne.n	8007766 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3314      	adds	r3, #20
 80076e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076f0:	e853 3f00 	ldrex	r3, [r3]
 80076f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007700:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3314      	adds	r3, #20
 800770a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800770e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007716:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800771a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800771e:	e841 2300 	strex	r3, r2, [r1]
 8007722:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007726:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1d9      	bne.n	80076e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007732:	2b00      	cmp	r3, #0
 8007734:	d013      	beq.n	800775e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773a:	4a7d      	ldr	r2, [pc, #500]	; (8007930 <HAL_UART_IRQHandler+0x3dc>)
 800773c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007742:	4618      	mov	r0, r3
 8007744:	f7fc f89d 	bl	8003882 <HAL_DMA_Abort_IT>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d016      	beq.n	800777c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007758:	4610      	mov	r0, r2
 800775a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800775c:	e00e      	b.n	800777c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f99a 	bl	8007a98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007764:	e00a      	b.n	800777c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f996 	bl	8007a98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800776c:	e006      	b.n	800777c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f992 	bl	8007a98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800777a:	e170      	b.n	8007a5e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800777c:	bf00      	nop
    return;
 800777e:	e16e      	b.n	8007a5e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007784:	2b01      	cmp	r3, #1
 8007786:	f040 814a 	bne.w	8007a1e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800778a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800778e:	f003 0310 	and.w	r3, r3, #16
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 8143 	beq.w	8007a1e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800779c:	f003 0310 	and.w	r3, r3, #16
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 813c 	beq.w	8007a1e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077a6:	2300      	movs	r3, #0
 80077a8:	60bb      	str	r3, [r7, #8]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	60bb      	str	r3, [r7, #8]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	60bb      	str	r3, [r7, #8]
 80077ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c6:	2b40      	cmp	r3, #64	; 0x40
 80077c8:	f040 80b4 	bne.w	8007934 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f000 8140 	beq.w	8007a62 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077ea:	429a      	cmp	r2, r3
 80077ec:	f080 8139 	bcs.w	8007a62 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fc:	69db      	ldr	r3, [r3, #28]
 80077fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007802:	f000 8088 	beq.w	8007916 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	330c      	adds	r3, #12
 800780c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007810:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007814:	e853 3f00 	ldrex	r3, [r3]
 8007818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800781c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007824:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	330c      	adds	r3, #12
 800782e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007832:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007836:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800783e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007842:	e841 2300 	strex	r3, r2, [r1]
 8007846:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800784a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1d9      	bne.n	8007806 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3314      	adds	r3, #20
 8007858:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800785c:	e853 3f00 	ldrex	r3, [r3]
 8007860:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007862:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007864:	f023 0301 	bic.w	r3, r3, #1
 8007868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3314      	adds	r3, #20
 8007872:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007876:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800787a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800787e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007882:	e841 2300 	strex	r3, r2, [r1]
 8007886:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1e1      	bne.n	8007852 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3314      	adds	r3, #20
 8007894:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007898:	e853 3f00 	ldrex	r3, [r3]
 800789c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800789e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3314      	adds	r3, #20
 80078ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078ba:	e841 2300 	strex	r3, r2, [r1]
 80078be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1e3      	bne.n	800788e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2220      	movs	r2, #32
 80078ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	330c      	adds	r3, #12
 80078da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078de:	e853 3f00 	ldrex	r3, [r3]
 80078e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078e6:	f023 0310 	bic.w	r3, r3, #16
 80078ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	330c      	adds	r3, #12
 80078f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80078f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80078fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007900:	e841 2300 	strex	r3, r2, [r1]
 8007904:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1e3      	bne.n	80078d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007910:	4618      	mov	r0, r3
 8007912:	f7fb ff46 	bl	80037a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800791e:	b29b      	uxth	r3, r3
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	b29b      	uxth	r3, r3
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f8c0 	bl	8007aac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800792c:	e099      	b.n	8007a62 <HAL_UART_IRQHandler+0x50e>
 800792e:	bf00      	nop
 8007930:	08007c67 	.word	0x08007c67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800793c:	b29b      	uxth	r3, r3
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007948:	b29b      	uxth	r3, r3
 800794a:	2b00      	cmp	r3, #0
 800794c:	f000 808b 	beq.w	8007a66 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007950:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 8086 	beq.w	8007a66 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	330c      	adds	r3, #12
 8007960:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007964:	e853 3f00 	ldrex	r3, [r3]
 8007968:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800796a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800796c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007970:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	330c      	adds	r3, #12
 800797a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800797e:	647a      	str	r2, [r7, #68]	; 0x44
 8007980:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007982:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007984:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007986:	e841 2300 	strex	r3, r2, [r1]
 800798a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800798c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1e3      	bne.n	800795a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	3314      	adds	r3, #20
 8007998:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	e853 3f00 	ldrex	r3, [r3]
 80079a0:	623b      	str	r3, [r7, #32]
   return(result);
 80079a2:	6a3b      	ldr	r3, [r7, #32]
 80079a4:	f023 0301 	bic.w	r3, r3, #1
 80079a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3314      	adds	r3, #20
 80079b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80079b6:	633a      	str	r2, [r7, #48]	; 0x30
 80079b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1e3      	bne.n	8007992 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	330c      	adds	r3, #12
 80079de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	e853 3f00 	ldrex	r3, [r3]
 80079e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f023 0310 	bic.w	r3, r3, #16
 80079ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	330c      	adds	r3, #12
 80079f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80079fc:	61fa      	str	r2, [r7, #28]
 80079fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a00:	69b9      	ldr	r1, [r7, #24]
 8007a02:	69fa      	ldr	r2, [r7, #28]
 8007a04:	e841 2300 	strex	r3, r2, [r1]
 8007a08:	617b      	str	r3, [r7, #20]
   return(result);
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1e3      	bne.n	80079d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f848 	bl	8007aac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a1c:	e023      	b.n	8007a66 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d009      	beq.n	8007a3e <HAL_UART_IRQHandler+0x4ea>
 8007a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f929 	bl	8007c8e <UART_Transmit_IT>
    return;
 8007a3c:	e014      	b.n	8007a68 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00e      	beq.n	8007a68 <HAL_UART_IRQHandler+0x514>
 8007a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d008      	beq.n	8007a68 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f969 	bl	8007d2e <UART_EndTransmit_IT>
    return;
 8007a5c:	e004      	b.n	8007a68 <HAL_UART_IRQHandler+0x514>
    return;
 8007a5e:	bf00      	nop
 8007a60:	e002      	b.n	8007a68 <HAL_UART_IRQHandler+0x514>
      return;
 8007a62:	bf00      	nop
 8007a64:	e000      	b.n	8007a68 <HAL_UART_IRQHandler+0x514>
      return;
 8007a66:	bf00      	nop
  }
}
 8007a68:	37e8      	adds	r7, #232	; 0xe8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop

08007a70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b090      	sub	sp, #64	; 0x40
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	603b      	str	r3, [r7, #0]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ad4:	e050      	b.n	8007b78 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007adc:	d04c      	beq.n	8007b78 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d007      	beq.n	8007af4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ae4:	f7fb f92a 	bl	8002d3c <HAL_GetTick>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d241      	bcs.n	8007b78 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	330c      	adds	r3, #12
 8007afa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afe:	e853 3f00 	ldrex	r3, [r3]
 8007b02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	330c      	adds	r3, #12
 8007b12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b14:	637a      	str	r2, [r7, #52]	; 0x34
 8007b16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b1c:	e841 2300 	strex	r3, r2, [r1]
 8007b20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1e5      	bne.n	8007af4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3314      	adds	r3, #20
 8007b2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	e853 3f00 	ldrex	r3, [r3]
 8007b36:	613b      	str	r3, [r7, #16]
   return(result);
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	f023 0301 	bic.w	r3, r3, #1
 8007b3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3314      	adds	r3, #20
 8007b46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b48:	623a      	str	r2, [r7, #32]
 8007b4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4c:	69f9      	ldr	r1, [r7, #28]
 8007b4e:	6a3a      	ldr	r2, [r7, #32]
 8007b50:	e841 2300 	strex	r3, r2, [r1]
 8007b54:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1e5      	bne.n	8007b28 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2220      	movs	r2, #32
 8007b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e00f      	b.n	8007b98 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	4013      	ands	r3, r2
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	bf0c      	ite	eq
 8007b88:	2301      	moveq	r3, #1
 8007b8a:	2300      	movne	r3, #0
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	461a      	mov	r2, r3
 8007b90:	79fb      	ldrb	r3, [r7, #7]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d09f      	beq.n	8007ad6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3740      	adds	r7, #64	; 0x40
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b095      	sub	sp, #84	; 0x54
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	330c      	adds	r3, #12
 8007bae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb2:	e853 3f00 	ldrex	r3, [r3]
 8007bb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	330c      	adds	r3, #12
 8007bc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bc8:	643a      	str	r2, [r7, #64]	; 0x40
 8007bca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bd0:	e841 2300 	strex	r3, r2, [r1]
 8007bd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1e5      	bne.n	8007ba8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	3314      	adds	r3, #20
 8007be2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be4:	6a3b      	ldr	r3, [r7, #32]
 8007be6:	e853 3f00 	ldrex	r3, [r3]
 8007bea:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	f023 0301 	bic.w	r3, r3, #1
 8007bf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	3314      	adds	r3, #20
 8007bfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c04:	e841 2300 	strex	r3, r2, [r1]
 8007c08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1e5      	bne.n	8007bdc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d119      	bne.n	8007c4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	330c      	adds	r3, #12
 8007c1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	e853 3f00 	ldrex	r3, [r3]
 8007c26:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	f023 0310 	bic.w	r3, r3, #16
 8007c2e:	647b      	str	r3, [r7, #68]	; 0x44
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	330c      	adds	r3, #12
 8007c36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c38:	61ba      	str	r2, [r7, #24]
 8007c3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3c:	6979      	ldr	r1, [r7, #20]
 8007c3e:	69ba      	ldr	r2, [r7, #24]
 8007c40:	e841 2300 	strex	r3, r2, [r1]
 8007c44:	613b      	str	r3, [r7, #16]
   return(result);
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1e5      	bne.n	8007c18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2220      	movs	r2, #32
 8007c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007c5a:	bf00      	nop
 8007c5c:	3754      	adds	r7, #84	; 0x54
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b084      	sub	sp, #16
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f7ff ff09 	bl	8007a98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c86:	bf00      	nop
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b085      	sub	sp, #20
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b21      	cmp	r3, #33	; 0x21
 8007ca0:	d13e      	bne.n	8007d20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007caa:	d114      	bne.n	8007cd6 <UART_Transmit_IT+0x48>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d110      	bne.n	8007cd6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	881b      	ldrh	r3, [r3, #0]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	1c9a      	adds	r2, r3, #2
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	621a      	str	r2, [r3, #32]
 8007cd4:	e008      	b.n	8007ce8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	1c59      	adds	r1, r3, #1
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	6211      	str	r1, [r2, #32]
 8007ce0:	781a      	ldrb	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10f      	bne.n	8007d1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68da      	ldr	r2, [r3, #12]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68da      	ldr	r2, [r3, #12]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	e000      	b.n	8007d22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007d20:	2302      	movs	r3, #2
  }
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b082      	sub	sp, #8
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68da      	ldr	r2, [r3, #12]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2220      	movs	r2, #32
 8007d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f7ff fe8e 	bl	8007a70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b08c      	sub	sp, #48	; 0x30
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b22      	cmp	r3, #34	; 0x22
 8007d70:	f040 80ab 	bne.w	8007eca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d7c:	d117      	bne.n	8007dae <UART_Receive_IT+0x50>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d113      	bne.n	8007dae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d86:	2300      	movs	r3, #0
 8007d88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da6:	1c9a      	adds	r2, r3, #2
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	629a      	str	r2, [r3, #40]	; 0x28
 8007dac:	e026      	b.n	8007dfc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007db4:	2300      	movs	r3, #0
 8007db6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dc0:	d007      	beq.n	8007dd2 <UART_Receive_IT+0x74>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10a      	bne.n	8007de0 <UART_Receive_IT+0x82>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d106      	bne.n	8007de0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ddc:	701a      	strb	r2, [r3, #0]
 8007dde:	e008      	b.n	8007df2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df6:	1c5a      	adds	r2, r3, #1
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	3b01      	subs	r3, #1
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d15a      	bne.n	8007ec6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68da      	ldr	r2, [r3, #12]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f022 0220 	bic.w	r2, r2, #32
 8007e1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68da      	ldr	r2, [r3, #12]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	695a      	ldr	r2, [r3, #20]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f022 0201 	bic.w	r2, r2, #1
 8007e3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2220      	movs	r2, #32
 8007e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d135      	bne.n	8007ebc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	330c      	adds	r3, #12
 8007e5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	e853 3f00 	ldrex	r3, [r3]
 8007e64:	613b      	str	r3, [r7, #16]
   return(result);
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	f023 0310 	bic.w	r3, r3, #16
 8007e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	330c      	adds	r3, #12
 8007e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e76:	623a      	str	r2, [r7, #32]
 8007e78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7a:	69f9      	ldr	r1, [r7, #28]
 8007e7c:	6a3a      	ldr	r2, [r7, #32]
 8007e7e:	e841 2300 	strex	r3, r2, [r1]
 8007e82:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1e5      	bne.n	8007e56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 0310 	and.w	r3, r3, #16
 8007e94:	2b10      	cmp	r3, #16
 8007e96:	d10a      	bne.n	8007eae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e98:	2300      	movs	r3, #0
 8007e9a:	60fb      	str	r3, [r7, #12]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	60fb      	str	r3, [r7, #12]
 8007eac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7ff fdf9 	bl	8007aac <HAL_UARTEx_RxEventCallback>
 8007eba:	e002      	b.n	8007ec2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7ff fde1 	bl	8007a84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	e002      	b.n	8007ecc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	e000      	b.n	8007ecc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007eca:	2302      	movs	r3, #2
  }
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3730      	adds	r7, #48	; 0x30
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ed8:	b0c0      	sub	sp, #256	; 0x100
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef0:	68d9      	ldr	r1, [r3, #12]
 8007ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	ea40 0301 	orr.w	r3, r0, r1
 8007efc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f02:	689a      	ldr	r2, [r3, #8]
 8007f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	431a      	orrs	r2, r3
 8007f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	431a      	orrs	r2, r3
 8007f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f18:	69db      	ldr	r3, [r3, #28]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007f2c:	f021 010c 	bic.w	r1, r1, #12
 8007f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f3a:	430b      	orrs	r3, r1
 8007f3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	695b      	ldr	r3, [r3, #20]
 8007f46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f4e:	6999      	ldr	r1, [r3, #24]
 8007f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	ea40 0301 	orr.w	r3, r0, r1
 8007f5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	4b8f      	ldr	r3, [pc, #572]	; (80081a0 <UART_SetConfig+0x2cc>)
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d005      	beq.n	8007f74 <UART_SetConfig+0xa0>
 8007f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	4b8d      	ldr	r3, [pc, #564]	; (80081a4 <UART_SetConfig+0x2d0>)
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d104      	bne.n	8007f7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f74:	f7fd fed6 	bl	8005d24 <HAL_RCC_GetPCLK2Freq>
 8007f78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007f7c:	e003      	b.n	8007f86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f7e:	f7fd febd 	bl	8005cfc <HAL_RCC_GetPCLK1Freq>
 8007f82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f8a:	69db      	ldr	r3, [r3, #28]
 8007f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f90:	f040 810c 	bne.w	80081ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007f9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007fa2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007fa6:	4622      	mov	r2, r4
 8007fa8:	462b      	mov	r3, r5
 8007faa:	1891      	adds	r1, r2, r2
 8007fac:	65b9      	str	r1, [r7, #88]	; 0x58
 8007fae:	415b      	adcs	r3, r3
 8007fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007fb6:	4621      	mov	r1, r4
 8007fb8:	eb12 0801 	adds.w	r8, r2, r1
 8007fbc:	4629      	mov	r1, r5
 8007fbe:	eb43 0901 	adc.w	r9, r3, r1
 8007fc2:	f04f 0200 	mov.w	r2, #0
 8007fc6:	f04f 0300 	mov.w	r3, #0
 8007fca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007fd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fd6:	4690      	mov	r8, r2
 8007fd8:	4699      	mov	r9, r3
 8007fda:	4623      	mov	r3, r4
 8007fdc:	eb18 0303 	adds.w	r3, r8, r3
 8007fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007fe4:	462b      	mov	r3, r5
 8007fe6:	eb49 0303 	adc.w	r3, r9, r3
 8007fea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ffa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007ffe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008002:	460b      	mov	r3, r1
 8008004:	18db      	adds	r3, r3, r3
 8008006:	653b      	str	r3, [r7, #80]	; 0x50
 8008008:	4613      	mov	r3, r2
 800800a:	eb42 0303 	adc.w	r3, r2, r3
 800800e:	657b      	str	r3, [r7, #84]	; 0x54
 8008010:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008014:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008018:	f7f8 fe3e 	bl	8000c98 <__aeabi_uldivmod>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	4b61      	ldr	r3, [pc, #388]	; (80081a8 <UART_SetConfig+0x2d4>)
 8008022:	fba3 2302 	umull	r2, r3, r3, r2
 8008026:	095b      	lsrs	r3, r3, #5
 8008028:	011c      	lsls	r4, r3, #4
 800802a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800802e:	2200      	movs	r2, #0
 8008030:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008034:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008038:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800803c:	4642      	mov	r2, r8
 800803e:	464b      	mov	r3, r9
 8008040:	1891      	adds	r1, r2, r2
 8008042:	64b9      	str	r1, [r7, #72]	; 0x48
 8008044:	415b      	adcs	r3, r3
 8008046:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008048:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800804c:	4641      	mov	r1, r8
 800804e:	eb12 0a01 	adds.w	sl, r2, r1
 8008052:	4649      	mov	r1, r9
 8008054:	eb43 0b01 	adc.w	fp, r3, r1
 8008058:	f04f 0200 	mov.w	r2, #0
 800805c:	f04f 0300 	mov.w	r3, #0
 8008060:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008064:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008068:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800806c:	4692      	mov	sl, r2
 800806e:	469b      	mov	fp, r3
 8008070:	4643      	mov	r3, r8
 8008072:	eb1a 0303 	adds.w	r3, sl, r3
 8008076:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800807a:	464b      	mov	r3, r9
 800807c:	eb4b 0303 	adc.w	r3, fp, r3
 8008080:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008090:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008094:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008098:	460b      	mov	r3, r1
 800809a:	18db      	adds	r3, r3, r3
 800809c:	643b      	str	r3, [r7, #64]	; 0x40
 800809e:	4613      	mov	r3, r2
 80080a0:	eb42 0303 	adc.w	r3, r2, r3
 80080a4:	647b      	str	r3, [r7, #68]	; 0x44
 80080a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80080aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80080ae:	f7f8 fdf3 	bl	8000c98 <__aeabi_uldivmod>
 80080b2:	4602      	mov	r2, r0
 80080b4:	460b      	mov	r3, r1
 80080b6:	4611      	mov	r1, r2
 80080b8:	4b3b      	ldr	r3, [pc, #236]	; (80081a8 <UART_SetConfig+0x2d4>)
 80080ba:	fba3 2301 	umull	r2, r3, r3, r1
 80080be:	095b      	lsrs	r3, r3, #5
 80080c0:	2264      	movs	r2, #100	; 0x64
 80080c2:	fb02 f303 	mul.w	r3, r2, r3
 80080c6:	1acb      	subs	r3, r1, r3
 80080c8:	00db      	lsls	r3, r3, #3
 80080ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80080ce:	4b36      	ldr	r3, [pc, #216]	; (80081a8 <UART_SetConfig+0x2d4>)
 80080d0:	fba3 2302 	umull	r2, r3, r3, r2
 80080d4:	095b      	lsrs	r3, r3, #5
 80080d6:	005b      	lsls	r3, r3, #1
 80080d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80080dc:	441c      	add	r4, r3
 80080de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080e2:	2200      	movs	r2, #0
 80080e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80080ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80080f0:	4642      	mov	r2, r8
 80080f2:	464b      	mov	r3, r9
 80080f4:	1891      	adds	r1, r2, r2
 80080f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80080f8:	415b      	adcs	r3, r3
 80080fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008100:	4641      	mov	r1, r8
 8008102:	1851      	adds	r1, r2, r1
 8008104:	6339      	str	r1, [r7, #48]	; 0x30
 8008106:	4649      	mov	r1, r9
 8008108:	414b      	adcs	r3, r1
 800810a:	637b      	str	r3, [r7, #52]	; 0x34
 800810c:	f04f 0200 	mov.w	r2, #0
 8008110:	f04f 0300 	mov.w	r3, #0
 8008114:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008118:	4659      	mov	r1, fp
 800811a:	00cb      	lsls	r3, r1, #3
 800811c:	4651      	mov	r1, sl
 800811e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008122:	4651      	mov	r1, sl
 8008124:	00ca      	lsls	r2, r1, #3
 8008126:	4610      	mov	r0, r2
 8008128:	4619      	mov	r1, r3
 800812a:	4603      	mov	r3, r0
 800812c:	4642      	mov	r2, r8
 800812e:	189b      	adds	r3, r3, r2
 8008130:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008134:	464b      	mov	r3, r9
 8008136:	460a      	mov	r2, r1
 8008138:	eb42 0303 	adc.w	r3, r2, r3
 800813c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800814c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008150:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008154:	460b      	mov	r3, r1
 8008156:	18db      	adds	r3, r3, r3
 8008158:	62bb      	str	r3, [r7, #40]	; 0x28
 800815a:	4613      	mov	r3, r2
 800815c:	eb42 0303 	adc.w	r3, r2, r3
 8008160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008162:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008166:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800816a:	f7f8 fd95 	bl	8000c98 <__aeabi_uldivmod>
 800816e:	4602      	mov	r2, r0
 8008170:	460b      	mov	r3, r1
 8008172:	4b0d      	ldr	r3, [pc, #52]	; (80081a8 <UART_SetConfig+0x2d4>)
 8008174:	fba3 1302 	umull	r1, r3, r3, r2
 8008178:	095b      	lsrs	r3, r3, #5
 800817a:	2164      	movs	r1, #100	; 0x64
 800817c:	fb01 f303 	mul.w	r3, r1, r3
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	00db      	lsls	r3, r3, #3
 8008184:	3332      	adds	r3, #50	; 0x32
 8008186:	4a08      	ldr	r2, [pc, #32]	; (80081a8 <UART_SetConfig+0x2d4>)
 8008188:	fba2 2303 	umull	r2, r3, r2, r3
 800818c:	095b      	lsrs	r3, r3, #5
 800818e:	f003 0207 	and.w	r2, r3, #7
 8008192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4422      	add	r2, r4
 800819a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800819c:	e105      	b.n	80083aa <UART_SetConfig+0x4d6>
 800819e:	bf00      	nop
 80081a0:	40011000 	.word	0x40011000
 80081a4:	40011400 	.word	0x40011400
 80081a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081b0:	2200      	movs	r2, #0
 80081b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80081b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80081ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80081be:	4642      	mov	r2, r8
 80081c0:	464b      	mov	r3, r9
 80081c2:	1891      	adds	r1, r2, r2
 80081c4:	6239      	str	r1, [r7, #32]
 80081c6:	415b      	adcs	r3, r3
 80081c8:	627b      	str	r3, [r7, #36]	; 0x24
 80081ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80081ce:	4641      	mov	r1, r8
 80081d0:	1854      	adds	r4, r2, r1
 80081d2:	4649      	mov	r1, r9
 80081d4:	eb43 0501 	adc.w	r5, r3, r1
 80081d8:	f04f 0200 	mov.w	r2, #0
 80081dc:	f04f 0300 	mov.w	r3, #0
 80081e0:	00eb      	lsls	r3, r5, #3
 80081e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081e6:	00e2      	lsls	r2, r4, #3
 80081e8:	4614      	mov	r4, r2
 80081ea:	461d      	mov	r5, r3
 80081ec:	4643      	mov	r3, r8
 80081ee:	18e3      	adds	r3, r4, r3
 80081f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80081f4:	464b      	mov	r3, r9
 80081f6:	eb45 0303 	adc.w	r3, r5, r3
 80081fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80081fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800820a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800820e:	f04f 0200 	mov.w	r2, #0
 8008212:	f04f 0300 	mov.w	r3, #0
 8008216:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800821a:	4629      	mov	r1, r5
 800821c:	008b      	lsls	r3, r1, #2
 800821e:	4621      	mov	r1, r4
 8008220:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008224:	4621      	mov	r1, r4
 8008226:	008a      	lsls	r2, r1, #2
 8008228:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800822c:	f7f8 fd34 	bl	8000c98 <__aeabi_uldivmod>
 8008230:	4602      	mov	r2, r0
 8008232:	460b      	mov	r3, r1
 8008234:	4b60      	ldr	r3, [pc, #384]	; (80083b8 <UART_SetConfig+0x4e4>)
 8008236:	fba3 2302 	umull	r2, r3, r3, r2
 800823a:	095b      	lsrs	r3, r3, #5
 800823c:	011c      	lsls	r4, r3, #4
 800823e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008242:	2200      	movs	r2, #0
 8008244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008248:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800824c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008250:	4642      	mov	r2, r8
 8008252:	464b      	mov	r3, r9
 8008254:	1891      	adds	r1, r2, r2
 8008256:	61b9      	str	r1, [r7, #24]
 8008258:	415b      	adcs	r3, r3
 800825a:	61fb      	str	r3, [r7, #28]
 800825c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008260:	4641      	mov	r1, r8
 8008262:	1851      	adds	r1, r2, r1
 8008264:	6139      	str	r1, [r7, #16]
 8008266:	4649      	mov	r1, r9
 8008268:	414b      	adcs	r3, r1
 800826a:	617b      	str	r3, [r7, #20]
 800826c:	f04f 0200 	mov.w	r2, #0
 8008270:	f04f 0300 	mov.w	r3, #0
 8008274:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008278:	4659      	mov	r1, fp
 800827a:	00cb      	lsls	r3, r1, #3
 800827c:	4651      	mov	r1, sl
 800827e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008282:	4651      	mov	r1, sl
 8008284:	00ca      	lsls	r2, r1, #3
 8008286:	4610      	mov	r0, r2
 8008288:	4619      	mov	r1, r3
 800828a:	4603      	mov	r3, r0
 800828c:	4642      	mov	r2, r8
 800828e:	189b      	adds	r3, r3, r2
 8008290:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008294:	464b      	mov	r3, r9
 8008296:	460a      	mov	r2, r1
 8008298:	eb42 0303 	adc.w	r3, r2, r3
 800829c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80082a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80082aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80082ac:	f04f 0200 	mov.w	r2, #0
 80082b0:	f04f 0300 	mov.w	r3, #0
 80082b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80082b8:	4649      	mov	r1, r9
 80082ba:	008b      	lsls	r3, r1, #2
 80082bc:	4641      	mov	r1, r8
 80082be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082c2:	4641      	mov	r1, r8
 80082c4:	008a      	lsls	r2, r1, #2
 80082c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80082ca:	f7f8 fce5 	bl	8000c98 <__aeabi_uldivmod>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	4b39      	ldr	r3, [pc, #228]	; (80083b8 <UART_SetConfig+0x4e4>)
 80082d4:	fba3 1302 	umull	r1, r3, r3, r2
 80082d8:	095b      	lsrs	r3, r3, #5
 80082da:	2164      	movs	r1, #100	; 0x64
 80082dc:	fb01 f303 	mul.w	r3, r1, r3
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	011b      	lsls	r3, r3, #4
 80082e4:	3332      	adds	r3, #50	; 0x32
 80082e6:	4a34      	ldr	r2, [pc, #208]	; (80083b8 <UART_SetConfig+0x4e4>)
 80082e8:	fba2 2303 	umull	r2, r3, r2, r3
 80082ec:	095b      	lsrs	r3, r3, #5
 80082ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082f2:	441c      	add	r4, r3
 80082f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082f8:	2200      	movs	r2, #0
 80082fa:	673b      	str	r3, [r7, #112]	; 0x70
 80082fc:	677a      	str	r2, [r7, #116]	; 0x74
 80082fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008302:	4642      	mov	r2, r8
 8008304:	464b      	mov	r3, r9
 8008306:	1891      	adds	r1, r2, r2
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	415b      	adcs	r3, r3
 800830c:	60fb      	str	r3, [r7, #12]
 800830e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008312:	4641      	mov	r1, r8
 8008314:	1851      	adds	r1, r2, r1
 8008316:	6039      	str	r1, [r7, #0]
 8008318:	4649      	mov	r1, r9
 800831a:	414b      	adcs	r3, r1
 800831c:	607b      	str	r3, [r7, #4]
 800831e:	f04f 0200 	mov.w	r2, #0
 8008322:	f04f 0300 	mov.w	r3, #0
 8008326:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800832a:	4659      	mov	r1, fp
 800832c:	00cb      	lsls	r3, r1, #3
 800832e:	4651      	mov	r1, sl
 8008330:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008334:	4651      	mov	r1, sl
 8008336:	00ca      	lsls	r2, r1, #3
 8008338:	4610      	mov	r0, r2
 800833a:	4619      	mov	r1, r3
 800833c:	4603      	mov	r3, r0
 800833e:	4642      	mov	r2, r8
 8008340:	189b      	adds	r3, r3, r2
 8008342:	66bb      	str	r3, [r7, #104]	; 0x68
 8008344:	464b      	mov	r3, r9
 8008346:	460a      	mov	r2, r1
 8008348:	eb42 0303 	adc.w	r3, r2, r3
 800834c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800834e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	663b      	str	r3, [r7, #96]	; 0x60
 8008358:	667a      	str	r2, [r7, #100]	; 0x64
 800835a:	f04f 0200 	mov.w	r2, #0
 800835e:	f04f 0300 	mov.w	r3, #0
 8008362:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008366:	4649      	mov	r1, r9
 8008368:	008b      	lsls	r3, r1, #2
 800836a:	4641      	mov	r1, r8
 800836c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008370:	4641      	mov	r1, r8
 8008372:	008a      	lsls	r2, r1, #2
 8008374:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008378:	f7f8 fc8e 	bl	8000c98 <__aeabi_uldivmod>
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	4b0d      	ldr	r3, [pc, #52]	; (80083b8 <UART_SetConfig+0x4e4>)
 8008382:	fba3 1302 	umull	r1, r3, r3, r2
 8008386:	095b      	lsrs	r3, r3, #5
 8008388:	2164      	movs	r1, #100	; 0x64
 800838a:	fb01 f303 	mul.w	r3, r1, r3
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	011b      	lsls	r3, r3, #4
 8008392:	3332      	adds	r3, #50	; 0x32
 8008394:	4a08      	ldr	r2, [pc, #32]	; (80083b8 <UART_SetConfig+0x4e4>)
 8008396:	fba2 2303 	umull	r2, r3, r2, r3
 800839a:	095b      	lsrs	r3, r3, #5
 800839c:	f003 020f 	and.w	r2, r3, #15
 80083a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4422      	add	r2, r4
 80083a8:	609a      	str	r2, [r3, #8]
}
 80083aa:	bf00      	nop
 80083ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80083b0:	46bd      	mov	sp, r7
 80083b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083b6:	bf00      	nop
 80083b8:	51eb851f 	.word	0x51eb851f

080083bc <VL53L0X_GetDeviceInfo>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
                                    VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo) {
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083c6:	2300      	movs	r3, #0
 80083c8:	73fb      	strb	r3, [r7, #15]
  LOG_FUNCTION_START("");

  Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f004 fb2b 	bl	800ca28 <VL53L0X_get_device_info>
 80083d2:	4603      	mov	r3, r0
 80083d4:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_END(Status);
  return Status;
 80083d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(
    VL53L0X_DEV Dev, int32_t *pOffsetCalibrationDataMicroMeter) {
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b084      	sub	sp, #16
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083ec:	2300      	movs	r3, #0
 80083ee:	73fb      	strb	r3, [r7, #15]
  LOG_FUNCTION_START("");

  Status = VL53L0X_get_offset_calibration_data_micro_meter(
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f001 fcd0 	bl	8009d98 <VL53L0X_get_offset_calibration_data_micro_meter>
 80083f8:	4603      	mov	r3, r0
 80083fa:	73fb      	strb	r3, [r7, #15]
      Dev, pOffsetCalibrationDataMicroMeter);

  LOG_FUNCTION_END(Status);
  return Status;
 80083fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <VL53L0X_DataInit>:

  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev) {
 8008408:	b5b0      	push	{r4, r5, r7, lr}
 800840a:	b096      	sub	sp, #88	; 0x58
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008410:	2300      	movs	r3, #0
 8008412:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  LOG_FUNCTION_START("");

  /* by default the I2C is running at 1V8 if you want to change it you
   * need to include this define at compilation level. */
#ifdef USE_I2C_2V8
  Status = VL53L0X_UpdateByte(
 8008416:	2301      	movs	r3, #1
 8008418:	22fe      	movs	r2, #254	; 0xfe
 800841a:	2189      	movs	r1, #137	; 0x89
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f004 fd7a 	bl	800cf16 <VL53L0X_UpdateByte>
 8008422:	4603      	mov	r3, r0
 8008424:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      Dev, VL53L0X_REG_VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV, 0xFE, 0x01);
#endif

  /* Set I2C standard mode */
  if (Status == VL53L0X_ERROR_NONE)
 8008428:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800842c:	2b00      	cmp	r3, #0
 800842e:	d107      	bne.n	8008440 <VL53L0X_DataInit+0x38>
    Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8008430:	2200      	movs	r2, #0
 8008432:	2188      	movs	r1, #136	; 0x88
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f004 fd2a 	bl	800ce8e <VL53L0X_WrByte>
 800843a:	4603      	mov	r3, r0
 800843c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  /* read WHO_AM_I */
  uint8_t b;
  Status = VL53L0X_RdByte(Dev, 0xC0, &b);
 8008440:	f107 030e 	add.w	r3, r7, #14
 8008444:	461a      	mov	r2, r3
 8008446:	21c0      	movs	r1, #192	; 0xc0
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f004 fda6 	bl	800cf9a <VL53L0X_RdByte>
 800844e:	4603      	mov	r3, r0
 8008450:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  // Serial.print("WHOAMI: 0x"); Serial.println(b, HEX);

  /* read WHO_AM_I */

  VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  if (Status == VL53L0X_ERROR_NONE)
    Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

  /* Default value is 1000 for Linearity Corrective Gain */
  PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008462:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

  /* Dmax default Parameter */
  PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800846c:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
  PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a9e      	ldr	r2, [pc, #632]	; (80086ec <VL53L0X_DataInit+0x2e4>)
 8008474:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
                (FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

  /* Set Default static parameters
   *set first temporary values 9.44MHz * 65536 = 618660 */
  VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a9d      	ldr	r2, [pc, #628]	; (80086f0 <VL53L0X_DataInit+0x2e8>)
 800847c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

  /* Set Default XTalkCompensationRateMegaCps to 0  */
  VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	621a      	str	r2, [r3, #32]

  /* Get default parameters */
  Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8008486:	f107 0310 	add.w	r3, r7, #16
 800848a:	4619      	mov	r1, r3
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 faa9 	bl	80089e4 <VL53L0X_GetDeviceParameters>
 8008492:	4603      	mov	r3, r0
 8008494:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  if (Status == VL53L0X_ERROR_NONE) {
 8008498:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800849c:	2b00      	cmp	r3, #0
 800849e:	d112      	bne.n	80084c6 <VL53L0X_DataInit+0xbe>
    /* initialize PAL values */
    CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80084a0:	2300      	movs	r3, #0
 80084a2:	743b      	strb	r3, [r7, #16]
    CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80084a4:	2300      	movs	r3, #0
 80084a6:	747b      	strb	r3, [r7, #17]
    PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f103 0410 	add.w	r4, r3, #16
 80084ae:	f107 0510 	add.w	r5, r7, #16
 80084b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80084c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }

  /* Sigma estimator variable */
  PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2264      	movs	r2, #100	; 0x64
 80084ca:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
  PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f44f 7261 	mov.w	r2, #900	; 0x384
 80084d4:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
  PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80084de:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
  PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80084e8:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

  /* Use internal default settings */
  PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

  Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80084f4:	2201      	movs	r2, #1
 80084f6:	2180      	movs	r1, #128	; 0x80
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f004 fcc8 	bl	800ce8e <VL53L0X_WrByte>
 80084fe:	4603      	mov	r3, r0
 8008500:	461a      	mov	r2, r3
 8008502:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008506:	4313      	orrs	r3, r2
 8008508:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800850c:	2201      	movs	r2, #1
 800850e:	21ff      	movs	r1, #255	; 0xff
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f004 fcbc 	bl	800ce8e <VL53L0X_WrByte>
 8008516:	4603      	mov	r3, r0
 8008518:	461a      	mov	r2, r3
 800851a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800851e:	4313      	orrs	r3, r2
 8008520:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008524:	2200      	movs	r2, #0
 8008526:	2100      	movs	r1, #0
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f004 fcb0 	bl	800ce8e <VL53L0X_WrByte>
 800852e:	4603      	mov	r3, r0
 8008530:	461a      	mov	r2, r3
 8008532:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008536:	4313      	orrs	r3, r2
 8008538:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800853c:	f107 030f 	add.w	r3, r7, #15
 8008540:	461a      	mov	r2, r3
 8008542:	2191      	movs	r1, #145	; 0x91
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f004 fd28 	bl	800cf9a <VL53L0X_RdByte>
 800854a:	4603      	mov	r3, r0
 800854c:	461a      	mov	r2, r3
 800854e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008552:	4313      	orrs	r3, r2
 8008554:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  PALDevDataSet(Dev, StopVariable, StopVariable);
 8008558:	7bfa      	ldrb	r2, [r7, #15]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
  Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008560:	2201      	movs	r2, #1
 8008562:	2100      	movs	r1, #0
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f004 fc92 	bl	800ce8e <VL53L0X_WrByte>
 800856a:	4603      	mov	r3, r0
 800856c:	461a      	mov	r2, r3
 800856e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008572:	4313      	orrs	r3, r2
 8008574:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008578:	2200      	movs	r2, #0
 800857a:	21ff      	movs	r1, #255	; 0xff
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f004 fc86 	bl	800ce8e <VL53L0X_WrByte>
 8008582:	4603      	mov	r3, r0
 8008584:	461a      	mov	r2, r3
 8008586:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800858a:	4313      	orrs	r3, r2
 800858c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008590:	2200      	movs	r2, #0
 8008592:	2180      	movs	r1, #128	; 0x80
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f004 fc7a 	bl	800ce8e <VL53L0X_WrByte>
 800859a:	4603      	mov	r3, r0
 800859c:	461a      	mov	r2, r3
 800859e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80085a2:	4313      	orrs	r3, r2
 80085a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  /* Enable all check */
  for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80085a8:	2300      	movs	r3, #0
 80085aa:	653b      	str	r3, [r7, #80]	; 0x50
 80085ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085ae:	2b05      	cmp	r3, #5
 80085b0:	dc16      	bgt.n	80085e0 <VL53L0X_DataInit+0x1d8>
    if (Status == VL53L0X_ERROR_NONE)
 80085b2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d111      	bne.n	80085de <VL53L0X_DataInit+0x1d6>
      Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80085ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085bc:	b29b      	uxth	r3, r3
 80085be:	2201      	movs	r2, #1
 80085c0:	4619      	mov	r1, r3
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fd40 	bl	8009048 <VL53L0X_SetLimitCheckEnable>
 80085c8:	4603      	mov	r3, r0
 80085ca:	461a      	mov	r2, r3
 80085cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80085d0:	4313      	orrs	r3, r2
 80085d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80085d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085d8:	3301      	adds	r3, #1
 80085da:	653b      	str	r3, [r7, #80]	; 0x50
 80085dc:	e7e6      	b.n	80085ac <VL53L0X_DataInit+0x1a4>
    else
      break;
 80085de:	bf00      	nop
  }

  /* Disable the following checks */
  if (Status == VL53L0X_ERROR_NONE)
 80085e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d107      	bne.n	80085f8 <VL53L0X_DataInit+0x1f0>
    Status = VL53L0X_SetLimitCheckEnable(
 80085e8:	2200      	movs	r2, #0
 80085ea:	2102      	movs	r1, #2
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fd2b 	bl	8009048 <VL53L0X_SetLimitCheckEnable>
 80085f2:	4603      	mov	r3, r0
 80085f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

  if (Status == VL53L0X_ERROR_NONE)
 80085f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d107      	bne.n	8008610 <VL53L0X_DataInit+0x208>
    Status = VL53L0X_SetLimitCheckEnable(
 8008600:	2200      	movs	r2, #0
 8008602:	2103      	movs	r1, #3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fd1f 	bl	8009048 <VL53L0X_SetLimitCheckEnable>
 800860a:	4603      	mov	r3, r0
 800860c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

  if (Status == VL53L0X_ERROR_NONE)
 8008610:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008614:	2b00      	cmp	r3, #0
 8008616:	d107      	bne.n	8008628 <VL53L0X_DataInit+0x220>
    Status = VL53L0X_SetLimitCheckEnable(
 8008618:	2200      	movs	r2, #0
 800861a:	2104      	movs	r1, #4
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fd13 	bl	8009048 <VL53L0X_SetLimitCheckEnable>
 8008622:	4603      	mov	r3, r0
 8008624:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

  if (Status == VL53L0X_ERROR_NONE)
 8008628:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800862c:	2b00      	cmp	r3, #0
 800862e:	d107      	bne.n	8008640 <VL53L0X_DataInit+0x238>
    Status = VL53L0X_SetLimitCheckEnable(
 8008630:	2200      	movs	r2, #0
 8008632:	2105      	movs	r1, #5
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fd07 	bl	8009048 <VL53L0X_SetLimitCheckEnable>
 800863a:	4603      	mov	r3, r0
 800863c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

  /* Limit default values */
  if (Status == VL53L0X_ERROR_NONE) {
 8008640:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008644:	2b00      	cmp	r3, #0
 8008646:	d108      	bne.n	800865a <VL53L0X_DataInit+0x252>
    Status =
        VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
 8008648:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800864c:	2100      	movs	r1, #0
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fdaa 	bl	80091a8 <VL53L0X_SetLimitCheckValue>
 8008654:	4603      	mov	r3, r0
 8008656:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                                   (FixPoint1616_t)(18 * 65536));
  }
  if (Status == VL53L0X_ERROR_NONE) {
 800865a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800865e:	2b00      	cmp	r3, #0
 8008660:	d108      	bne.n	8008674 <VL53L0X_DataInit+0x26c>
    Status = VL53L0X_SetLimitCheckValue(
 8008662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008666:	2101      	movs	r1, #1
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fd9d 	bl	80091a8 <VL53L0X_SetLimitCheckValue>
 800866e:	4603      	mov	r3, r0
 8008670:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
        (FixPoint1616_t)(25 * 65536 / 100));
    /* 0.25 * 65536 */
  }

  if (Status == VL53L0X_ERROR_NONE) {
 8008674:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008678:	2b00      	cmp	r3, #0
 800867a:	d108      	bne.n	800868e <VL53L0X_DataInit+0x286>
    Status = VL53L0X_SetLimitCheckValue(
 800867c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8008680:	2102      	movs	r1, #2
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fd90 	bl	80091a8 <VL53L0X_SetLimitCheckValue>
 8008688:	4603      	mov	r3, r0
 800868a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, (FixPoint1616_t)(35 * 65536));
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800868e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008692:	2b00      	cmp	r3, #0
 8008694:	d107      	bne.n	80086a6 <VL53L0X_DataInit+0x29e>
    Status = VL53L0X_SetLimitCheckValue(
 8008696:	2200      	movs	r2, #0
 8008698:	2103      	movs	r1, #3
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fd84 	bl	80091a8 <VL53L0X_SetLimitCheckValue>
 80086a0:	4603      	mov	r3, r0
 80086a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
        (FixPoint1616_t)(0 * 65536));
  }

  if (Status == VL53L0X_ERROR_NONE) {
 80086a6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d10f      	bne.n	80086ce <VL53L0X_DataInit+0x2c6>

    PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	22ff      	movs	r2, #255	; 0xff
 80086b2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80086b6:	22ff      	movs	r2, #255	; 0xff
 80086b8:	2101      	movs	r1, #1
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f004 fbe7 	bl	800ce8e <VL53L0X_WrByte>
 80086c0:	4603      	mov	r3, r0
 80086c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    /* Set PAL state to tell that we are waiting for call to
     * VL53L0X_StaticInit */
    PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
  }

  if (Status == VL53L0X_ERROR_NONE)
 80086ce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d103      	bne.n	80086de <VL53L0X_DataInit+0x2d6>
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

  LOG_FUNCTION_END(Status);
  return Status;
 80086de:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3758      	adds	r7, #88	; 0x58
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bdb0      	pop	{r4, r5, r7, pc}
 80086ea:	bf00      	nop
 80086ec:	00016b85 	.word	0x00016b85
 80086f0:	000970a4 	.word	0x000970a4

080086f4 <VL53L0X_StaticInit>:

  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev) {
 80086f4:	b5b0      	push	{r4, r5, r7, lr}
 80086f6:	b09e      	sub	sp, #120	; 0x78
 80086f8:	af02      	add	r7, sp, #8
 80086fa:	6078      	str	r0, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086fc:	2300      	movs	r3, #0
 80086fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8008702:	f107 031c 	add.w	r3, r7, #28
 8008706:	2240      	movs	r2, #64	; 0x40
 8008708:	2100      	movs	r1, #0
 800870a:	4618      	mov	r0, r3
 800870c:	f004 fcfe 	bl	800d10c <memset>
  uint8_t *pTuningSettingBuffer;
  uint16_t tempword = 0;
 8008710:	2300      	movs	r3, #0
 8008712:	837b      	strh	r3, [r7, #26]
  uint8_t tempbyte = 0;
 8008714:	2300      	movs	r3, #0
 8008716:	767b      	strb	r3, [r7, #25]
  uint8_t UseInternalTuningSettings = 0;
 8008718:	2300      	movs	r3, #0
 800871a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t count = 0;
 800871e:	2300      	movs	r3, #0
 8008720:	663b      	str	r3, [r7, #96]	; 0x60
  uint8_t isApertureSpads = 0;
 8008722:	2300      	movs	r3, #0
 8008724:	763b      	strb	r3, [r7, #24]
  uint32_t refSpadCount = 0;
 8008726:	2300      	movs	r3, #0
 8008728:	617b      	str	r3, [r7, #20]
  uint8_t ApertureSpads = 0;
 800872a:	2300      	movs	r3, #0
 800872c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint8_t vcselPulsePeriodPCLK;
  FixPoint1616_t seqTimeoutMilliSecs;

  LOG_FUNCTION_START("");

  Status = VL53L0X_get_info_from_device(Dev, 1);
 8008730:	2101      	movs	r1, #1
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f002 f9f0 	bl	800ab18 <VL53L0X_get_info_from_device>
 8008738:	4603      	mov	r3, r0
 800873a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* set the ref spad from NVM */
  count = (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadCount);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8008744:	663b      	str	r3, [r7, #96]	; 0x60
  ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadType);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800874c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

  /* NVM value invalid */
  if ((ApertureSpads > 1) || ((ApertureSpads == 1) && (count > 32)) ||
 8008750:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008754:	2b01      	cmp	r3, #1
 8008756:	d80d      	bhi.n	8008774 <VL53L0X_StaticInit+0x80>
 8008758:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800875c:	2b01      	cmp	r3, #1
 800875e:	d102      	bne.n	8008766 <VL53L0X_StaticInit+0x72>
 8008760:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008762:	2b20      	cmp	r3, #32
 8008764:	d806      	bhi.n	8008774 <VL53L0X_StaticInit+0x80>
 8008766:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10e      	bne.n	800878c <VL53L0X_StaticInit+0x98>
      ((ApertureSpads == 0) && (count > 12)))
 800876e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008770:	2b0c      	cmp	r3, #12
 8008772:	d90b      	bls.n	800878c <VL53L0X_StaticInit+0x98>
    Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8008774:	f107 0218 	add.w	r2, r7, #24
 8008778:	f107 0314 	add.w	r3, r7, #20
 800877c:	4619      	mov	r1, r3
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f001 fd0b 	bl	800a19a <VL53L0X_perform_ref_spad_management>
 8008784:	4603      	mov	r3, r0
 8008786:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800878a:	e001      	b.n	8008790 <VL53L0X_StaticInit+0x9c>
  else
	  // rm? https://electronics.stackexchange.com/questions/613378/vl53l0x-constantly-returns-range-error
//    Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);

  /* Initialize tuning settings buffer to prevent compiler warning. */
  pTuningSettingBuffer = DefaultTuningSettings;
 800878c:	4b94      	ldr	r3, [pc, #592]	; (80089e0 <VL53L0X_StaticInit+0x2ec>)
 800878e:	66bb      	str	r3, [r7, #104]	; 0x68

  if (Status == VL53L0X_ERROR_NONE) {
 8008790:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10f      	bne.n	80087b8 <VL53L0X_StaticInit+0xc4>
    UseInternalTuningSettings = PALDevDataGet(Dev, UseInternalTuningSettings);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800879e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    if (UseInternalTuningSettings == 0)
 80087a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d104      	bne.n	80087b4 <VL53L0X_StaticInit+0xc0>
      pTuningSettingBuffer = PALDevDataGet(Dev, pTuningSettingsPointer);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80087b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80087b2:	e001      	b.n	80087b8 <VL53L0X_StaticInit+0xc4>
    else
      pTuningSettingBuffer = DefaultTuningSettings;
 80087b4:	4b8a      	ldr	r3, [pc, #552]	; (80089e0 <VL53L0X_StaticInit+0x2ec>)
 80087b6:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  if (Status == VL53L0X_ERROR_NONE)
 80087b8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d106      	bne.n	80087ce <VL53L0X_StaticInit+0xda>
    Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80087c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f003 fabe 	bl	800bd44 <VL53L0X_load_tuning_settings>
 80087c8:	4603      	mov	r3, r0
 80087ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Set interrupt config to new sample ready */
  if (Status == VL53L0X_ERROR_NONE) {
 80087ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10a      	bne.n	80087ec <VL53L0X_StaticInit+0xf8>
    Status = VL53L0X_SetGpioConfig(
 80087d6:	2300      	movs	r3, #0
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	2304      	movs	r3, #4
 80087dc:	2200      	movs	r2, #0
 80087de:	2100      	movs	r1, #0
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f001 f909 	bl	80099f8 <VL53L0X_SetGpioConfig>
 80087e6:	4603      	mov	r3, r0
 80087e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        Dev, 0, 0, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
        VL53L0X_INTERRUPTPOLARITY_LOW);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 80087ec:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d121      	bne.n	8008838 <VL53L0X_StaticInit+0x144>
    Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80087f4:	2201      	movs	r2, #1
 80087f6:	21ff      	movs	r1, #255	; 0xff
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f004 fb48 	bl	800ce8e <VL53L0X_WrByte>
 80087fe:	4603      	mov	r3, r0
 8008800:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8008804:	f107 031a 	add.w	r3, r7, #26
 8008808:	461a      	mov	r2, r3
 800880a:	2184      	movs	r1, #132	; 0x84
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f004 fbe5 	bl	800cfdc <VL53L0X_RdWord>
 8008812:	4603      	mov	r3, r0
 8008814:	461a      	mov	r2, r3
 8008816:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800881a:	4313      	orrs	r3, r2
 800881c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008820:	2200      	movs	r2, #0
 8008822:	21ff      	movs	r1, #255	; 0xff
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f004 fb32 	bl	800ce8e <VL53L0X_WrByte>
 800882a:	4603      	mov	r3, r0
 800882c:	461a      	mov	r2, r3
 800882e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008832:	4313      	orrs	r3, r2
 8008834:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }

  if (Status == VL53L0X_ERROR_NONE) {
 8008838:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800883c:	2b00      	cmp	r3, #0
 800883e:	d105      	bne.n	800884c <VL53L0X_StaticInit+0x158>
    VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008840:	8b7b      	ldrh	r3, [r7, #26]
 8008842:	011b      	lsls	r3, r3, #4
 8008844:	461a      	mov	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        Dev, OscFrequencyMHz, VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
  }

  /* After static init, some device parameters may be changed,
   * so update them */
  if (Status == VL53L0X_ERROR_NONE)
 800884c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008850:	2b00      	cmp	r3, #0
 8008852:	d108      	bne.n	8008866 <VL53L0X_StaticInit+0x172>
    Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8008854:	f107 031c 	add.w	r3, r7, #28
 8008858:	4619      	mov	r1, r3
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f8c2 	bl	80089e4 <VL53L0X_GetDeviceParameters>
 8008860:	4603      	mov	r3, r0
 8008862:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  if (Status == VL53L0X_ERROR_NONE) {
 8008866:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800886a:	2b00      	cmp	r3, #0
 800886c:	d110      	bne.n	8008890 <VL53L0X_StaticInit+0x19c>
    Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800886e:	f107 0319 	add.w	r3, r7, #25
 8008872:	4619      	mov	r1, r3
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 f984 	bl	8008b82 <VL53L0X_GetFractionEnable>
 800887a:	4603      	mov	r3, r0
 800887c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (Status == VL53L0X_ERROR_NONE)
 8008880:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008884:	2b00      	cmp	r3, #0
 8008886:	d103      	bne.n	8008890 <VL53L0X_StaticInit+0x19c>
      PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8008888:	7e7a      	ldrb	r2, [r7, #25]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
  }

  if (Status == VL53L0X_ERROR_NONE)
 8008890:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10e      	bne.n	80088b6 <VL53L0X_StaticInit+0x1c2>
    PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f103 0410 	add.w	r4, r3, #16
 800889e:	f107 051c 	add.w	r5, r7, #28
 80088a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80088b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  /* read the sequence config and save it */
  if (Status == VL53L0X_ERROR_NONE) {
 80088b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d111      	bne.n	80088e2 <VL53L0X_StaticInit+0x1ee>
    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
 80088be:	f107 0319 	add.w	r3, r7, #25
 80088c2:	461a      	mov	r2, r3
 80088c4:	2101      	movs	r1, #1
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f004 fb67 	bl	800cf9a <VL53L0X_RdByte>
 80088cc:	4603      	mov	r3, r0
 80088ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (Status == VL53L0X_ERROR_NONE)
 80088d2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d103      	bne.n	80088e2 <VL53L0X_StaticInit+0x1ee>
      PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80088da:	7e7a      	ldrb	r2, [r7, #25]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  }

  /* Disable MSRC and TCC by default */
  if (Status == VL53L0X_ERROR_NONE)
 80088e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d107      	bne.n	80088fa <VL53L0X_StaticInit+0x206>
    Status = VL53L0X_SetSequenceStepEnable(Dev, VL53L0X_SEQUENCESTEP_TCC, 0);
 80088ea:	2200      	movs	r2, #0
 80088ec:	2100      	movs	r1, #0
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f9a4 	bl	8008c3c <VL53L0X_SetSequenceStepEnable>
 80088f4:	4603      	mov	r3, r0
 80088f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  if (Status == VL53L0X_ERROR_NONE)
 80088fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d107      	bne.n	8008912 <VL53L0X_StaticInit+0x21e>
    Status = VL53L0X_SetSequenceStepEnable(Dev, VL53L0X_SEQUENCESTEP_MSRC, 0);
 8008902:	2200      	movs	r2, #0
 8008904:	2102      	movs	r1, #2
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 f998 	bl	8008c3c <VL53L0X_SetSequenceStepEnable>
 800890c:	4603      	mov	r3, r0
 800890e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Set PAL State to standby */
  if (Status == VL53L0X_ERROR_NONE)
 8008912:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008916:	2b00      	cmp	r3, #0
 8008918:	d103      	bne.n	8008922 <VL53L0X_StaticInit+0x22e>
    PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2203      	movs	r2, #3
 800891e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132

  /* Store pre-range vcsel period */
  if (Status == VL53L0X_ERROR_NONE) {
 8008922:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008926:	2b00      	cmp	r3, #0
 8008928:	d109      	bne.n	800893e <VL53L0X_StaticInit+0x24a>
    Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE,
 800892a:	f107 0313 	add.w	r3, r7, #19
 800892e:	461a      	mov	r2, r3
 8008930:	2100      	movs	r1, #0
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f96a 	bl	8008c0c <VL53L0X_GetVcselPulsePeriod>
 8008938:	4603      	mov	r3, r0
 800893a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                                         &vcselPulsePeriodPCLK);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800893e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008942:	2b00      	cmp	r3, #0
 8008944:	d103      	bne.n	800894e <VL53L0X_StaticInit+0x25a>
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, PreRangeVcselPulsePeriod,
 8008946:	7cfa      	ldrb	r2, [r7, #19]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
                                       vcselPulsePeriodPCLK);
  }

  /* Store final-range vcsel period */
  if (Status == VL53L0X_ERROR_NONE) {
 800894e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008952:	2b00      	cmp	r3, #0
 8008954:	d109      	bne.n	800896a <VL53L0X_StaticInit+0x276>
    Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
 8008956:	f107 0313 	add.w	r3, r7, #19
 800895a:	461a      	mov	r2, r3
 800895c:	2101      	movs	r1, #1
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f954 	bl	8008c0c <VL53L0X_GetVcselPulsePeriod>
 8008964:	4603      	mov	r3, r0
 8008966:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                                         &vcselPulsePeriodPCLK);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800896a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800896e:	2b00      	cmp	r3, #0
 8008970:	d103      	bne.n	800897a <VL53L0X_StaticInit+0x286>
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, FinalRangeVcselPulsePeriod,
 8008972:	7cfa      	ldrb	r2, [r7, #19]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                                       vcselPulsePeriodPCLK);
  }

  /* Store pre-range timeout */
  if (Status == VL53L0X_ERROR_NONE) {
 800897a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800897e:	2b00      	cmp	r3, #0
 8008980:	d109      	bne.n	8008996 <VL53L0X_StaticInit+0x2a2>
    Status = VL53L0X_GetSequenceStepTimeout(Dev, VL53L0X_SEQUENCESTEP_PRE_RANGE,
 8008982:	f107 030c 	add.w	r3, r7, #12
 8008986:	461a      	mov	r2, r3
 8008988:	2103      	movs	r1, #3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 faa0 	bl	8008ed0 <VL53L0X_GetSequenceStepTimeout>
 8008990:	4603      	mov	r3, r0
 8008992:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                                            &seqTimeoutMilliSecs);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 8008996:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800899a:	2b00      	cmp	r3, #0
 800899c:	d103      	bne.n	80089a6 <VL53L0X_StaticInit+0x2b2>
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, PreRangeTimeoutMicroSecs,
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
                                       seqTimeoutMilliSecs);
  }

  /* Store final-range timeout */
  if (Status == VL53L0X_ERROR_NONE) {
 80089a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d109      	bne.n	80089c2 <VL53L0X_StaticInit+0x2ce>
    Status = VL53L0X_GetSequenceStepTimeout(
 80089ae:	f107 030c 	add.w	r3, r7, #12
 80089b2:	461a      	mov	r2, r3
 80089b4:	2104      	movs	r1, #4
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fa8a 	bl	8008ed0 <VL53L0X_GetSequenceStepTimeout>
 80089bc:	4603      	mov	r3, r0
 80089be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        Dev, VL53L0X_SEQUENCESTEP_FINAL_RANGE, &seqTimeoutMilliSecs);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 80089c2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d103      	bne.n	80089d2 <VL53L0X_StaticInit+0x2de>
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, FinalRangeTimeoutMicroSecs,
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
                                       seqTimeoutMilliSecs);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 80089d2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3770      	adds	r7, #112	; 0x70
 80089da:	46bd      	mov	sp, r7
 80089dc:	bdb0      	pop	{r4, r5, r7, pc}
 80089de:	bf00      	nop
 80089e0:	200001d0 	.word	0x200001d0

080089e4 <VL53L0X_GetDeviceParameters>:
  return Status;
}

VL53L0X_Error
VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
                            VL53L0X_DeviceParameters_t *pDeviceParameters) {
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089ee:	2300      	movs	r3, #0
 80089f0:	73fb      	strb	r3, [r7, #15]
  int i;

  LOG_FUNCTION_START("");

  Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	4619      	mov	r1, r3
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f8b0 	bl	8008b5c <VL53L0X_GetDeviceMode>
 80089fc:	4603      	mov	r3, r0
 80089fe:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 8008a00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d107      	bne.n	8008a18 <VL53L0X_GetDeviceParameters+0x34>
    Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	3308      	adds	r3, #8
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fa9e 	bl	8008f50 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8008a14:	4603      	mov	r3, r0
 8008a16:	73fb      	strb	r3, [r7, #15]
        Dev, &(pDeviceParameters->InterMeasurementPeriodMilliSeconds));

  if (Status == VL53L0X_ERROR_NONE)
 8008a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d102      	bne.n	8008a26 <VL53L0X_GetDeviceParameters+0x42>
    pDeviceParameters->XTalkCompensationEnable = 0;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	2200      	movs	r2, #0
 8008a24:	731a      	strb	r2, [r3, #12]

  if (Status == VL53L0X_ERROR_NONE)
 8008a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d107      	bne.n	8008a3e <VL53L0X_GetDeviceParameters+0x5a>
    Status = VL53L0X_GetXTalkCompensationRateMegaCps(
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	3310      	adds	r3, #16
 8008a32:	4619      	mov	r1, r3
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fad4 	bl	8008fe2 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	73fb      	strb	r3, [r7, #15]
        Dev, &(pDeviceParameters->XTalkCompensationRateMegaCps));

  if (Status == VL53L0X_ERROR_NONE)
 8008a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d107      	bne.n	8008a56 <VL53L0X_GetDeviceParameters+0x72>
    Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	3314      	adds	r3, #20
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f7ff fcc8 	bl	80083e2 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8008a52:	4603      	mov	r3, r0
 8008a54:	73fb      	strb	r3, [r7, #15]
        Dev, &(pDeviceParameters->RangeOffsetMicroMeters));

  if (Status == VL53L0X_ERROR_NONE) {
 8008a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d133      	bne.n	8008ac6 <VL53L0X_GetDeviceParameters+0xe2>
    for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008a5e:	2300      	movs	r3, #0
 8008a60:	60bb      	str	r3, [r7, #8]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	2b05      	cmp	r3, #5
 8008a66:	dc2e      	bgt.n	8008ac6 <VL53L0X_GetDeviceParameters+0xe2>
      /* get first the values, then the enables.
       * VL53L0X_GetLimitCheckValue will modify the enable
       * flags
       */
      if (Status == VL53L0X_ERROR_NONE) {
 8008a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d127      	bne.n	8008ac0 <VL53L0X_GetDeviceParameters+0xdc>
        Status |= VL53L0X_GetLimitCheckValue(
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	b299      	uxth	r1, r3
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	3308      	adds	r3, #8
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	683a      	ldr	r2, [r7, #0]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	3304      	adds	r3, #4
 8008a80:	461a      	mov	r2, r3
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fbf2 	bl	800926c <VL53L0X_GetLimitCheckValue>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	73fb      	strb	r3, [r7, #15]
            Dev, i, &(pDeviceParameters->LimitChecksValue[i]));
      } else {
        break;
      }
      if (Status == VL53L0X_ERROR_NONE) {
 8008a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d114      	bne.n	8008ac4 <VL53L0X_GetDeviceParameters+0xe0>
        Status |= VL53L0X_GetLimitCheckEnable(
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	b299      	uxth	r1, r3
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	3318      	adds	r3, #24
 8008aa2:	683a      	ldr	r2, [r7, #0]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 fb59 	bl	8009160 <VL53L0X_GetLimitCheckEnable>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	7bfb      	ldrb	r3, [r7, #15]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	3301      	adds	r3, #1
 8008abc:	60bb      	str	r3, [r7, #8]
 8008abe:	e7d0      	b.n	8008a62 <VL53L0X_GetDeviceParameters+0x7e>
        break;
 8008ac0:	bf00      	nop
 8008ac2:	e000      	b.n	8008ac6 <VL53L0X_GetDeviceParameters+0xe2>
            Dev, i, &(pDeviceParameters->LimitChecksEnable[i]));
      } else {
        break;
 8008ac4:	bf00      	nop
      }
    }
  }

  if (Status == VL53L0X_ERROR_NONE) {
 8008ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d107      	bne.n	8008ade <VL53L0X_GetDeviceParameters+0xfa>
    Status = VL53L0X_GetWrapAroundCheckEnable(
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	333c      	adds	r3, #60	; 0x3c
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fc57 	bl	8009388 <VL53L0X_GetWrapAroundCheckEnable>
 8008ada:	4603      	mov	r3, r0
 8008adc:	73fb      	strb	r3, [r7, #15]
        Dev, &(pDeviceParameters->WrapAroundCheckEnable));
  }

  /* Need to be done at the end as it uses VCSELPulsePeriod */
  if (Status == VL53L0X_ERROR_NONE) {
 8008ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d107      	bne.n	8008af6 <VL53L0X_GetDeviceParameters+0x112>
    Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	3304      	adds	r3, #4
 8008aea:	4619      	mov	r1, r3
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f87a 	bl	8008be6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8008af2:	4603      	mov	r3, r0
 8008af4:	73fb      	strb	r3, [r7, #15]
        Dev, &(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8008af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
	...

08008b04 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev,
                                    VL53L0X_DeviceModes DeviceMode) {
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	70fb      	strb	r3, [r7, #3]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b10:	2300      	movs	r3, #0
 8008b12:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_START("%d", (int)DeviceMode);

  switch (DeviceMode) {
 8008b14:	78fb      	ldrb	r3, [r7, #3]
 8008b16:	2b15      	cmp	r3, #21
 8008b18:	bf8c      	ite	hi
 8008b1a:	2201      	movhi	r2, #1
 8008b1c:	2200      	movls	r2, #0
 8008b1e:	b2d2      	uxtb	r2, r2
 8008b20:	2a00      	cmp	r2, #0
 8008b22:	d10e      	bne.n	8008b42 <VL53L0X_SetDeviceMode+0x3e>
 8008b24:	2201      	movs	r2, #1
 8008b26:	409a      	lsls	r2, r3
 8008b28:	4b0b      	ldr	r3, [pc, #44]	; (8008b58 <VL53L0X_SetDeviceMode+0x54>)
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	bf14      	ite	ne
 8008b30:	2301      	movne	r3, #1
 8008b32:	2300      	moveq	r3, #0
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d003      	beq.n	8008b42 <VL53L0X_SetDeviceMode+0x3e>
  case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
  case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
  case VL53L0X_DEVICEMODE_GPIO_DRIVE:
  case VL53L0X_DEVICEMODE_GPIO_OSC:
    /* Supported modes */
    VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	78fa      	ldrb	r2, [r7, #3]
 8008b3e:	741a      	strb	r2, [r3, #16]
    break;
 8008b40:	e001      	b.n	8008b46 <VL53L0X_SetDeviceMode+0x42>
  default:
    /* Unsupported mode */
    Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8008b42:	23f8      	movs	r3, #248	; 0xf8
 8008b44:	73fb      	strb	r3, [r7, #15]
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8008b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3714      	adds	r7, #20
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	0030000b 	.word	0x0030000b

08008b5c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
                                    VL53L0X_DeviceModes *pDeviceMode) {
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b66:	2300      	movs	r3, #0
 8008b68:	73fb      	strb	r3, [r7, #15]
  LOG_FUNCTION_START("");

  VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	7c1a      	ldrb	r2, [r3, #16]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	701a      	strb	r2, [r3, #0]

  LOG_FUNCTION_END(Status);
  return Status;
 8008b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <VL53L0X_GetFractionEnable>:

  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled) {
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b084      	sub	sp, #16
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
 8008b8a:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	73fb      	strb	r3, [r7, #15]
  LOG_FUNCTION_START("");

  Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8008b90:	683a      	ldr	r2, [r7, #0]
 8008b92:	2109      	movs	r1, #9
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f004 fa00 	bl	800cf9a <VL53L0X_RdByte>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 8008b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d106      	bne.n	8008bb4 <VL53L0X_GetFractionEnable+0x32>
    *pEnabled = (*pEnabled & 1);
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	f003 0301 	and.w	r3, r3, #1
 8008bae:	b2da      	uxtb	r2, r3
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	701a      	strb	r2, [r3, #0]

  LOG_FUNCTION_END(Status);
  return Status;
 8008bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(
    VL53L0X_DEV Dev, uint32_t MeasurementTimingBudgetMicroSeconds) {
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	73fb      	strb	r3, [r7, #15]
  LOG_FUNCTION_START("");

  Status = VL53L0X_set_measurement_timing_budget_micro_seconds(
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f002 ff25 	bl	800ba20 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	73fb      	strb	r3, [r7, #15]
      Dev, MeasurementTimingBudgetMicroSeconds);

  LOG_FUNCTION_END(Status);

  return Status;
 8008bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(
    VL53L0X_DEV Dev, uint32_t *pMeasurementTimingBudgetMicroSeconds) {
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b084      	sub	sp, #16
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	73fb      	strb	r3, [r7, #15]
  LOG_FUNCTION_START("");

  Status = VL53L0X_get_measurement_timing_budget_micro_seconds(
 8008bf4:	6839      	ldr	r1, [r7, #0]
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f002 fff2 	bl	800bbe0 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	73fb      	strb	r3, [r7, #15]
      Dev, pMeasurementTimingBudgetMicroSeconds);

  LOG_FUNCTION_END(Status);
  return Status;
 8008c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <VL53L0X_GetVcselPulsePeriod>:
  return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
                                          VL53L0X_VcselPeriod VcselPeriodType,
                                          uint8_t *pVCSELPulsePeriodPCLK) {
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	460b      	mov	r3, r1
 8008c16:	607a      	str	r2, [r7, #4]
 8008c18:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	75fb      	strb	r3, [r7, #23]
  LOG_FUNCTION_START("");

  Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8008c1e:	7afb      	ldrb	r3, [r7, #11]
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	4619      	mov	r1, r3
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f002 fec4 	bl	800b9b2 <VL53L0X_get_vcsel_pulse_period>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	75fb      	strb	r3, [r7, #23]
                                          pVCSELPulsePeriodPCLK);

  LOG_FUNCTION_END(Status);
  return Status;
 8008c2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
	...

08008c3c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error
VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
                              VL53L0X_SequenceStepId SequenceStepId,
                              uint8_t SequenceStepEnabled) {
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	460b      	mov	r3, r1
 8008c46:	70fb      	strb	r3, [r7, #3]
 8008c48:	4613      	mov	r3, r2
 8008c4a:	70bb      	strb	r3, [r7, #2]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	75fb      	strb	r3, [r7, #23]
  uint8_t SequenceConfig = 0;
 8008c50:	2300      	movs	r3, #0
 8008c52:	73fb      	strb	r3, [r7, #15]
  uint8_t SequenceConfigNew = 0;
 8008c54:	2300      	movs	r3, #0
 8008c56:	75bb      	strb	r3, [r7, #22]
  uint32_t MeasurementTimingBudgetMicroSeconds;
  LOG_FUNCTION_START("");

  Status =
      VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &SequenceConfig);
 8008c58:	f107 030f 	add.w	r3, r7, #15
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	2101      	movs	r1, #1
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f004 f99a 	bl	800cf9a <VL53L0X_RdByte>
 8008c66:	4603      	mov	r3, r0
 8008c68:	75fb      	strb	r3, [r7, #23]

  SequenceConfigNew = SequenceConfig;
 8008c6a:	7bfb      	ldrb	r3, [r7, #15]
 8008c6c:	75bb      	strb	r3, [r7, #22]

  if (Status == VL53L0X_ERROR_NONE) {
 8008c6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d159      	bne.n	8008d2a <VL53L0X_SetSequenceStepEnable+0xee>
    if (SequenceStepEnabled == 1) {
 8008c76:	78bb      	ldrb	r3, [r7, #2]
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d12b      	bne.n	8008cd4 <VL53L0X_SetSequenceStepEnable+0x98>

      /* Enable requested sequence step
       */
      switch (SequenceStepId) {
 8008c7c:	78fb      	ldrb	r3, [r7, #3]
 8008c7e:	2b04      	cmp	r3, #4
 8008c80:	d825      	bhi.n	8008cce <VL53L0X_SetSequenceStepEnable+0x92>
 8008c82:	a201      	add	r2, pc, #4	; (adr r2, 8008c88 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8008c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c88:	08008c9d 	.word	0x08008c9d
 8008c8c:	08008ca7 	.word	0x08008ca7
 8008c90:	08008cb1 	.word	0x08008cb1
 8008c94:	08008cbb 	.word	0x08008cbb
 8008c98:	08008cc5 	.word	0x08008cc5
      case VL53L0X_SEQUENCESTEP_TCC:
        SequenceConfigNew |= 0x10;
 8008c9c:	7dbb      	ldrb	r3, [r7, #22]
 8008c9e:	f043 0310 	orr.w	r3, r3, #16
 8008ca2:	75bb      	strb	r3, [r7, #22]
        break;
 8008ca4:	e041      	b.n	8008d2a <VL53L0X_SetSequenceStepEnable+0xee>
      case VL53L0X_SEQUENCESTEP_DSS:
        SequenceConfigNew |= 0x28;
 8008ca6:	7dbb      	ldrb	r3, [r7, #22]
 8008ca8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8008cac:	75bb      	strb	r3, [r7, #22]
        break;
 8008cae:	e03c      	b.n	8008d2a <VL53L0X_SetSequenceStepEnable+0xee>
      case VL53L0X_SEQUENCESTEP_MSRC:
        SequenceConfigNew |= 0x04;
 8008cb0:	7dbb      	ldrb	r3, [r7, #22]
 8008cb2:	f043 0304 	orr.w	r3, r3, #4
 8008cb6:	75bb      	strb	r3, [r7, #22]
        break;
 8008cb8:	e037      	b.n	8008d2a <VL53L0X_SetSequenceStepEnable+0xee>
      case VL53L0X_SEQUENCESTEP_PRE_RANGE:
        SequenceConfigNew |= 0x40;
 8008cba:	7dbb      	ldrb	r3, [r7, #22]
 8008cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cc0:	75bb      	strb	r3, [r7, #22]
        break;
 8008cc2:	e032      	b.n	8008d2a <VL53L0X_SetSequenceStepEnable+0xee>
      case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
        SequenceConfigNew |= 0x80;
 8008cc4:	7dbb      	ldrb	r3, [r7, #22]
 8008cc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008cca:	75bb      	strb	r3, [r7, #22]
        break;
 8008ccc:	e02d      	b.n	8008d2a <VL53L0X_SetSequenceStepEnable+0xee>
      default:
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008cce:	23fc      	movs	r3, #252	; 0xfc
 8008cd0:	75fb      	strb	r3, [r7, #23]
 8008cd2:	e02a      	b.n	8008d2a <VL53L0X_SetSequenceStepEnable+0xee>
      }
    } else {
      /* Disable requested sequence step
       */
      switch (SequenceStepId) {
 8008cd4:	78fb      	ldrb	r3, [r7, #3]
 8008cd6:	2b04      	cmp	r3, #4
 8008cd8:	d825      	bhi.n	8008d26 <VL53L0X_SetSequenceStepEnable+0xea>
 8008cda:	a201      	add	r2, pc, #4	; (adr r2, 8008ce0 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8008cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce0:	08008cf5 	.word	0x08008cf5
 8008ce4:	08008cff 	.word	0x08008cff
 8008ce8:	08008d09 	.word	0x08008d09
 8008cec:	08008d13 	.word	0x08008d13
 8008cf0:	08008d1d 	.word	0x08008d1d
      case VL53L0X_SEQUENCESTEP_TCC:
        SequenceConfigNew &= 0xef;
 8008cf4:	7dbb      	ldrb	r3, [r7, #22]
 8008cf6:	f023 0310 	bic.w	r3, r3, #16
 8008cfa:	75bb      	strb	r3, [r7, #22]
        break;
 8008cfc:	e015      	b.n	8008d2a <VL53L0X_SetSequenceStepEnable+0xee>
      case VL53L0X_SEQUENCESTEP_DSS:
        SequenceConfigNew &= 0xd7;
 8008cfe:	7dbb      	ldrb	r3, [r7, #22]
 8008d00:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8008d04:	75bb      	strb	r3, [r7, #22]
        break;
 8008d06:	e010      	b.n	8008d2a <VL53L0X_SetSequenceStepEnable+0xee>
      case VL53L0X_SEQUENCESTEP_MSRC:
        SequenceConfigNew &= 0xfb;
 8008d08:	7dbb      	ldrb	r3, [r7, #22]
 8008d0a:	f023 0304 	bic.w	r3, r3, #4
 8008d0e:	75bb      	strb	r3, [r7, #22]
        break;
 8008d10:	e00b      	b.n	8008d2a <VL53L0X_SetSequenceStepEnable+0xee>
      case VL53L0X_SEQUENCESTEP_PRE_RANGE:
        SequenceConfigNew &= 0xbf;
 8008d12:	7dbb      	ldrb	r3, [r7, #22]
 8008d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d18:	75bb      	strb	r3, [r7, #22]
        break;
 8008d1a:	e006      	b.n	8008d2a <VL53L0X_SetSequenceStepEnable+0xee>
      case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
        SequenceConfigNew &= 0x7f;
 8008d1c:	7dbb      	ldrb	r3, [r7, #22]
 8008d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d22:	75bb      	strb	r3, [r7, #22]
        break;
 8008d24:	e001      	b.n	8008d2a <VL53L0X_SetSequenceStepEnable+0xee>
      default:
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008d26:	23fc      	movs	r3, #252	; 0xfc
 8008d28:	75fb      	strb	r3, [r7, #23]
      }
    }
  }

  if (SequenceConfigNew != SequenceConfig) {
 8008d2a:	7bfb      	ldrb	r3, [r7, #15]
 8008d2c:	7dba      	ldrb	r2, [r7, #22]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d01e      	beq.n	8008d70 <VL53L0X_SetSequenceStepEnable+0x134>
    /* Apply New Setting */
    if (Status == VL53L0X_ERROR_NONE) {
 8008d32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d107      	bne.n	8008d4a <VL53L0X_SetSequenceStepEnable+0x10e>
      Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008d3a:	7dbb      	ldrb	r3, [r7, #22]
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	2101      	movs	r1, #1
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f004 f8a4 	bl	800ce8e <VL53L0X_WrByte>
 8008d46:	4603      	mov	r3, r0
 8008d48:	75fb      	strb	r3, [r7, #23]
                              SequenceConfigNew);
    }
    if (Status == VL53L0X_ERROR_NONE)
 8008d4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d103      	bne.n	8008d5a <VL53L0X_SetSequenceStepEnable+0x11e>
      PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	7dba      	ldrb	r2, [r7, #22]
 8008d56:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

    /* Recalculate timing budget */
    if (Status == VL53L0X_ERROR_NONE) {
 8008d5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d106      	bne.n	8008d70 <VL53L0X_SetSequenceStepEnable+0x134>
      VL53L0X_GETPARAMETERFIELD(Dev, MeasurementTimingBudgetMicroSeconds,
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	695b      	ldr	r3, [r3, #20]
 8008d66:	613b      	str	r3, [r7, #16]
                                MeasurementTimingBudgetMicroSeconds);

      VL53L0X_SetMeasurementTimingBudgetMicroSeconds(
 8008d68:	6939      	ldr	r1, [r7, #16]
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f7ff ff28 	bl	8008bc0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
    }
  }

  LOG_FUNCTION_END(Status);

  return Status;
 8008d70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3718      	adds	r7, #24
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
                                    VL53L0X_SequenceStepId SequenceStepId,
                                    uint8_t SequenceConfig,
                                    uint8_t *pSequenceStepEnabled) {
 8008d7c:	b480      	push	{r7}
 8008d7e:	b087      	sub	sp, #28
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	607b      	str	r3, [r7, #4]
 8008d86:	460b      	mov	r3, r1
 8008d88:	72fb      	strb	r3, [r7, #11]
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	72bb      	strb	r3, [r7, #10]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	75fb      	strb	r3, [r7, #23]
  *pSequenceStepEnabled = 0;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	701a      	strb	r2, [r3, #0]
  LOG_FUNCTION_START("");

  switch (SequenceStepId) {
 8008d98:	7afb      	ldrb	r3, [r7, #11]
 8008d9a:	2b04      	cmp	r3, #4
 8008d9c:	d836      	bhi.n	8008e0c <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh+0x90>
 8008d9e:	a201      	add	r2, pc, #4	; (adr r2, 8008da4 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh+0x28>)
 8008da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da4:	08008db9 	.word	0x08008db9
 8008da8:	08008dcb 	.word	0x08008dcb
 8008dac:	08008ddd 	.word	0x08008ddd
 8008db0:	08008def 	.word	0x08008def
 8008db4:	08008e01 	.word	0x08008e01
  case VL53L0X_SEQUENCESTEP_TCC:
    *pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8008db8:	7abb      	ldrb	r3, [r7, #10]
 8008dba:	091b      	lsrs	r3, r3, #4
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	f003 0301 	and.w	r3, r3, #1
 8008dc2:	b2da      	uxtb	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	701a      	strb	r2, [r3, #0]
    break;
 8008dc8:	e022      	b.n	8008e10 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh+0x94>
  case VL53L0X_SEQUENCESTEP_DSS:
    *pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8008dca:	7abb      	ldrb	r3, [r7, #10]
 8008dcc:	08db      	lsrs	r3, r3, #3
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	f003 0301 	and.w	r3, r3, #1
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	701a      	strb	r2, [r3, #0]
    break;
 8008dda:	e019      	b.n	8008e10 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh+0x94>
  case VL53L0X_SEQUENCESTEP_MSRC:
    *pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8008ddc:	7abb      	ldrb	r3, [r7, #10]
 8008dde:	089b      	lsrs	r3, r3, #2
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	f003 0301 	and.w	r3, r3, #1
 8008de6:	b2da      	uxtb	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	701a      	strb	r2, [r3, #0]
    break;
 8008dec:	e010      	b.n	8008e10 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh+0x94>
  case VL53L0X_SEQUENCESTEP_PRE_RANGE:
    *pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8008dee:	7abb      	ldrb	r3, [r7, #10]
 8008df0:	099b      	lsrs	r3, r3, #6
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	f003 0301 	and.w	r3, r3, #1
 8008df8:	b2da      	uxtb	r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	701a      	strb	r2, [r3, #0]
    break;
 8008dfe:	e007      	b.n	8008e10 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh+0x94>
  case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
    *pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8008e00:	7abb      	ldrb	r3, [r7, #10]
 8008e02:	09db      	lsrs	r3, r3, #7
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	701a      	strb	r2, [r3, #0]
    break;
 8008e0a:	e001      	b.n	8008e10 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh+0x94>
  default:
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008e0c:	23fc      	movs	r3, #252	; 0xfc
 8008e0e:	75fb      	strb	r3, [r7, #23]
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8008e10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	371c      	adds	r7, #28
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <VL53L0X_GetSequenceStepEnables>:
  return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(
    VL53L0X_DEV Dev,
    VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps) {
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	73fb      	strb	r3, [r7, #15]
  uint8_t SequenceConfig = 0;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	73bb      	strb	r3, [r7, #14]
  LOG_FUNCTION_START("");

  Status =
      VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &SequenceConfig);
 8008e32:	f107 030e 	add.w	r3, r7, #14
 8008e36:	461a      	mov	r2, r3
 8008e38:	2101      	movs	r1, #1
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f004 f8ad 	bl	800cf9a <VL53L0X_RdByte>
 8008e40:	4603      	mov	r3, r0
 8008e42:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE) {
 8008e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d107      	bne.n	8008e5c <VL53L0X_GetSequenceStepEnables+0x3c>
    Status =
        sequence_step_enabled(Dev, VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
 8008e4c:	7bba      	ldrb	r2, [r7, #14]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	2100      	movs	r1, #0
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f7ff ff92 	bl	8008d7c <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	73fb      	strb	r3, [r7, #15]
                              &pSchedulerSequenceSteps->TccOn);
  }
  if (Status == VL53L0X_ERROR_NONE) {
 8008e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d108      	bne.n	8008e76 <VL53L0X_GetSequenceStepEnables+0x56>
    Status =
        sequence_step_enabled(Dev, VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
 8008e64:	7bba      	ldrb	r2, [r7, #14]
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	3302      	adds	r3, #2
 8008e6a:	2101      	movs	r1, #1
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f7ff ff85 	bl	8008d7c <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh>
 8008e72:	4603      	mov	r3, r0
 8008e74:	73fb      	strb	r3, [r7, #15]
                              &pSchedulerSequenceSteps->DssOn);
  }
  if (Status == VL53L0X_ERROR_NONE) {
 8008e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d108      	bne.n	8008e90 <VL53L0X_GetSequenceStepEnables+0x70>
    Status =
        sequence_step_enabled(Dev, VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
 8008e7e:	7bba      	ldrb	r2, [r7, #14]
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	3301      	adds	r3, #1
 8008e84:	2102      	movs	r1, #2
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7ff ff78 	bl	8008d7c <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	73fb      	strb	r3, [r7, #15]
                              &pSchedulerSequenceSteps->MsrcOn);
  }
  if (Status == VL53L0X_ERROR_NONE) {
 8008e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d108      	bne.n	8008eaa <VL53L0X_GetSequenceStepEnables+0x8a>
    Status = sequence_step_enabled(Dev, VL53L0X_SEQUENCESTEP_PRE_RANGE,
 8008e98:	7bba      	ldrb	r2, [r7, #14]
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	3303      	adds	r3, #3
 8008e9e:	2103      	movs	r1, #3
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f7ff ff6b 	bl	8008d7c <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	73fb      	strb	r3, [r7, #15]
                                   SequenceConfig,
                                   &pSchedulerSequenceSteps->PreRangeOn);
  }
  if (Status == VL53L0X_ERROR_NONE) {
 8008eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d108      	bne.n	8008ec4 <VL53L0X_GetSequenceStepEnables+0xa4>
    Status = sequence_step_enabled(Dev, VL53L0X_SEQUENCESTEP_FINAL_RANGE,
 8008eb2:	7bba      	ldrb	r2, [r7, #14]
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	3304      	adds	r3, #4
 8008eb8:	2104      	movs	r1, #4
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f7ff ff5e 	bl	8008d7c <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	73fb      	strb	r3, [r7, #15]
                                   SequenceConfig,
                                   &pSchedulerSequenceSteps->FinalRangeOn);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8008ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <VL53L0X_GetSequenceStepTimeout>:
}

VL53L0X_Error
VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
                               VL53L0X_SequenceStepId SequenceStepId,
                               FixPoint1616_t *pTimeOutMilliSecs) {
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b088      	sub	sp, #32
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	607a      	str	r2, [r7, #4]
 8008edc:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	77fb      	strb	r3, [r7, #31]
  uint32_t TimeoutMicroSeconds;
  uint32_t WholeNumber_ms = 0;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	61bb      	str	r3, [r7, #24]
  uint32_t Fraction_ms = 0;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	617b      	str	r3, [r7, #20]
  LOG_FUNCTION_START("");

  Status = get_sequence_step_timeout(Dev, SequenceStepId, &TimeoutMicroSeconds);
 8008eea:	f107 0210 	add.w	r2, r7, #16
 8008eee:	7afb      	ldrb	r3, [r7, #11]
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f002 fb88 	bl	800b608 <get_sequence_step_timeout>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	77fb      	strb	r3, [r7, #31]
  if (Status == VL53L0X_ERROR_NONE) {
 8008efc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d11c      	bne.n	8008f3e <VL53L0X_GetSequenceStepTimeout+0x6e>
    WholeNumber_ms = TimeoutMicroSeconds / 1000;
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	4a11      	ldr	r2, [pc, #68]	; (8008f4c <VL53L0X_GetSequenceStepTimeout+0x7c>)
 8008f08:	fba2 2303 	umull	r2, r3, r2, r3
 8008f0c:	099b      	lsrs	r3, r3, #6
 8008f0e:	61bb      	str	r3, [r7, #24]
    Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
 8008f10:	693a      	ldr	r2, [r7, #16]
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008f18:	fb01 f303 	mul.w	r3, r1, r3
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	617b      	str	r3, [r7, #20]
    *pTimeOutMilliSecs =
        (WholeNumber_ms << 16) + (((Fraction_ms * 0xffff) + 500) / 1000);
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	0419      	lsls	r1, r3, #16
 8008f24:	697a      	ldr	r2, [r7, #20]
 8008f26:	4613      	mov	r3, r2
 8008f28:	041b      	lsls	r3, r3, #16
 8008f2a:	1a9b      	subs	r3, r3, r2
 8008f2c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008f30:	4a06      	ldr	r2, [pc, #24]	; (8008f4c <VL53L0X_GetSequenceStepTimeout+0x7c>)
 8008f32:	fba2 2303 	umull	r2, r3, r2, r3
 8008f36:	099b      	lsrs	r3, r3, #6
 8008f38:	18ca      	adds	r2, r1, r3
    *pTimeOutMilliSecs =
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	601a      	str	r2, [r3, #0]
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8008f3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3720      	adds	r7, #32
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	10624dd3 	.word	0x10624dd3

08008f50 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(
    VL53L0X_DEV Dev, uint32_t *pInterMeasurementPeriodMilliSeconds) {
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t IMPeriodMilliSeconds;

  LOG_FUNCTION_START("");

  Status =
      VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL, &osc_calibrate_val);
 8008f5e:	f107 030c 	add.w	r3, r7, #12
 8008f62:	461a      	mov	r2, r3
 8008f64:	21f8      	movs	r1, #248	; 0xf8
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f004 f838 	bl	800cfdc <VL53L0X_RdWord>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE) {
 8008f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d108      	bne.n	8008f8a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
    Status = VL53L0X_RdDWord(Dev, VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
 8008f78:	f107 0308 	add.w	r3, r7, #8
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	2104      	movs	r1, #4
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f004 f84c 	bl	800d01e <VL53L0X_RdDWord>
 8008f86:	4603      	mov	r3, r0
 8008f88:	73fb      	strb	r3, [r7, #15]
                             &IMPeriodMilliSeconds);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 8008f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d10c      	bne.n	8008fac <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
    if (osc_calibrate_val != 0) {
 8008f92:	89bb      	ldrh	r3, [r7, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d005      	beq.n	8008fa4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
      *pInterMeasurementPeriodMilliSeconds =
          IMPeriodMilliSeconds / osc_calibrate_val;
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	89ba      	ldrh	r2, [r7, #12]
 8008f9c:	fbb3 f2f2 	udiv	r2, r3, r2
      *pInterMeasurementPeriodMilliSeconds =
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	601a      	str	r2, [r3, #0]
    }
    VL53L0X_SETPARAMETERFIELD(Dev, InterMeasurementPeriodMilliSeconds,
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	619a      	str	r2, [r3, #24]
                              *pInterMeasurementPeriodMilliSeconds);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8008fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <VL53L0X_GetXTalkCompensationEnable>:
  return Status;
}

VL53L0X_Error
VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
                                   uint8_t *pXTalkCompensationEnable) {
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	73fb      	strb	r3, [r7, #15]
  uint8_t Temp8;
  LOG_FUNCTION_START("");

  VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	7f1b      	ldrb	r3, [r3, #28]
 8008fca:	73bb      	strb	r3, [r7, #14]
  *pXTalkCompensationEnable = Temp8;
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	7bba      	ldrb	r2, [r7, #14]
 8008fd0:	701a      	strb	r2, [r3, #0]

  LOG_FUNCTION_END(Status);
  return Status;
 8008fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <VL53L0X_GetXTalkCompensationRateMegaCps>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(
    VL53L0X_DEV Dev, FixPoint1616_t *pXTalkCompensationRateMegaCps) {
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b086      	sub	sp, #24
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
 8008fea:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008fec:	2300      	movs	r3, #0
 8008fee:	75fb      	strb	r3, [r7, #23]
  FixPoint1616_t TempFix1616;

  LOG_FUNCTION_START("");

  Status =
      VL53L0X_RdWord(Dev, VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS,
 8008ff0:	f107 030e 	add.w	r3, r7, #14
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	2120      	movs	r1, #32
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f003 ffef 	bl	800cfdc <VL53L0X_RdWord>
 8008ffe:	4603      	mov	r3, r0
 8009000:	75fb      	strb	r3, [r7, #23]
                     (uint16_t *)&Value);
  if (Status == VL53L0X_ERROR_NONE) {
 8009002:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d118      	bne.n	800903c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
    if (Value == 0) {
 800900a:	89fb      	ldrh	r3, [r7, #14]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d109      	bne.n	8009024 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
      /* the Xtalk is disabled return value from memory */
      VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, TempFix1616);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6a1b      	ldr	r3, [r3, #32]
 8009014:	613b      	str	r3, [r7, #16]
      *pXTalkCompensationRateMegaCps = TempFix1616;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	693a      	ldr	r2, [r7, #16]
 800901a:	601a      	str	r2, [r3, #0]
      VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable, 0);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	771a      	strb	r2, [r3, #28]
 8009022:	e00b      	b.n	800903c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
    } else {
      TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8009024:	89fb      	ldrh	r3, [r7, #14]
 8009026:	00db      	lsls	r3, r3, #3
 8009028:	613b      	str	r3, [r7, #16]
      *pXTalkCompensationRateMegaCps = TempFix1616;
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	601a      	str	r2, [r3, #0]
      VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, TempFix1616);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	693a      	ldr	r2, [r7, #16]
 8009034:	621a      	str	r2, [r3, #32]
      VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable, 1);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2201      	movs	r2, #1
 800903a:	771a      	strb	r2, [r3, #28]
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800903c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009040:	4618      	mov	r0, r3
 8009042:	3718      	adds	r7, #24
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <VL53L0X_SetLimitCheckEnable>:
  return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev,
                                          uint16_t LimitCheckId,
                                          uint8_t LimitCheckEnable) {
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	460b      	mov	r3, r1
 8009052:	807b      	strh	r3, [r7, #2]
 8009054:	4613      	mov	r3, r2
 8009056:	707b      	strb	r3, [r7, #1]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009058:	2300      	movs	r3, #0
 800905a:	75fb      	strb	r3, [r7, #23]
  FixPoint1616_t TempFix1616 = 0;
 800905c:	2300      	movs	r3, #0
 800905e:	613b      	str	r3, [r7, #16]
  uint8_t LimitCheckEnableInt = 0;
 8009060:	2300      	movs	r3, #0
 8009062:	73fb      	strb	r3, [r7, #15]
  uint8_t LimitCheckDisable = 0;
 8009064:	2300      	movs	r3, #0
 8009066:	73bb      	strb	r3, [r7, #14]
  uint8_t Temp8;

  LOG_FUNCTION_START("");

  if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009068:	887b      	ldrh	r3, [r7, #2]
 800906a:	2b05      	cmp	r3, #5
 800906c:	d902      	bls.n	8009074 <VL53L0X_SetLimitCheckEnable+0x2c>
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 800906e:	23fc      	movs	r3, #252	; 0xfc
 8009070:	75fb      	strb	r3, [r7, #23]
 8009072:	e05b      	b.n	800912c <VL53L0X_SetLimitCheckEnable+0xe4>
  } else {
    if (LimitCheckEnable == 0) {
 8009074:	787b      	ldrb	r3, [r7, #1]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d106      	bne.n	8009088 <VL53L0X_SetLimitCheckEnable+0x40>
      TempFix1616 = 0;
 800907a:	2300      	movs	r3, #0
 800907c:	613b      	str	r3, [r7, #16]
      LimitCheckEnableInt = 0;
 800907e:	2300      	movs	r3, #0
 8009080:	73fb      	strb	r3, [r7, #15]
      LimitCheckDisable = 1;
 8009082:	2301      	movs	r3, #1
 8009084:	73bb      	strb	r3, [r7, #14]
 8009086:	e00a      	b.n	800909e <VL53L0X_SetLimitCheckEnable+0x56>

    } else {
      VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId,
 8009088:	887b      	ldrh	r3, [r7, #2]
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	330c      	adds	r3, #12
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4413      	add	r3, r2
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	613b      	str	r3, [r7, #16]
                                     TempFix1616);
      LimitCheckDisable = 0;
 8009096:	2300      	movs	r3, #0
 8009098:	73bb      	strb	r3, [r7, #14]
      /* this to be sure to have either 0 or 1 */
      LimitCheckEnableInt = 1;
 800909a:	2301      	movs	r3, #1
 800909c:	73fb      	strb	r3, [r7, #15]
    }

    switch (LimitCheckId) {
 800909e:	887b      	ldrh	r3, [r7, #2]
 80090a0:	2b05      	cmp	r3, #5
 80090a2:	d841      	bhi.n	8009128 <VL53L0X_SetLimitCheckEnable+0xe0>
 80090a4:	a201      	add	r2, pc, #4	; (adr r2, 80090ac <VL53L0X_SetLimitCheckEnable+0x64>)
 80090a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090aa:	bf00      	nop
 80090ac:	080090c5 	.word	0x080090c5
 80090b0:	080090cf 	.word	0x080090cf
 80090b4:	080090e5 	.word	0x080090e5
 80090b8:	080090ef 	.word	0x080090ef
 80090bc:	080090f9 	.word	0x080090f9
 80090c0:	08009111 	.word	0x08009111

    case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
      /* internal computation: */
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	7bfa      	ldrb	r2, [r7, #15]
 80090c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                     VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
                                     LimitCheckEnableInt);

      break;
 80090cc:	e02e      	b.n	800912c <VL53L0X_SetLimitCheckEnable+0xe4>

    case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

      Status = VL53L0X_WrWord(
          Dev, VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
          VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	0a5b      	lsrs	r3, r3, #9
      Status = VL53L0X_WrWord(
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	461a      	mov	r2, r3
 80090d6:	2144      	movs	r1, #68	; 0x44
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f003 fefa 	bl	800ced2 <VL53L0X_WrWord>
 80090de:	4603      	mov	r3, r0
 80090e0:	75fb      	strb	r3, [r7, #23]

      break;
 80090e2:	e023      	b.n	800912c <VL53L0X_SetLimitCheckEnable+0xe4>

    case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

      /* internal computation: */
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	7bfa      	ldrb	r2, [r7, #15]
 80090e8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
                                     VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
                                     LimitCheckEnableInt);

      break;
 80090ec:	e01e      	b.n	800912c <VL53L0X_SetLimitCheckEnable+0xe4>

    case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

      /* internal computation: */
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	7bfa      	ldrb	r2, [r7, #15]
 80090f2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                     VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
                                     LimitCheckEnableInt);

      break;
 80090f6:	e019      	b.n	800912c <VL53L0X_SetLimitCheckEnable+0xe4>

    case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

      Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80090f8:	7bbb      	ldrb	r3, [r7, #14]
 80090fa:	005b      	lsls	r3, r3, #1
 80090fc:	737b      	strb	r3, [r7, #13]
      Status =
          VL53L0X_UpdateByte(Dev, VL53L0X_REG_MSRC_CONFIG_CONTROL, 0xFE, Temp8);
 80090fe:	7b7b      	ldrb	r3, [r7, #13]
 8009100:	22fe      	movs	r2, #254	; 0xfe
 8009102:	2160      	movs	r1, #96	; 0x60
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f003 ff06 	bl	800cf16 <VL53L0X_UpdateByte>
 800910a:	4603      	mov	r3, r0
 800910c:	75fb      	strb	r3, [r7, #23]

      break;
 800910e:	e00d      	b.n	800912c <VL53L0X_SetLimitCheckEnable+0xe4>

    case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

      Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8009110:	7bbb      	ldrb	r3, [r7, #14]
 8009112:	011b      	lsls	r3, r3, #4
 8009114:	737b      	strb	r3, [r7, #13]
      Status =
          VL53L0X_UpdateByte(Dev, VL53L0X_REG_MSRC_CONFIG_CONTROL, 0xEF, Temp8);
 8009116:	7b7b      	ldrb	r3, [r7, #13]
 8009118:	22ef      	movs	r2, #239	; 0xef
 800911a:	2160      	movs	r1, #96	; 0x60
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f003 fefa 	bl	800cf16 <VL53L0X_UpdateByte>
 8009122:	4603      	mov	r3, r0
 8009124:	75fb      	strb	r3, [r7, #23]

      break;
 8009126:	e001      	b.n	800912c <VL53L0X_SetLimitCheckEnable+0xe4>

    default:
      Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009128:	23fc      	movs	r3, #252	; 0xfc
 800912a:	75fb      	strb	r3, [r7, #23]
    }
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800912c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10f      	bne.n	8009154 <VL53L0X_SetLimitCheckEnable+0x10c>
    if (LimitCheckEnable == 0) {
 8009134:	787b      	ldrb	r3, [r7, #1]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d106      	bne.n	8009148 <VL53L0X_SetLimitCheckEnable+0x100>
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, 0);
 800913a:	887b      	ldrh	r3, [r7, #2]
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	4413      	add	r3, r2
 8009140:	2200      	movs	r2, #0
 8009142:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009146:	e005      	b.n	8009154 <VL53L0X_SetLimitCheckEnable+0x10c>
    } else {
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, 1);
 8009148:	887b      	ldrh	r3, [r7, #2]
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	4413      	add	r3, r2
 800914e:	2201      	movs	r2, #1
 8009150:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8009154:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3718      	adds	r7, #24
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev,
                                          uint16_t LimitCheckId,
                                          uint8_t *pLimitCheckEnable) {
 8009160:	b480      	push	{r7}
 8009162:	b087      	sub	sp, #28
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	460b      	mov	r3, r1
 800916a:	607a      	str	r2, [r7, #4]
 800916c:	817b      	strh	r3, [r7, #10]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800916e:	2300      	movs	r3, #0
 8009170:	75fb      	strb	r3, [r7, #23]
  uint8_t Temp8;

  LOG_FUNCTION_START("");

  if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009172:	897b      	ldrh	r3, [r7, #10]
 8009174:	2b05      	cmp	r3, #5
 8009176:	d905      	bls.n	8009184 <VL53L0X_GetLimitCheckEnable+0x24>
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009178:	23fc      	movs	r3, #252	; 0xfc
 800917a:	75fb      	strb	r3, [r7, #23]
    *pLimitCheckEnable = 0;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	701a      	strb	r2, [r3, #0]
 8009182:	e008      	b.n	8009196 <VL53L0X_GetLimitCheckEnable+0x36>
  } else {
    VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, Temp8);
 8009184:	897b      	ldrh	r3, [r7, #10]
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	4413      	add	r3, r2
 800918a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800918e:	75bb      	strb	r3, [r7, #22]
    *pLimitCheckEnable = Temp8;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	7dba      	ldrb	r2, [r7, #22]
 8009194:	701a      	strb	r2, [r3, #0]
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8009196:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800919a:	4618      	mov	r0, r3
 800919c:	371c      	adds	r7, #28
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
	...

080091a8 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
                                         FixPoint1616_t LimitCheckValue) {
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b086      	sub	sp, #24
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	460b      	mov	r3, r1
 80091b2:	607a      	str	r2, [r7, #4]
 80091b4:	817b      	strh	r3, [r7, #10]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80091b6:	2300      	movs	r3, #0
 80091b8:	75fb      	strb	r3, [r7, #23]
  uint8_t Temp8;

  LOG_FUNCTION_START("");

  VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, Temp8);
 80091ba:	897b      	ldrh	r3, [r7, #10]
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	4413      	add	r3, r2
 80091c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091c4:	75bb      	strb	r3, [r7, #22]

  if (Temp8 == 0) { /* disabled write only internal value */
 80091c6:	7dbb      	ldrb	r3, [r7, #22]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d107      	bne.n	80091dc <VL53L0X_SetLimitCheckValue+0x34>
    VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId,
 80091cc:	897b      	ldrh	r3, [r7, #10]
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	330c      	adds	r3, #12
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	4413      	add	r3, r2
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	605a      	str	r2, [r3, #4]
 80091da:	e040      	b.n	800925e <VL53L0X_SetLimitCheckValue+0xb6>
                                   LimitCheckValue);
  } else {

    switch (LimitCheckId) {
 80091dc:	897b      	ldrh	r3, [r7, #10]
 80091de:	2b05      	cmp	r3, #5
 80091e0:	d830      	bhi.n	8009244 <VL53L0X_SetLimitCheckValue+0x9c>
 80091e2:	a201      	add	r2, pc, #4	; (adr r2, 80091e8 <VL53L0X_SetLimitCheckValue+0x40>)
 80091e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e8:	08009201 	.word	0x08009201
 80091ec:	08009209 	.word	0x08009209
 80091f0:	0800921f 	.word	0x0800921f
 80091f4:	08009227 	.word	0x08009227
 80091f8:	0800922f 	.word	0x0800922f
 80091fc:	0800922f 	.word	0x0800922f

    case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
      /* internal computation: */
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	635a      	str	r2, [r3, #52]	; 0x34
                                     VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
                                     LimitCheckValue);
      break;
 8009206:	e01f      	b.n	8009248 <VL53L0X_SetLimitCheckValue+0xa0>

    case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

      Status = VL53L0X_WrWord(
          Dev, VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
          VL53L0X_FIXPOINT1616TOFIXPOINT97(LimitCheckValue));
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	0a5b      	lsrs	r3, r3, #9
      Status = VL53L0X_WrWord(
 800920c:	b29b      	uxth	r3, r3
 800920e:	461a      	mov	r2, r3
 8009210:	2144      	movs	r1, #68	; 0x44
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f003 fe5d 	bl	800ced2 <VL53L0X_WrWord>
 8009218:	4603      	mov	r3, r0
 800921a:	75fb      	strb	r3, [r7, #23]

      break;
 800921c:	e014      	b.n	8009248 <VL53L0X_SetLimitCheckValue+0xa0>

    case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

      /* internal computation: */
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	63da      	str	r2, [r3, #60]	; 0x3c
                                     VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
                                     LimitCheckValue);

      break;
 8009224:	e010      	b.n	8009248 <VL53L0X_SetLimitCheckValue+0xa0>

    case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

      /* internal computation: */
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	641a      	str	r2, [r3, #64]	; 0x40
                                     VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
                                     LimitCheckValue);

      break;
 800922c:	e00c      	b.n	8009248 <VL53L0X_SetLimitCheckValue+0xa0>
    case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
    case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

      Status =
          VL53L0X_WrWord(Dev, VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
                         VL53L0X_FIXPOINT1616TOFIXPOINT97(LimitCheckValue));
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	0a5b      	lsrs	r3, r3, #9
          VL53L0X_WrWord(Dev, VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
 8009232:	b29b      	uxth	r3, r3
 8009234:	461a      	mov	r2, r3
 8009236:	2164      	movs	r1, #100	; 0x64
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	f003 fe4a 	bl	800ced2 <VL53L0X_WrWord>
 800923e:	4603      	mov	r3, r0
 8009240:	75fb      	strb	r3, [r7, #23]

      break;
 8009242:	e001      	b.n	8009248 <VL53L0X_SetLimitCheckValue+0xa0>

    default:
      Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009244:	23fc      	movs	r3, #252	; 0xfc
 8009246:	75fb      	strb	r3, [r7, #23]
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8009248:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d106      	bne.n	800925e <VL53L0X_SetLimitCheckValue+0xb6>
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId,
 8009250:	897b      	ldrh	r3, [r7, #10]
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	330c      	adds	r3, #12
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4413      	add	r3, r2
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	605a      	str	r2, [r3, #4]
                                     LimitCheckValue);
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800925e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3718      	adds	r7, #24
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop

0800926c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
                                         FixPoint1616_t *pLimitCheckValue) {
 800926c:	b580      	push	{r7, lr}
 800926e:	b088      	sub	sp, #32
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	460b      	mov	r3, r1
 8009276:	607a      	str	r2, [r7, #4]
 8009278:	817b      	strh	r3, [r7, #10]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800927a:	2300      	movs	r3, #0
 800927c:	77fb      	strb	r3, [r7, #31]
  uint8_t EnableZeroValue = 0;
 800927e:	2300      	movs	r3, #0
 8009280:	77bb      	strb	r3, [r7, #30]
  uint16_t Temp16;
  FixPoint1616_t TempFix1616;

  LOG_FUNCTION_START("");

  switch (LimitCheckId) {
 8009282:	897b      	ldrh	r3, [r7, #10]
 8009284:	2b05      	cmp	r3, #5
 8009286:	d847      	bhi.n	8009318 <VL53L0X_GetLimitCheckValue+0xac>
 8009288:	a201      	add	r2, pc, #4	; (adr r2, 8009290 <VL53L0X_GetLimitCheckValue+0x24>)
 800928a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928e:	bf00      	nop
 8009290:	080092a9 	.word	0x080092a9
 8009294:	080092b5 	.word	0x080092b5
 8009298:	080092db 	.word	0x080092db
 800929c:	080092e7 	.word	0x080092e7
 80092a0:	080092f3 	.word	0x080092f3
 80092a4:	080092f3 	.word	0x080092f3

  case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
    /* internal computation: */
    VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ac:	61bb      	str	r3, [r7, #24]
                                   VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
                                   TempFix1616);
    EnableZeroValue = 0;
 80092ae:	2300      	movs	r3, #0
 80092b0:	77bb      	strb	r3, [r7, #30]
    break;
 80092b2:	e033      	b.n	800931c <VL53L0X_GetLimitCheckValue+0xb0>

  case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
    Status = VL53L0X_RdWord(
 80092b4:	f107 0316 	add.w	r3, r7, #22
 80092b8:	461a      	mov	r2, r3
 80092ba:	2144      	movs	r1, #68	; 0x44
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f003 fe8d 	bl	800cfdc <VL53L0X_RdWord>
 80092c2:	4603      	mov	r3, r0
 80092c4:	77fb      	strb	r3, [r7, #31]
        Dev, VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, &Temp16);
    if (Status == VL53L0X_ERROR_NONE)
 80092c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d102      	bne.n	80092d4 <VL53L0X_GetLimitCheckValue+0x68>
      TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80092ce:	8afb      	ldrh	r3, [r7, #22]
 80092d0:	025b      	lsls	r3, r3, #9
 80092d2:	61bb      	str	r3, [r7, #24]

    EnableZeroValue = 1;
 80092d4:	2301      	movs	r3, #1
 80092d6:	77bb      	strb	r3, [r7, #30]
    break;
 80092d8:	e020      	b.n	800931c <VL53L0X_GetLimitCheckValue+0xb0>

  case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
    /* internal computation: */
    VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092de:	61bb      	str	r3, [r7, #24]
                                   VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
                                   TempFix1616);
    EnableZeroValue = 0;
 80092e0:	2300      	movs	r3, #0
 80092e2:	77bb      	strb	r3, [r7, #30]
    break;
 80092e4:	e01a      	b.n	800931c <VL53L0X_GetLimitCheckValue+0xb0>

  case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
    /* internal computation: */
    VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ea:	61bb      	str	r3, [r7, #24]
                                   VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
                                   TempFix1616);
    EnableZeroValue = 0;
 80092ec:	2300      	movs	r3, #0
 80092ee:	77bb      	strb	r3, [r7, #30]
    break;
 80092f0:	e014      	b.n	800931c <VL53L0X_GetLimitCheckValue+0xb0>

  case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
  case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
    Status = VL53L0X_RdWord(Dev, VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
 80092f2:	f107 0316 	add.w	r3, r7, #22
 80092f6:	461a      	mov	r2, r3
 80092f8:	2164      	movs	r1, #100	; 0x64
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f003 fe6e 	bl	800cfdc <VL53L0X_RdWord>
 8009300:	4603      	mov	r3, r0
 8009302:	77fb      	strb	r3, [r7, #31]
                            &Temp16);
    if (Status == VL53L0X_ERROR_NONE)
 8009304:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d102      	bne.n	8009312 <VL53L0X_GetLimitCheckValue+0xa6>
      TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800930c:	8afb      	ldrh	r3, [r7, #22]
 800930e:	025b      	lsls	r3, r3, #9
 8009310:	61bb      	str	r3, [r7, #24]

    EnableZeroValue = 0;
 8009312:	2300      	movs	r3, #0
 8009314:	77bb      	strb	r3, [r7, #30]
    break;
 8009316:	e001      	b.n	800931c <VL53L0X_GetLimitCheckValue+0xb0>

  default:
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009318:	23fc      	movs	r3, #252	; 0xfc
 800931a:	77fb      	strb	r3, [r7, #31]
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800931c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d12a      	bne.n	800937a <VL53L0X_GetLimitCheckValue+0x10e>

    if (EnableZeroValue == 1) {
 8009324:	7fbb      	ldrb	r3, [r7, #30]
 8009326:	2b01      	cmp	r3, #1
 8009328:	d124      	bne.n	8009374 <VL53L0X_GetLimitCheckValue+0x108>

      if (TempFix1616 == 0) {
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d110      	bne.n	8009352 <VL53L0X_GetLimitCheckValue+0xe6>
        /* disabled: return value from memory */
        VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId,
 8009330:	897b      	ldrh	r3, [r7, #10]
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	330c      	adds	r3, #12
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	4413      	add	r3, r2
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	61bb      	str	r3, [r7, #24]
                                       TempFix1616);
        *pLimitCheckValue = TempFix1616;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	69ba      	ldr	r2, [r7, #24]
 8009342:	601a      	str	r2, [r3, #0]
        VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, 0);
 8009344:	897b      	ldrh	r3, [r7, #10]
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	4413      	add	r3, r2
 800934a:	2200      	movs	r2, #0
 800934c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009350:	e013      	b.n	800937a <VL53L0X_GetLimitCheckValue+0x10e>
      } else {
        *pLimitCheckValue = TempFix1616;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	69ba      	ldr	r2, [r7, #24]
 8009356:	601a      	str	r2, [r3, #0]
        VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId,
 8009358:	897b      	ldrh	r3, [r7, #10]
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	330c      	adds	r3, #12
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	69ba      	ldr	r2, [r7, #24]
 8009364:	605a      	str	r2, [r3, #4]
                                       TempFix1616);
        VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, 1);
 8009366:	897b      	ldrh	r3, [r7, #10]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	4413      	add	r3, r2
 800936c:	2201      	movs	r2, #1
 800936e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009372:	e002      	b.n	800937a <VL53L0X_GetLimitCheckValue+0x10e>
      }
    } else {
      *pLimitCheckValue = TempFix1616;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	69ba      	ldr	r2, [r7, #24]
 8009378:	601a      	str	r2, [r3, #0]
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800937a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3720      	adds	r7, #32
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop

08009388 <VL53L0X_GetWrapAroundCheckEnable>:
  return Status;
}

VL53L0X_Error
VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
                                 uint8_t *pWrapAroundCheckEnable) {
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009392:	2300      	movs	r3, #0
 8009394:	73fb      	strb	r3, [r7, #15]
  uint8_t data;

  LOG_FUNCTION_START("");

  Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8009396:	f107 030e 	add.w	r3, r7, #14
 800939a:	461a      	mov	r2, r3
 800939c:	2101      	movs	r1, #1
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f003 fdfb 	bl	800cf9a <VL53L0X_RdByte>
 80093a4:	4603      	mov	r3, r0
 80093a6:	73fb      	strb	r3, [r7, #15]
  if (Status == VL53L0X_ERROR_NONE) {
 80093a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d10e      	bne.n	80093ce <VL53L0X_GetWrapAroundCheckEnable+0x46>
    PALDevDataSet(Dev, SequenceConfig, data);
 80093b0:	7bba      	ldrb	r2, [r7, #14]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    if (data & (0x01 << 7))
 80093b8:	7bbb      	ldrb	r3, [r7, #14]
 80093ba:	b25b      	sxtb	r3, r3
 80093bc:	2b00      	cmp	r3, #0
 80093be:	da03      	bge.n	80093c8 <VL53L0X_GetWrapAroundCheckEnable+0x40>
      *pWrapAroundCheckEnable = 0x01;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	2201      	movs	r2, #1
 80093c4:	701a      	strb	r2, [r3, #0]
 80093c6:	e002      	b.n	80093ce <VL53L0X_GetWrapAroundCheckEnable+0x46>
    else
      *pWrapAroundCheckEnable = 0x00;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	2200      	movs	r2, #0
 80093cc:	701a      	strb	r2, [r3, #0]
  }
  if (Status == VL53L0X_ERROR_NONE) {
 80093ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d104      	bne.n	80093e0 <VL53L0X_GetWrapAroundCheckEnable+0x58>
    VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	781a      	ldrb	r2, [r3, #0]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                              *pWrapAroundCheckEnable);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 80093e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3710      	adds	r7, #16
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <VL53L0X_PerformSingleMeasurement>:
}

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev) {
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093f4:	2300      	movs	r3, #0
 80093f6:	73fb      	strb	r3, [r7, #15]
  VL53L0X_DeviceModes DeviceMode;

  LOG_FUNCTION_START("");

  /* Get Current DeviceMode */
  Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80093f8:	f107 030e 	add.w	r3, r7, #14
 80093fc:	4619      	mov	r1, r3
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f7ff fbac 	bl	8008b5c <VL53L0X_GetDeviceMode>
 8009404:	4603      	mov	r3, r0
 8009406:	73fb      	strb	r3, [r7, #15]

  /* Start immediately to run a single ranging measurement in case of
   * single ranging or single histogram */
  if (Status == VL53L0X_ERROR_NONE &&
 8009408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d107      	bne.n	8009420 <VL53L0X_PerformSingleMeasurement+0x34>
      DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8009410:	7bbb      	ldrb	r3, [r7, #14]
  if (Status == VL53L0X_ERROR_NONE &&
 8009412:	2b00      	cmp	r3, #0
 8009414:	d104      	bne.n	8009420 <VL53L0X_PerformSingleMeasurement+0x34>
    Status = VL53L0X_StartMeasurement(Dev);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 f898 	bl	800954c <VL53L0X_StartMeasurement>
 800941c:	4603      	mov	r3, r0
 800941e:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 8009420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d104      	bne.n	8009432 <VL53L0X_PerformSingleMeasurement+0x46>
    Status = VL53L0X_measurement_poll_for_completion(Dev);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f001 fabd 	bl	800a9a8 <VL53L0X_measurement_poll_for_completion>
 800942e:	4603      	mov	r3, r0
 8009430:	73fb      	strb	r3, [r7, #15]

  /* Change PAL State in case of single ranging or single histogram */
  if (Status == VL53L0X_ERROR_NONE &&
 8009432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d106      	bne.n	8009448 <VL53L0X_PerformSingleMeasurement+0x5c>
      DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800943a:	7bbb      	ldrb	r3, [r7, #14]
  if (Status == VL53L0X_ERROR_NONE &&
 800943c:	2b00      	cmp	r3, #0
 800943e:	d103      	bne.n	8009448 <VL53L0X_PerformSingleMeasurement+0x5c>
    PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2203      	movs	r2, #3
 8009444:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132

  LOG_FUNCTION_END(Status);
  return Status;
 8009448:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800944c:	4618      	mov	r0, r3
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <VL53L0X_PerformRefCalibration>:
  return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev,
                                            uint8_t *pVhvSettings,
                                            uint8_t *pPhaseCal) {
 8009454:	b580      	push	{r7, lr}
 8009456:	b086      	sub	sp, #24
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	607a      	str	r2, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009460:	2300      	movs	r3, #0
 8009462:	75fb      	strb	r3, [r7, #23]
  LOG_FUNCTION_START("");

  Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings, pPhaseCal, 1);
 8009464:	2301      	movs	r3, #1
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	68b9      	ldr	r1, [r7, #8]
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f001 fa4a 	bl	800a904 <VL53L0X_perform_ref_calibration>
 8009470:	4603      	mov	r3, r0
 8009472:	75fb      	strb	r3, [r7, #23]

  LOG_FUNCTION_END(Status);
  return Status;
 8009474:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009478:	4618      	mov	r0, r3
 800947a:	3718      	adds	r7, #24
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
                                                    uint8_t StartNotStopFlag) {
 8009480:	b580      	push	{r7, lr}
 8009482:	b086      	sub	sp, #24
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	460b      	mov	r3, r1
 800948a:	70fb      	strb	r3, [r7, #3]
  uint8_t InterruptConfig;
  FixPoint1616_t ThresholdLow;
  FixPoint1616_t ThresholdHigh;
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800948c:	2300      	movs	r3, #0
 800948e:	75fb      	strb	r3, [r7, #23]

  InterruptConfig =
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8009496:	75bb      	strb	r3, [r7, #22]
      VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Pin0GpioFunctionality);

  if ((InterruptConfig == VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8009498:	7dbb      	ldrb	r3, [r7, #22]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d005      	beq.n	80094aa <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0x2a>
 800949e:	7dbb      	ldrb	r3, [r7, #22]
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d002      	beq.n	80094aa <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0x2a>
      (InterruptConfig == VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80094a4:	7dbb      	ldrb	r3, [r7, #22]
 80094a6:	2b03      	cmp	r3, #3
 80094a8:	d147      	bne.n	800953a <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0xba>
      (InterruptConfig == VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

    Status = VL53L0X_GetInterruptThresholds(
 80094aa:	f107 030c 	add.w	r3, r7, #12
 80094ae:	f107 0210 	add.w	r2, r7, #16
 80094b2:	2101      	movs	r1, #1
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 fbc1 	bl	8009c3c <VL53L0X_GetInterruptThresholds>
 80094ba:	4603      	mov	r3, r0
 80094bc:	75fb      	strb	r3, [r7, #23]
        Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING, &ThresholdLow,
        &ThresholdHigh);

    if (((ThresholdLow > 255 * 65536) || (ThresholdHigh > 255 * 65536)) &&
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80094c4:	d803      	bhi.n	80094ce <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0x4e>
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80094cc:	d935      	bls.n	800953a <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0xba>
 80094ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d131      	bne.n	800953a <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0xba>
        (Status == VL53L0X_ERROR_NONE)) {

      if (StartNotStopFlag != 0) {
 80094d6:	78fb      	ldrb	r3, [r7, #3]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d006      	beq.n	80094ea <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0x6a>
        Status = VL53L0X_load_tuning_settings(Dev, InterruptThresholdSettings);
 80094dc:	491a      	ldr	r1, [pc, #104]	; (8009548 <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0xc8>)
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f002 fc30 	bl	800bd44 <VL53L0X_load_tuning_settings>
 80094e4:	4603      	mov	r3, r0
 80094e6:	75fb      	strb	r3, [r7, #23]
 80094e8:	e027      	b.n	800953a <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0xba>
      } else {
        Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80094ea:	2204      	movs	r2, #4
 80094ec:	21ff      	movs	r1, #255	; 0xff
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f003 fccd 	bl	800ce8e <VL53L0X_WrByte>
 80094f4:	4603      	mov	r3, r0
 80094f6:	461a      	mov	r2, r3
 80094f8:	7dfb      	ldrb	r3, [r7, #23]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	75fb      	strb	r3, [r7, #23]
        Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80094fe:	2200      	movs	r2, #0
 8009500:	2170      	movs	r1, #112	; 0x70
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f003 fcc3 	bl	800ce8e <VL53L0X_WrByte>
 8009508:	4603      	mov	r3, r0
 800950a:	461a      	mov	r2, r3
 800950c:	7dfb      	ldrb	r3, [r7, #23]
 800950e:	4313      	orrs	r3, r2
 8009510:	75fb      	strb	r3, [r7, #23]
        Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009512:	2200      	movs	r2, #0
 8009514:	21ff      	movs	r1, #255	; 0xff
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f003 fcb9 	bl	800ce8e <VL53L0X_WrByte>
 800951c:	4603      	mov	r3, r0
 800951e:	461a      	mov	r2, r3
 8009520:	7dfb      	ldrb	r3, [r7, #23]
 8009522:	4313      	orrs	r3, r2
 8009524:	75fb      	strb	r3, [r7, #23]
        Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009526:	2200      	movs	r2, #0
 8009528:	2180      	movs	r1, #128	; 0x80
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f003 fcaf 	bl	800ce8e <VL53L0X_WrByte>
 8009530:	4603      	mov	r3, r0
 8009532:	461a      	mov	r2, r3
 8009534:	7dfb      	ldrb	r3, [r7, #23]
 8009536:	4313      	orrs	r3, r2
 8009538:	75fb      	strb	r3, [r7, #23]
      }
    }
  }

  return Status;
 800953a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3718      	adds	r7, #24
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	20000018 	.word	0x20000018

0800954c <VL53L0X_StartMeasurement>:

VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev) {
 800954c:	b580      	push	{r7, lr}
 800954e:	b086      	sub	sp, #24
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009554:	2300      	movs	r3, #0
 8009556:	75fb      	strb	r3, [r7, #23]
  VL53L0X_DeviceModes DeviceMode;
  uint8_t Byte;
  uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8009558:	2301      	movs	r3, #1
 800955a:	73fb      	strb	r3, [r7, #15]
  uint32_t LoopNb;
  LOG_FUNCTION_START("");

  /* Get Current DeviceMode */
  VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800955c:	f107 030e 	add.w	r3, r7, #14
 8009560:	4619      	mov	r1, r3
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7ff fafa 	bl	8008b5c <VL53L0X_GetDeviceMode>

  Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009568:	2201      	movs	r2, #1
 800956a:	2180      	movs	r1, #128	; 0x80
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f003 fc8e 	bl	800ce8e <VL53L0X_WrByte>
 8009572:	4603      	mov	r3, r0
 8009574:	75fb      	strb	r3, [r7, #23]
  Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009576:	2201      	movs	r2, #1
 8009578:	21ff      	movs	r1, #255	; 0xff
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f003 fc87 	bl	800ce8e <VL53L0X_WrByte>
 8009580:	4603      	mov	r3, r0
 8009582:	75fb      	strb	r3, [r7, #23]
  Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009584:	2200      	movs	r2, #0
 8009586:	2100      	movs	r1, #0
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f003 fc80 	bl	800ce8e <VL53L0X_WrByte>
 800958e:	4603      	mov	r3, r0
 8009590:	75fb      	strb	r3, [r7, #23]
  Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8009598:	461a      	mov	r2, r3
 800959a:	2191      	movs	r1, #145	; 0x91
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f003 fc76 	bl	800ce8e <VL53L0X_WrByte>
 80095a2:	4603      	mov	r3, r0
 80095a4:	75fb      	strb	r3, [r7, #23]
  Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80095a6:	2201      	movs	r2, #1
 80095a8:	2100      	movs	r1, #0
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f003 fc6f 	bl	800ce8e <VL53L0X_WrByte>
 80095b0:	4603      	mov	r3, r0
 80095b2:	75fb      	strb	r3, [r7, #23]
  Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80095b4:	2200      	movs	r2, #0
 80095b6:	21ff      	movs	r1, #255	; 0xff
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f003 fc68 	bl	800ce8e <VL53L0X_WrByte>
 80095be:	4603      	mov	r3, r0
 80095c0:	75fb      	strb	r3, [r7, #23]
  Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80095c2:	2200      	movs	r2, #0
 80095c4:	2180      	movs	r1, #128	; 0x80
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f003 fc61 	bl	800ce8e <VL53L0X_WrByte>
 80095cc:	4603      	mov	r3, r0
 80095ce:	75fb      	strb	r3, [r7, #23]

  switch (DeviceMode) {
 80095d0:	7bbb      	ldrb	r3, [r7, #14]
 80095d2:	2b03      	cmp	r3, #3
 80095d4:	d053      	beq.n	800967e <VL53L0X_StartMeasurement+0x132>
 80095d6:	2b03      	cmp	r3, #3
 80095d8:	dc6b      	bgt.n	80096b2 <VL53L0X_StartMeasurement+0x166>
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d002      	beq.n	80095e4 <VL53L0X_StartMeasurement+0x98>
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d033      	beq.n	800964a <VL53L0X_StartMeasurement+0xfe>
 80095e2:	e066      	b.n	80096b2 <VL53L0X_StartMeasurement+0x166>
  case VL53L0X_DEVICEMODE_SINGLE_RANGING:
    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80095e4:	2201      	movs	r2, #1
 80095e6:	2100      	movs	r1, #0
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f003 fc50 	bl	800ce8e <VL53L0X_WrByte>
 80095ee:	4603      	mov	r3, r0
 80095f0:	75fb      	strb	r3, [r7, #23]

    Byte = StartStopByte;
 80095f2:	7bfb      	ldrb	r3, [r7, #15]
 80095f4:	737b      	strb	r3, [r7, #13]
    if (Status == VL53L0X_ERROR_NONE) {
 80095f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d15c      	bne.n	80096b8 <VL53L0X_StartMeasurement+0x16c>
      /* Wait until start bit has been cleared */
      LoopNb = 0;
 80095fe:	2300      	movs	r3, #0
 8009600:	613b      	str	r3, [r7, #16]
      do {
        if (LoopNb > 0)
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d008      	beq.n	800961a <VL53L0X_StartMeasurement+0xce>
          Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSRANGE_START, &Byte);
 8009608:	f107 030d 	add.w	r3, r7, #13
 800960c:	461a      	mov	r2, r3
 800960e:	2100      	movs	r1, #0
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f003 fcc2 	bl	800cf9a <VL53L0X_RdByte>
 8009616:	4603      	mov	r3, r0
 8009618:	75fb      	strb	r3, [r7, #23]
        LoopNb = LoopNb + 1;
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	3301      	adds	r3, #1
 800961e:	613b      	str	r3, [r7, #16]
      } while (((Byte & StartStopByte) == StartStopByte) &&
 8009620:	7b7a      	ldrb	r2, [r7, #13]
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	4013      	ands	r3, r2
 8009626:	b2db      	uxtb	r3, r3
               (Status == VL53L0X_ERROR_NONE) &&
 8009628:	7bfa      	ldrb	r2, [r7, #15]
 800962a:	429a      	cmp	r2, r3
 800962c:	d107      	bne.n	800963e <VL53L0X_StartMeasurement+0xf2>
      } while (((Byte & StartStopByte) == StartStopByte) &&
 800962e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d103      	bne.n	800963e <VL53L0X_StartMeasurement+0xf2>
               (Status == VL53L0X_ERROR_NONE) &&
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	2bc7      	cmp	r3, #199	; 0xc7
 800963a:	d800      	bhi.n	800963e <VL53L0X_StartMeasurement+0xf2>
      do {
 800963c:	e7e1      	b.n	8009602 <VL53L0X_StartMeasurement+0xb6>
               (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));

      if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	2bc7      	cmp	r3, #199	; 0xc7
 8009642:	d939      	bls.n	80096b8 <VL53L0X_StartMeasurement+0x16c>
        Status = VL53L0X_ERROR_TIME_OUT;
 8009644:	23f9      	movs	r3, #249	; 0xf9
 8009646:	75fb      	strb	r3, [r7, #23]
    }

    break;
 8009648:	e036      	b.n	80096b8 <VL53L0X_StartMeasurement+0x16c>
  case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
    /* Back-to-back mode */

    /* Check if need to apply interrupt settings */
    if (Status == VL53L0X_ERROR_NONE)
 800964a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d105      	bne.n	800965e <VL53L0X_StartMeasurement+0x112>
      Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8009652:	2101      	movs	r1, #1
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f7ff ff13 	bl	8009480 <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th>
 800965a:	4603      	mov	r3, r0
 800965c:	75fb      	strb	r3, [r7, #23]

    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800965e:	2202      	movs	r2, #2
 8009660:	2100      	movs	r1, #0
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f003 fc13 	bl	800ce8e <VL53L0X_WrByte>
 8009668:	4603      	mov	r3, r0
 800966a:	75fb      	strb	r3, [r7, #23]
                            VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
    if (Status == VL53L0X_ERROR_NONE) {
 800966c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d123      	bne.n	80096bc <VL53L0X_StartMeasurement+0x170>
      /* Set PAL State to Running */
      PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2204      	movs	r2, #4
 8009678:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    }
    break;
 800967c:	e01e      	b.n	80096bc <VL53L0X_StartMeasurement+0x170>
  case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
    /* Continuous mode */
    /* Check if need to apply interrupt settings */
    if (Status == VL53L0X_ERROR_NONE)
 800967e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d105      	bne.n	8009692 <VL53L0X_StartMeasurement+0x146>
      Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8009686:	2101      	movs	r1, #1
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f7ff fef9 	bl	8009480 <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th>
 800968e:	4603      	mov	r3, r0
 8009690:	75fb      	strb	r3, [r7, #23]

    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8009692:	2204      	movs	r2, #4
 8009694:	2100      	movs	r1, #0
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f003 fbf9 	bl	800ce8e <VL53L0X_WrByte>
 800969c:	4603      	mov	r3, r0
 800969e:	75fb      	strb	r3, [r7, #23]
                            VL53L0X_REG_SYSRANGE_MODE_TIMED);

    if (Status == VL53L0X_ERROR_NONE) {
 80096a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d10b      	bne.n	80096c0 <VL53L0X_StartMeasurement+0x174>
      /* Set PAL State to Running */
      PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2204      	movs	r2, #4
 80096ac:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    }
    break;
 80096b0:	e006      	b.n	80096c0 <VL53L0X_StartMeasurement+0x174>
  default:
    /* Selected mode not supported */
    Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80096b2:	23f8      	movs	r3, #248	; 0xf8
 80096b4:	75fb      	strb	r3, [r7, #23]
 80096b6:	e004      	b.n	80096c2 <VL53L0X_StartMeasurement+0x176>
    break;
 80096b8:	bf00      	nop
 80096ba:	e002      	b.n	80096c2 <VL53L0X_StartMeasurement+0x176>
    break;
 80096bc:	bf00      	nop
 80096be:	e000      	b.n	80096c2 <VL53L0X_StartMeasurement+0x176>
    break;
 80096c0:	bf00      	nop
  }

  LOG_FUNCTION_END(Status);
  return Status;
 80096c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <VL53L0X_GetMeasurementDataReady>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
                                              uint8_t *pMeasurementDataReady) {
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b084      	sub	sp, #16
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
 80096d6:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80096d8:	2300      	movs	r3, #0
 80096da:	73fb      	strb	r3, [r7, #15]
  uint8_t SysRangeStatusRegister;
  uint8_t InterruptConfig;
  uint32_t InterruptMask;
  LOG_FUNCTION_START("");

  InterruptConfig =
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80096e2:	73bb      	strb	r3, [r7, #14]
      VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Pin0GpioFunctionality);

  if (InterruptConfig == VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
 80096e4:	7bbb      	ldrb	r3, [r7, #14]
 80096e6:	2b04      	cmp	r3, #4
 80096e8:	d112      	bne.n	8009710 <VL53L0X_GetMeasurementDataReady+0x42>
    Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80096ea:	f107 0308 	add.w	r3, r7, #8
 80096ee:	4619      	mov	r1, r3
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 fb1a 	bl	8009d2a <VL53L0X_GetInterruptMaskStatus>
 80096f6:	4603      	mov	r3, r0
 80096f8:	73fb      	strb	r3, [r7, #15]
    if (InterruptMask == VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	2b04      	cmp	r3, #4
 80096fe:	d103      	bne.n	8009708 <VL53L0X_GetMeasurementDataReady+0x3a>
      *pMeasurementDataReady = 1;
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	2201      	movs	r2, #1
 8009704:	701a      	strb	r2, [r3, #0]
 8009706:	e01c      	b.n	8009742 <VL53L0X_GetMeasurementDataReady+0x74>
    else
      *pMeasurementDataReady = 0;
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	2200      	movs	r2, #0
 800970c:	701a      	strb	r2, [r3, #0]
 800970e:	e018      	b.n	8009742 <VL53L0X_GetMeasurementDataReady+0x74>
  } else {
    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8009710:	f107 030d 	add.w	r3, r7, #13
 8009714:	461a      	mov	r2, r3
 8009716:	2114      	movs	r1, #20
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f003 fc3e 	bl	800cf9a <VL53L0X_RdByte>
 800971e:	4603      	mov	r3, r0
 8009720:	73fb      	strb	r3, [r7, #15]
                            &SysRangeStatusRegister);
    if (Status == VL53L0X_ERROR_NONE) {
 8009722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d10b      	bne.n	8009742 <VL53L0X_GetMeasurementDataReady+0x74>
      if (SysRangeStatusRegister & 0x01)
 800972a:	7b7b      	ldrb	r3, [r7, #13]
 800972c:	f003 0301 	and.w	r3, r3, #1
 8009730:	2b00      	cmp	r3, #0
 8009732:	d003      	beq.n	800973c <VL53L0X_GetMeasurementDataReady+0x6e>
        *pMeasurementDataReady = 1;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	2201      	movs	r2, #1
 8009738:	701a      	strb	r2, [r3, #0]
 800973a:	e002      	b.n	8009742 <VL53L0X_GetMeasurementDataReady+0x74>
      else
        *pMeasurementDataReady = 0;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	2200      	movs	r2, #0
 8009740:	701a      	strb	r2, [r3, #0]
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8009742:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
	...

08009750 <VL53L0X_GetRangingMeasurementData>:
  return Status;
}

VL53L0X_Error VL53L0X_GetRangingMeasurementData(
    VL53L0X_DEV Dev,
    VL53L0X_RangingMeasurementData_t *pRangingMeasurementData) {
 8009750:	b5b0      	push	{r4, r5, r7, lr}
 8009752:	b096      	sub	sp, #88	; 0x58
 8009754:	af02      	add	r7, sp, #8
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800975a:	2300      	movs	r3, #0
 800975c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
   * use multi read even if some registers are not useful, result will
   * be more efficient
   * start reading at 0x14 dec20
   * end reading at 0x21 dec33 total 14 bytes to read
   */
  Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8009760:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009764:	230c      	movs	r3, #12
 8009766:	2114      	movs	r1, #20
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f003 fb67 	bl	800ce3c <VL53L0X_ReadMulti>
 800976e:	4603      	mov	r3, r0
 8009770:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (Status == VL53L0X_ERROR_NONE) {
 8009774:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009778:	2b00      	cmp	r3, #0
 800977a:	f040 80d1 	bne.w	8009920 <VL53L0X_GetRangingMeasurementData+0x1d0>

    pRangingMeasurementData->ZoneId = 0;    /* Only one zone */
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	2200      	movs	r2, #0
 8009782:	759a      	strb	r2, [r3, #22]
    pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	2200      	movs	r2, #0
 8009788:	601a      	str	r2, [r3, #0]

    tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800978a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800978e:	b29b      	uxth	r3, r3
 8009790:	021b      	lsls	r3, r3, #8
 8009792:	b29a      	uxth	r2, r3
 8009794:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009798:	b29b      	uxth	r3, r3
 800979a:	4413      	add	r3, r2
 800979c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    /* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
     *(format 11.2) else no fractional
     */

    pRangingMeasurementData->MeasurementTimeUsec = 0;
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	2200      	movs	r2, #0
 80097a4:	605a      	str	r2, [r3, #4]

    SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80097a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	021b      	lsls	r3, r3, #8
 80097ae:	b29a      	uxth	r2, r3
 80097b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	4413      	add	r3, r2
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	025b      	lsls	r3, r3, #9
 80097bc:	647b      	str	r3, [r7, #68]	; 0x44
        VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
    /* peak_signal_count_rate_rtn_mcps */
    pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097c2:	60da      	str	r2, [r3, #12]

    AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80097c4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	021b      	lsls	r3, r3, #8
 80097cc:	b29a      	uxth	r2, r3
 80097ce:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	4413      	add	r3, r2
 80097d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    pRangingMeasurementData->AmbientRateRtnMegaCps =
        VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80097da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80097de:	025b      	lsls	r3, r3, #9
 80097e0:	461a      	mov	r2, r3
    pRangingMeasurementData->AmbientRateRtnMegaCps =
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	611a      	str	r2, [r3, #16]

    EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3], localBuffer[2]);
 80097e6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	021b      	lsls	r3, r3, #8
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	4413      	add	r3, r2
 80097f8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* EffectiveSpadRtnCount is 8.8 format */
    pRangingMeasurementData->EffectiveSpadRtnCount = EffectiveSpadRtnCount;
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009802:	829a      	strh	r2, [r3, #20]

    DeviceRangeStatus = localBuffer[0];
 8009804:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009808:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* Get Linearity Corrective Gain */
    LinearityCorrectiveGain = PALDevDataGet(Dev, LinearityCorrectiveGain);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8009812:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* Get ranging configuration */
    RangeFractionalEnable = PALDevDataGet(Dev, RangeFractionalEnable);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800981a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    if (LinearityCorrectiveGain != 1000) {
 800981e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009824:	d047      	beq.n	80098b6 <VL53L0X_GetRangingMeasurementData+0x166>

      tmpuint16 =
          (uint16_t)((LinearityCorrectiveGain * tmpuint16 + 500) / 1000);
 8009826:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009828:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800982c:	fb02 f303 	mul.w	r3, r2, r3
 8009830:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009834:	4a57      	ldr	r2, [pc, #348]	; (8009994 <VL53L0X_GetRangingMeasurementData+0x244>)
 8009836:	fb82 1203 	smull	r1, r2, r2, r3
 800983a:	1192      	asrs	r2, r2, #6
 800983c:	17db      	asrs	r3, r3, #31
 800983e:	1ad3      	subs	r3, r2, r3
      tmpuint16 =
 8009840:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

      /* Implement Xtalk */
      VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a1b      	ldr	r3, [r3, #32]
 8009848:	873b      	strh	r3, [r7, #56]	; 0x38
                                XTalkCompensationRateMegaCps);
      VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	7f1b      	ldrb	r3, [r3, #28]
 800984e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                                XTalkCompensationEnable);

      if (XTalkCompensationEnable) {
 8009852:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009856:	2b00      	cmp	r3, #0
 8009858:	d02d      	beq.n	80098b6 <VL53L0X_GetRangingMeasurementData+0x166>

        if ((SignalRate -
             ((XTalkCompensationRateMegaCps * EffectiveSpadRtnCount) >> 8)) <=
 800985a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800985c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009860:	fb02 f303 	mul.w	r3, r2, r3
 8009864:	121b      	asrs	r3, r3, #8
 8009866:	461a      	mov	r2, r3
        if ((SignalRate -
 8009868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800986a:	4293      	cmp	r3, r2
 800986c:	d10d      	bne.n	800988a <VL53L0X_GetRangingMeasurementData+0x13a>
            0) {
          if (RangeFractionalEnable)
 800986e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009872:	2b00      	cmp	r3, #0
 8009874:	d004      	beq.n	8009880 <VL53L0X_GetRangingMeasurementData+0x130>
            XtalkRangeMilliMeter = 8888;
 8009876:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800987a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800987e:	e016      	b.n	80098ae <VL53L0X_GetRangingMeasurementData+0x15e>
          else
            XtalkRangeMilliMeter = 8888 << 2;
 8009880:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8009884:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009888:	e011      	b.n	80098ae <VL53L0X_GetRangingMeasurementData+0x15e>
        } else {
          XtalkRangeMilliMeter =
              (tmpuint16 * SignalRate) /
 800988a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800988e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009890:	fb03 f202 	mul.w	r2, r3, r2
              (SignalRate -
               ((XTalkCompensationRateMegaCps * EffectiveSpadRtnCount) >> 8));
 8009894:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009896:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800989a:	fb01 f303 	mul.w	r3, r1, r3
 800989e:	121b      	asrs	r3, r3, #8
 80098a0:	4619      	mov	r1, r3
              (SignalRate -
 80098a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098a4:	1a5b      	subs	r3, r3, r1
              (tmpuint16 * SignalRate) /
 80098a6:	fbb2 f3f3 	udiv	r3, r2, r3
          XtalkRangeMilliMeter =
 80098aa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        }

        tmpuint16 = XtalkRangeMilliMeter;
 80098ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80098b2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
      }
    }

    if (RangeFractionalEnable) {
 80098b6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00c      	beq.n	80098d8 <VL53L0X_GetRangingMeasurementData+0x188>
      pRangingMeasurementData->RangeMilliMeter = (uint16_t)((tmpuint16) >> 2);
 80098be:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80098c2:	089b      	lsrs	r3, r3, #2
 80098c4:	b29a      	uxth	r2, r3
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	811a      	strh	r2, [r3, #8]
      pRangingMeasurementData->RangeFractionalPart =
          (uint8_t)((tmpuint16 & 0x03) << 6);
 80098ca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80098ce:	019b      	lsls	r3, r3, #6
      pRangingMeasurementData->RangeFractionalPart =
 80098d0:	b2da      	uxtb	r2, r3
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	75da      	strb	r2, [r3, #23]
 80098d6:	e006      	b.n	80098e6 <VL53L0X_GetRangingMeasurementData+0x196>
    } else {
      pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80098de:	811a      	strh	r2, [r3, #8]
      pRangingMeasurementData->RangeFractionalPart = 0;
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	2200      	movs	r2, #0
 80098e4:	75da      	strb	r2, [r3, #23]
     * For a standard definition of RangeStatus, this should
     * return 0 in case of good result after a ranging
     * The range status depends on the device so call a device
     * specific function to obtain the right Status.
     */
    Status |= VL53L0X_get_pal_range_status(
 80098e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80098ea:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80098ee:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80098f2:	9301      	str	r3, [sp, #4]
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	9300      	str	r3, [sp, #0]
 80098f8:	4613      	mov	r3, r2
 80098fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f002 fe83 	bl	800c608 <VL53L0X_get_pal_range_status>
 8009902:	4603      	mov	r3, r0
 8009904:	461a      	mov	r2, r3
 8009906:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800990a:	4313      	orrs	r3, r2
 800990c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        Dev, DeviceRangeStatus, SignalRate, EffectiveSpadRtnCount,
        pRangingMeasurementData, &PalRangeStatus);

    if (Status == VL53L0X_ERROR_NONE)
 8009910:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009914:	2b00      	cmp	r3, #0
 8009916:	d103      	bne.n	8009920 <VL53L0X_GetRangingMeasurementData+0x1d0>
      pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8009918:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	761a      	strb	r2, [r3, #24]
  }

  if (Status == VL53L0X_ERROR_NONE) {
 8009920:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009924:	2b00      	cmp	r3, #0
 8009926:	d12f      	bne.n	8009988 <VL53L0X_GetRangingMeasurementData+0x238>
    /* Copy last read data into Dev buffer */
    LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f107 040c 	add.w	r4, r7, #12
 800992e:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8009932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009936:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800993a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    LastRangeDataBuffer.RangeMilliMeter =
        pRangingMeasurementData->RangeMilliMeter;
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	891b      	ldrh	r3, [r3, #8]
    LastRangeDataBuffer.RangeMilliMeter =
 8009942:	82bb      	strh	r3, [r7, #20]
    LastRangeDataBuffer.RangeFractionalPart =
        pRangingMeasurementData->RangeFractionalPart;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	7ddb      	ldrb	r3, [r3, #23]
    LastRangeDataBuffer.RangeFractionalPart =
 8009948:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    LastRangeDataBuffer.RangeDMaxMilliMeter =
        pRangingMeasurementData->RangeDMaxMilliMeter;
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	895b      	ldrh	r3, [r3, #10]
    LastRangeDataBuffer.RangeDMaxMilliMeter =
 8009950:	82fb      	strh	r3, [r7, #22]
    LastRangeDataBuffer.MeasurementTimeUsec =
        pRangingMeasurementData->MeasurementTimeUsec;
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	685b      	ldr	r3, [r3, #4]
    LastRangeDataBuffer.MeasurementTimeUsec =
 8009956:	613b      	str	r3, [r7, #16]
    LastRangeDataBuffer.SignalRateRtnMegaCps =
        pRangingMeasurementData->SignalRateRtnMegaCps;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	68db      	ldr	r3, [r3, #12]
    LastRangeDataBuffer.SignalRateRtnMegaCps =
 800995c:	61bb      	str	r3, [r7, #24]
    LastRangeDataBuffer.AmbientRateRtnMegaCps =
        pRangingMeasurementData->AmbientRateRtnMegaCps;
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	691b      	ldr	r3, [r3, #16]
    LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8009962:	61fb      	str	r3, [r7, #28]
    LastRangeDataBuffer.EffectiveSpadRtnCount =
        pRangingMeasurementData->EffectiveSpadRtnCount;
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	8a9b      	ldrh	r3, [r3, #20]
    LastRangeDataBuffer.EffectiveSpadRtnCount =
 8009968:	843b      	strh	r3, [r7, #32]
    LastRangeDataBuffer.RangeStatus = pRangingMeasurementData->RangeStatus;
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	7e1b      	ldrb	r3, [r3, #24]
 800996e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8009978:	f107 050c 	add.w	r5, r7, #12
 800997c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800997e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009980:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009984:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8009988:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800998c:	4618      	mov	r0, r3
 800998e:	3750      	adds	r7, #80	; 0x50
 8009990:	46bd      	mov	sp, r7
 8009992:	bdb0      	pop	{r4, r5, r7, pc}
 8009994:	10624dd3 	.word	0x10624dd3

08009998 <VL53L0X_PerformSingleRangingMeasurement>:
  return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(
    VL53L0X_DEV Dev,
    VL53L0X_RangingMeasurementData_t *pRangingMeasurementData) {
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099a2:	2300      	movs	r3, #0
 80099a4:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_START("");

  /* This function will do a complete single ranging
   * Here we fix the mode! */
  Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80099a6:	2100      	movs	r1, #0
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f7ff f8ab 	bl	8008b04 <VL53L0X_SetDeviceMode>
 80099ae:	4603      	mov	r3, r0
 80099b0:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 80099b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d104      	bne.n	80099c4 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
    Status = VL53L0X_PerformSingleMeasurement(Dev);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f7ff fd16 	bl	80093ec <VL53L0X_PerformSingleMeasurement>
 80099c0:	4603      	mov	r3, r0
 80099c2:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 80099c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d105      	bne.n	80099d8 <VL53L0X_PerformSingleRangingMeasurement+0x40>
    Status = VL53L0X_GetRangingMeasurementData(Dev, pRangingMeasurementData);
 80099cc:	6839      	ldr	r1, [r7, #0]
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f7ff febe 	bl	8009750 <VL53L0X_GetRangingMeasurementData>
 80099d4:	4603      	mov	r3, r0
 80099d6:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 80099d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d105      	bne.n	80099ec <VL53L0X_PerformSingleRangingMeasurement+0x54>
    Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80099e0:	2100      	movs	r1, #0
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f960 	bl	8009ca8 <VL53L0X_ClearInterruptMask>
 80099e8:	4603      	mov	r3, r0
 80099ea:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_END(Status);
  return Status;
 80099ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
                                    VL53L0X_DeviceModes DeviceMode,
                                    VL53L0X_GpioFunctionality Functionality,
                                    VL53L0X_InterruptPolarity Polarity) {
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	4608      	mov	r0, r1
 8009a02:	4611      	mov	r1, r2
 8009a04:	461a      	mov	r2, r3
 8009a06:	4603      	mov	r3, r0
 8009a08:	70fb      	strb	r3, [r7, #3]
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	70bb      	strb	r3, [r7, #2]
 8009a0e:	4613      	mov	r3, r2
 8009a10:	707b      	strb	r3, [r7, #1]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a12:	2300      	movs	r3, #0
 8009a14:	73fb      	strb	r3, [r7, #15]
  uint8_t data;

  LOG_FUNCTION_START("");

  if (Pin != 0) {
 8009a16:	78fb      	ldrb	r3, [r7, #3]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d002      	beq.n	8009a22 <VL53L0X_SetGpioConfig+0x2a>
    Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8009a1c:	23f6      	movs	r3, #246	; 0xf6
 8009a1e:	73fb      	strb	r3, [r7, #15]
 8009a20:	e105      	b.n	8009c2e <VL53L0X_SetGpioConfig+0x236>
  } else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8009a22:	78bb      	ldrb	r3, [r7, #2]
 8009a24:	2b14      	cmp	r3, #20
 8009a26:	d110      	bne.n	8009a4a <VL53L0X_SetGpioConfig+0x52>
    if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8009a28:	7e3b      	ldrb	r3, [r7, #24]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d102      	bne.n	8009a34 <VL53L0X_SetGpioConfig+0x3c>
      data = 0x10;
 8009a2e:	2310      	movs	r3, #16
 8009a30:	73bb      	strb	r3, [r7, #14]
 8009a32:	e001      	b.n	8009a38 <VL53L0X_SetGpioConfig+0x40>
    else
      data = 1;
 8009a34:	2301      	movs	r3, #1
 8009a36:	73bb      	strb	r3, [r7, #14]

    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);
 8009a38:	7bbb      	ldrb	r3, [r7, #14]
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	2184      	movs	r1, #132	; 0x84
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f003 fa25 	bl	800ce8e <VL53L0X_WrByte>
 8009a44:	4603      	mov	r3, r0
 8009a46:	73fb      	strb	r3, [r7, #15]
 8009a48:	e0f1      	b.n	8009c2e <VL53L0X_SetGpioConfig+0x236>

  } else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8009a4a:	78bb      	ldrb	r3, [r7, #2]
 8009a4c:	2b15      	cmp	r3, #21
 8009a4e:	f040 8097 	bne.w	8009b80 <VL53L0X_SetGpioConfig+0x188>

    Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009a52:	2201      	movs	r2, #1
 8009a54:	21ff      	movs	r1, #255	; 0xff
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f003 fa19 	bl	800ce8e <VL53L0X_WrByte>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	461a      	mov	r2, r3
 8009a60:	7bfb      	ldrb	r3, [r7, #15]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009a66:	2200      	movs	r2, #0
 8009a68:	2100      	movs	r1, #0
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f003 fa0f 	bl	800ce8e <VL53L0X_WrByte>
 8009a70:	4603      	mov	r3, r0
 8009a72:	461a      	mov	r2, r3
 8009a74:	7bfb      	ldrb	r3, [r7, #15]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	73fb      	strb	r3, [r7, #15]

    Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	21ff      	movs	r1, #255	; 0xff
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f003 fa05 	bl	800ce8e <VL53L0X_WrByte>
 8009a84:	4603      	mov	r3, r0
 8009a86:	461a      	mov	r2, r3
 8009a88:	7bfb      	ldrb	r3, [r7, #15]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009a8e:	2201      	movs	r2, #1
 8009a90:	2180      	movs	r1, #128	; 0x80
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f003 f9fb 	bl	800ce8e <VL53L0X_WrByte>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	7bfb      	ldrb	r3, [r7, #15]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8009aa2:	2202      	movs	r2, #2
 8009aa4:	2185      	movs	r1, #133	; 0x85
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f003 f9f1 	bl	800ce8e <VL53L0X_WrByte>
 8009aac:	4603      	mov	r3, r0
 8009aae:	461a      	mov	r2, r3
 8009ab0:	7bfb      	ldrb	r3, [r7, #15]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	73fb      	strb	r3, [r7, #15]

    Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8009ab6:	2204      	movs	r2, #4
 8009ab8:	21ff      	movs	r1, #255	; 0xff
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f003 f9e7 	bl	800ce8e <VL53L0X_WrByte>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8009aca:	2200      	movs	r2, #0
 8009acc:	21cd      	movs	r1, #205	; 0xcd
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f003 f9dd 	bl	800ce8e <VL53L0X_WrByte>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	7bfb      	ldrb	r3, [r7, #15]
 8009ada:	4313      	orrs	r3, r2
 8009adc:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8009ade:	2211      	movs	r2, #17
 8009ae0:	21cc      	movs	r1, #204	; 0xcc
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f003 f9d3 	bl	800ce8e <VL53L0X_WrByte>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	461a      	mov	r2, r3
 8009aec:	7bfb      	ldrb	r3, [r7, #15]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	73fb      	strb	r3, [r7, #15]

    Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8009af2:	2207      	movs	r2, #7
 8009af4:	21ff      	movs	r1, #255	; 0xff
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f003 f9c9 	bl	800ce8e <VL53L0X_WrByte>
 8009afc:	4603      	mov	r3, r0
 8009afe:	461a      	mov	r2, r3
 8009b00:	7bfb      	ldrb	r3, [r7, #15]
 8009b02:	4313      	orrs	r3, r2
 8009b04:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8009b06:	2200      	movs	r2, #0
 8009b08:	21be      	movs	r1, #190	; 0xbe
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f003 f9bf 	bl	800ce8e <VL53L0X_WrByte>
 8009b10:	4603      	mov	r3, r0
 8009b12:	461a      	mov	r2, r3
 8009b14:	7bfb      	ldrb	r3, [r7, #15]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	73fb      	strb	r3, [r7, #15]

    Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8009b1a:	2206      	movs	r2, #6
 8009b1c:	21ff      	movs	r1, #255	; 0xff
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f003 f9b5 	bl	800ce8e <VL53L0X_WrByte>
 8009b24:	4603      	mov	r3, r0
 8009b26:	461a      	mov	r2, r3
 8009b28:	7bfb      	ldrb	r3, [r7, #15]
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8009b2e:	2209      	movs	r2, #9
 8009b30:	21cc      	movs	r1, #204	; 0xcc
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f003 f9ab 	bl	800ce8e <VL53L0X_WrByte>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	7bfb      	ldrb	r3, [r7, #15]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	73fb      	strb	r3, [r7, #15]

    Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009b42:	2200      	movs	r2, #0
 8009b44:	21ff      	movs	r1, #255	; 0xff
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f003 f9a1 	bl	800ce8e <VL53L0X_WrByte>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	461a      	mov	r2, r3
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009b56:	2201      	movs	r2, #1
 8009b58:	21ff      	movs	r1, #255	; 0xff
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f003 f997 	bl	800ce8e <VL53L0X_WrByte>
 8009b60:	4603      	mov	r3, r0
 8009b62:	461a      	mov	r2, r3
 8009b64:	7bfb      	ldrb	r3, [r7, #15]
 8009b66:	4313      	orrs	r3, r2
 8009b68:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f003 f98d 	bl	800ce8e <VL53L0X_WrByte>
 8009b74:	4603      	mov	r3, r0
 8009b76:	461a      	mov	r2, r3
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	73fb      	strb	r3, [r7, #15]
 8009b7e:	e056      	b.n	8009c2e <VL53L0X_SetGpioConfig+0x236>

  } else {

    if (Status == VL53L0X_ERROR_NONE) {
 8009b80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d120      	bne.n	8009bca <VL53L0X_SetGpioConfig+0x1d2>
      switch (Functionality) {
 8009b88:	787b      	ldrb	r3, [r7, #1]
 8009b8a:	2b04      	cmp	r3, #4
 8009b8c:	d81b      	bhi.n	8009bc6 <VL53L0X_SetGpioConfig+0x1ce>
 8009b8e:	a201      	add	r2, pc, #4	; (adr r2, 8009b94 <VL53L0X_SetGpioConfig+0x19c>)
 8009b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b94:	08009ba9 	.word	0x08009ba9
 8009b98:	08009baf 	.word	0x08009baf
 8009b9c:	08009bb5 	.word	0x08009bb5
 8009ba0:	08009bbb 	.word	0x08009bbb
 8009ba4:	08009bc1 	.word	0x08009bc1
      case VL53L0X_GPIOFUNCTIONALITY_OFF:
        data = 0x00;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	73bb      	strb	r3, [r7, #14]
        break;
 8009bac:	e00d      	b.n	8009bca <VL53L0X_SetGpioConfig+0x1d2>
      case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
        data = 0x01;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	73bb      	strb	r3, [r7, #14]
        break;
 8009bb2:	e00a      	b.n	8009bca <VL53L0X_SetGpioConfig+0x1d2>
      case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
        data = 0x02;
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	73bb      	strb	r3, [r7, #14]
        break;
 8009bb8:	e007      	b.n	8009bca <VL53L0X_SetGpioConfig+0x1d2>
      case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
        data = 0x03;
 8009bba:	2303      	movs	r3, #3
 8009bbc:	73bb      	strb	r3, [r7, #14]
        break;
 8009bbe:	e004      	b.n	8009bca <VL53L0X_SetGpioConfig+0x1d2>
      case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
        data = 0x04;
 8009bc0:	2304      	movs	r3, #4
 8009bc2:	73bb      	strb	r3, [r7, #14]
        break;
 8009bc4:	e001      	b.n	8009bca <VL53L0X_SetGpioConfig+0x1d2>
      default:
        Status = VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
 8009bc6:	23f5      	movs	r3, #245	; 0xf5
 8009bc8:	73fb      	strb	r3, [r7, #15]
      }
    }

    if (Status == VL53L0X_ERROR_NONE)
 8009bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d107      	bne.n	8009be2 <VL53L0X_SetGpioConfig+0x1ea>
      Status =
          VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);
 8009bd2:	7bbb      	ldrb	r3, [r7, #14]
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	210a      	movs	r1, #10
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f003 f958 	bl	800ce8e <VL53L0X_WrByte>
 8009bde:	4603      	mov	r3, r0
 8009be0:	73fb      	strb	r3, [r7, #15]

    if (Status == VL53L0X_ERROR_NONE) {
 8009be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d10f      	bne.n	8009c0a <VL53L0X_SetGpioConfig+0x212>
      if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8009bea:	7e3b      	ldrb	r3, [r7, #24]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d102      	bne.n	8009bf6 <VL53L0X_SetGpioConfig+0x1fe>
        data = 0;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	73bb      	strb	r3, [r7, #14]
 8009bf4:	e001      	b.n	8009bfa <VL53L0X_SetGpioConfig+0x202>
      else
        data = (uint8_t)(1 << 4);
 8009bf6:	2310      	movs	r3, #16
 8009bf8:	73bb      	strb	r3, [r7, #14]

      Status = VL53L0X_UpdateByte(Dev, VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH,
 8009bfa:	7bbb      	ldrb	r3, [r7, #14]
 8009bfc:	22ef      	movs	r2, #239	; 0xef
 8009bfe:	2184      	movs	r1, #132	; 0x84
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f003 f988 	bl	800cf16 <VL53L0X_UpdateByte>
 8009c06:	4603      	mov	r3, r0
 8009c08:	73fb      	strb	r3, [r7, #15]
                                  0xEF, data);
    }

    if (Status == VL53L0X_ERROR_NONE)
 8009c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d103      	bne.n	8009c1a <VL53L0X_SetGpioConfig+0x222>
      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, Pin0GpioFunctionality,
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	787a      	ldrb	r2, [r7, #1]
 8009c16:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
                                         Functionality);

    if (Status == VL53L0X_ERROR_NONE)
 8009c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d105      	bne.n	8009c2e <VL53L0X_SetGpioConfig+0x236>
      Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8009c22:	2100      	movs	r1, #0
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 f83f 	bl	8009ca8 <VL53L0X_ClearInterruptMask>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	73fb      	strb	r3, [r7, #15]
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8009c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop

08009c3c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
                                             VL53L0X_DeviceModes DeviceMode,
                                             FixPoint1616_t *pThresholdLow,
                                             FixPoint1616_t *pThresholdHigh) {
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	607a      	str	r2, [r7, #4]
 8009c46:	603b      	str	r3, [r7, #0]
 8009c48:	460b      	mov	r3, r1
 8009c4a:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	75fb      	strb	r3, [r7, #23]
  uint16_t Threshold16;
  LOG_FUNCTION_START("");

  /* no dependency on DeviceMode for Ewok */

  Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8009c50:	f107 0314 	add.w	r3, r7, #20
 8009c54:	461a      	mov	r2, r3
 8009c56:	210e      	movs	r1, #14
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f003 f9bf 	bl	800cfdc <VL53L0X_RdWord>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	75fb      	strb	r3, [r7, #23]
  /* Need to multiply by 2 because the FW will apply a x2 */
  *pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8009c62:	8abb      	ldrh	r3, [r7, #20]
 8009c64:	045b      	lsls	r3, r3, #17
 8009c66:	461a      	mov	r2, r3
 8009c68:	4b0e      	ldr	r3, [pc, #56]	; (8009ca4 <VL53L0X_GetInterruptThresholds+0x68>)
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	6013      	str	r3, [r2, #0]

  if (Status == VL53L0X_ERROR_NONE) {
 8009c70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10f      	bne.n	8009c98 <VL53L0X_GetInterruptThresholds+0x5c>
    Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH, &Threshold16);
 8009c78:	f107 0314 	add.w	r3, r7, #20
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	210c      	movs	r1, #12
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f003 f9ab 	bl	800cfdc <VL53L0X_RdWord>
 8009c86:	4603      	mov	r3, r0
 8009c88:	75fb      	strb	r3, [r7, #23]
    /* Need to multiply by 2 because the FW will apply a x2 */
    *pThresholdHigh = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8009c8a:	8abb      	ldrh	r3, [r7, #20]
 8009c8c:	045b      	lsls	r3, r3, #17
 8009c8e:	461a      	mov	r2, r3
 8009c90:	4b04      	ldr	r3, [pc, #16]	; (8009ca4 <VL53L0X_GetInterruptThresholds+0x68>)
 8009c92:	4013      	ands	r3, r2
 8009c94:	683a      	ldr	r2, [r7, #0]
 8009c96:	6013      	str	r3, [r2, #0]
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8009c98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3718      	adds	r7, #24
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	1ffe0000 	.word	0x1ffe0000

08009ca8 <VL53L0X_ClearInterruptMask>:
  return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev,
                                         uint32_t InterruptMask) {
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	73fb      	strb	r3, [r7, #15]
  uint8_t LoopCount;
  uint8_t Byte;
  LOG_FUNCTION_START("");

  /* clear bit 0 range interrupt, bit 1 error interrupt */
  LoopCount = 0;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	73bb      	strb	r3, [r7, #14]
  do {
    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
 8009cba:	2201      	movs	r2, #1
 8009cbc:	210b      	movs	r1, #11
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f003 f8e5 	bl	800ce8e <VL53L0X_WrByte>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
 8009cc8:	2200      	movs	r2, #0
 8009cca:	210b      	movs	r1, #11
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f003 f8de 	bl	800ce8e <VL53L0X_WrByte>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	7bfb      	ldrb	r3, [r7, #15]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8009cdc:	f107 030d 	add.w	r3, r7, #13
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	2113      	movs	r1, #19
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f003 f958 	bl	800cf9a <VL53L0X_RdByte>
 8009cea:	4603      	mov	r3, r0
 8009cec:	461a      	mov	r2, r3
 8009cee:	7bfb      	ldrb	r3, [r7, #15]
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	73fb      	strb	r3, [r7, #15]
    LoopCount++;
 8009cf4:	7bbb      	ldrb	r3, [r7, #14]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	73bb      	strb	r3, [r7, #14]
  } while (((Byte & 0x07) != 0x00) && (LoopCount < 3) &&
 8009cfa:	7b7b      	ldrb	r3, [r7, #13]
 8009cfc:	f003 0307 	and.w	r3, r3, #7
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d007      	beq.n	8009d14 <VL53L0X_ClearInterruptMask+0x6c>
 8009d04:	7bbb      	ldrb	r3, [r7, #14]
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	d804      	bhi.n	8009d14 <VL53L0X_ClearInterruptMask+0x6c>
 8009d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d100      	bne.n	8009d14 <VL53L0X_ClearInterruptMask+0x6c>
  do {
 8009d12:	e7d2      	b.n	8009cba <VL53L0X_ClearInterruptMask+0x12>
           (Status == VL53L0X_ERROR_NONE));

  if (LoopCount >= 3)
 8009d14:	7bbb      	ldrb	r3, [r7, #14]
 8009d16:	2b02      	cmp	r3, #2
 8009d18:	d901      	bls.n	8009d1e <VL53L0X_ClearInterruptMask+0x76>
    Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8009d1a:	23f4      	movs	r3, #244	; 0xf4
 8009d1c:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_END(Status);
  return Status;
 8009d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
                                             uint32_t *pInterruptMaskStatus) {
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b084      	sub	sp, #16
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
 8009d32:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d34:	2300      	movs	r3, #0
 8009d36:	73fb      	strb	r3, [r7, #15]
  uint8_t Byte;
  LOG_FUNCTION_START("");

  Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8009d38:	f107 030e 	add.w	r3, r7, #14
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	2113      	movs	r1, #19
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f003 f92a 	bl	800cf9a <VL53L0X_RdByte>
 8009d46:	4603      	mov	r3, r0
 8009d48:	73fb      	strb	r3, [r7, #15]
  *pInterruptMaskStatus = Byte & 0x07;
 8009d4a:	7bbb      	ldrb	r3, [r7, #14]
 8009d4c:	f003 0207 	and.w	r2, r3, #7
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	601a      	str	r2, [r3, #0]

  if (Byte & 0x18)
 8009d54:	7bbb      	ldrb	r3, [r7, #14]
 8009d56:	f003 0318 	and.w	r3, r3, #24
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d001      	beq.n	8009d62 <VL53L0X_GetInterruptMaskStatus+0x38>
    Status = VL53L0X_ERROR_RANGE_ERROR;
 8009d5e:	23fa      	movs	r3, #250	; 0xfa
 8009d60:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_END(Status);
  return Status;
 8009d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <VL53L0X_PerformRefSpadManagement>:
  return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
                                               uint32_t *refSpadCount,
                                               uint8_t *isApertureSpads) {
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b086      	sub	sp, #24
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	60f8      	str	r0, [r7, #12]
 8009d76:	60b9      	str	r1, [r7, #8]
 8009d78:	607a      	str	r2, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	75fb      	strb	r3, [r7, #23]
  LOG_FUNCTION_START("");

  Status =
      VL53L0X_perform_ref_spad_management(Dev, refSpadCount, isApertureSpads);
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	68b9      	ldr	r1, [r7, #8]
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f000 fa09 	bl	800a19a <VL53L0X_perform_ref_spad_management>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	75fb      	strb	r3, [r7, #23]

  LOG_FUNCTION_END(Status);

  return Status;
 8009d8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3718      	adds	r7, #24
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <VL53L0X_get_offset_calibration_data_micro_meter>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(
    VL53L0X_DEV Dev, int32_t *pOffsetCalibrationDataMicroMeter) {
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009da2:	2300      	movs	r3, #0
 8009da4:	73fb      	strb	r3, [r7, #15]
  uint16_t RangeOffsetRegister;
  int16_t cMaxOffset = 2047;
 8009da6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8009daa:	81bb      	strh	r3, [r7, #12]
  int16_t cOffsetRange = 4096;
 8009dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009db0:	817b      	strh	r3, [r7, #10]

  /* Note that offset has 10.2 format */

  Status = VL53L0X_RdWord(Dev, VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
 8009db2:	f107 0308 	add.w	r3, r7, #8
 8009db6:	461a      	mov	r2, r3
 8009db8:	2128      	movs	r1, #40	; 0x28
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f003 f90e 	bl	800cfdc <VL53L0X_RdWord>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	73fb      	strb	r3, [r7, #15]
                          &RangeOffsetRegister);

  if (Status == VL53L0X_ERROR_NONE) {
 8009dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d11e      	bne.n	8009e0a <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
    RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8009dcc:	893b      	ldrh	r3, [r7, #8]
 8009dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	813b      	strh	r3, [r7, #8]

    /* Apply 12 bit 2's compliment conversion */
    if (RangeOffsetRegister > cMaxOffset)
 8009dd6:	893b      	ldrh	r3, [r7, #8]
 8009dd8:	461a      	mov	r2, r3
 8009dda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	dd0b      	ble.n	8009dfa <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
      *pOffsetCalibrationDataMicroMeter =
          (int16_t)(RangeOffsetRegister - cOffsetRange) * 250;
 8009de2:	893a      	ldrh	r2, [r7, #8]
 8009de4:	897b      	ldrh	r3, [r7, #10]
 8009de6:	1ad3      	subs	r3, r2, r3
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	b21b      	sxth	r3, r3
 8009dec:	461a      	mov	r2, r3
 8009dee:	23fa      	movs	r3, #250	; 0xfa
 8009df0:	fb03 f202 	mul.w	r2, r3, r2
      *pOffsetCalibrationDataMicroMeter =
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	601a      	str	r2, [r3, #0]
 8009df8:	e007      	b.n	8009e0a <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
    else
      *pOffsetCalibrationDataMicroMeter = (int16_t)RangeOffsetRegister * 250;
 8009dfa:	893b      	ldrh	r3, [r7, #8]
 8009dfc:	b21b      	sxth	r3, r3
 8009dfe:	461a      	mov	r2, r3
 8009e00:	23fa      	movs	r3, #250	; 0xfa
 8009e02:	fb03 f202 	mul.w	r2, r3, r2
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	601a      	str	r2, [r3, #0]
  }

  return Status;
 8009e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <_Z18get_next_good_spadPhmmPl>:

  return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size, uint32_t curr,
                        int32_t *next) {
 8009e16:	b480      	push	{r7}
 8009e18:	b08b      	sub	sp, #44	; 0x2c
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	60f8      	str	r0, [r7, #12]
 8009e1e:	60b9      	str	r1, [r7, #8]
 8009e20:	607a      	str	r2, [r7, #4]
 8009e22:	603b      	str	r3, [r7, #0]
  uint32_t startIndex;
  uint32_t fineOffset;
  uint32_t cSpadsPerByte = 8;
 8009e24:	2308      	movs	r3, #8
 8009e26:	61bb      	str	r3, [r7, #24]
  uint32_t coarseIndex;
  uint32_t fineIndex;
  uint8_t dataByte;
  uint8_t success = 0;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	77bb      	strb	r3, [r7, #30]
   *
   * The coarse index is the byte index of the array and the fine index is
   * the index of the bit within each byte.
   */

  *next = -1;
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e32:	601a      	str	r2, [r3, #0]

  startIndex = curr / cSpadsPerByte;
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	69bb      	ldr	r3, [r7, #24]
 8009e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e3c:	617b      	str	r3, [r7, #20]
  fineOffset = curr % cSpadsPerByte;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	69ba      	ldr	r2, [r7, #24]
 8009e42:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e46:	69b9      	ldr	r1, [r7, #24]
 8009e48:	fb01 f202 	mul.w	r2, r1, r2
 8009e4c:	1a9b      	subs	r3, r3, r2
 8009e4e:	613b      	str	r3, [r7, #16]

  for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	627b      	str	r3, [r7, #36]	; 0x24
 8009e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d234      	bcs.n	8009ec6 <_Z18get_next_good_spadPhmmPl+0xb0>
 8009e5c:	7fbb      	ldrb	r3, [r7, #30]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d131      	bne.n	8009ec6 <_Z18get_next_good_spadPhmmPl+0xb0>
       coarseIndex++) {
    fineIndex = 0;
 8009e62:	2300      	movs	r3, #0
 8009e64:	623b      	str	r3, [r7, #32]
    dataByte = goodSpadArray[coarseIndex];
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6a:	4413      	add	r3, r2
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	77fb      	strb	r3, [r7, #31]

    if (coarseIndex == startIndex) {
 8009e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d106      	bne.n	8009e86 <_Z18get_next_good_spadPhmmPl+0x70>
      /* locate the bit position of the provided current
       * spad bit before iterating */
      dataByte >>= fineOffset;
 8009e78:	7ffa      	ldrb	r2, [r7, #31]
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	fa42 f303 	asr.w	r3, r2, r3
 8009e80:	77fb      	strb	r3, [r7, #31]
      fineIndex = fineOffset;
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	623b      	str	r3, [r7, #32]
    }

    while (fineIndex < cSpadsPerByte) {
 8009e86:	6a3a      	ldr	r2, [r7, #32]
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d217      	bcs.n	8009ebe <_Z18get_next_good_spadPhmmPl+0xa8>
      if ((dataByte & 0x1) == 1) {
 8009e8e:	7ffb      	ldrb	r3, [r7, #31]
 8009e90:	f003 0301 	and.w	r3, r3, #1
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00b      	beq.n	8009eb0 <_Z18get_next_good_spadPhmmPl+0x9a>
        success = 1;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	77bb      	strb	r3, [r7, #30]
        *next = coarseIndex * cSpadsPerByte + fineIndex;
 8009e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9e:	69ba      	ldr	r2, [r7, #24]
 8009ea0:	fb03 f202 	mul.w	r2, r3, r2
 8009ea4:	6a3b      	ldr	r3, [r7, #32]
 8009ea6:	4413      	add	r3, r2
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	601a      	str	r2, [r3, #0]
        break;
 8009eae:	e006      	b.n	8009ebe <_Z18get_next_good_spadPhmmPl+0xa8>
      }
      dataByte >>= 1;
 8009eb0:	7ffb      	ldrb	r3, [r7, #31]
 8009eb2:	085b      	lsrs	r3, r3, #1
 8009eb4:	77fb      	strb	r3, [r7, #31]
      fineIndex++;
 8009eb6:	6a3b      	ldr	r3, [r7, #32]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	623b      	str	r3, [r7, #32]
    while (fineIndex < cSpadsPerByte) {
 8009ebc:	e7e3      	b.n	8009e86 <_Z18get_next_good_spadPhmmPl+0x70>
  for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8009ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8009ec4:	e7c6      	b.n	8009e54 <_Z18get_next_good_spadPhmmPl+0x3e>
    }
  }
}
 8009ec6:	bf00      	nop
 8009ec8:	372c      	adds	r7, #44	; 0x2c
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
	...

08009ed4 <_Z11is_aperturem>:

uint8_t is_aperture(uint32_t spadIndex) {
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  /*
   * This function reports if a given spad index is an aperture SPAD by
   * deriving the quadrant.
   */
  uint32_t quadrant;
  uint8_t isAperture = 1;
 8009edc:	2301      	movs	r3, #1
 8009ede:	73fb      	strb	r3, [r7, #15]
  quadrant = spadIndex >> 6;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	099b      	lsrs	r3, r3, #6
 8009ee4:	60bb      	str	r3, [r7, #8]
  if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8009ee6:	4a07      	ldr	r2, [pc, #28]	; (8009f04 <_Z11is_aperturem+0x30>)
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d101      	bne.n	8009ef6 <_Z11is_aperturem+0x22>
    isAperture = 0;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	73fb      	strb	r3, [r7, #15]

  return isAperture;
 8009ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3714      	adds	r7, #20
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr
 8009f04:	200002c4 	.word	0x200002c4

08009f08 <_Z15enable_spad_bitPhmm>:

VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
                              uint32_t spadIndex) {
 8009f08:	b480      	push	{r7}
 8009f0a:	b089      	sub	sp, #36	; 0x24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
  VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009f14:	2300      	movs	r3, #0
 8009f16:	77fb      	strb	r3, [r7, #31]
  uint32_t cSpadsPerByte = 8;
 8009f18:	2308      	movs	r3, #8
 8009f1a:	61bb      	str	r3, [r7, #24]
  uint32_t coarseIndex;
  uint32_t fineIndex;

  coarseIndex = spadIndex / cSpadsPerByte;
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f24:	617b      	str	r3, [r7, #20]
  fineIndex = spadIndex % cSpadsPerByte;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	69ba      	ldr	r2, [r7, #24]
 8009f2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009f2e:	69b9      	ldr	r1, [r7, #24]
 8009f30:	fb01 f202 	mul.w	r2, r1, r2
 8009f34:	1a9b      	subs	r3, r3, r2
 8009f36:	613b      	str	r3, [r7, #16]
  if (coarseIndex >= size)
 8009f38:	697a      	ldr	r2, [r7, #20]
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d302      	bcc.n	8009f46 <_Z15enable_spad_bitPhmm+0x3e>
    status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009f40:	23ce      	movs	r3, #206	; 0xce
 8009f42:	77fb      	strb	r3, [r7, #31]
 8009f44:	e010      	b.n	8009f68 <_Z15enable_spad_bitPhmm+0x60>
  else
    spadArray[coarseIndex] |= (1 << fineIndex);
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	b25a      	sxtb	r2, r3
 8009f50:	2101      	movs	r1, #1
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	fa01 f303 	lsl.w	r3, r1, r3
 8009f58:	b25b      	sxtb	r3, r3
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	b259      	sxtb	r1, r3
 8009f5e:	68fa      	ldr	r2, [r7, #12]
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	4413      	add	r3, r2
 8009f64:	b2ca      	uxtb	r2, r1
 8009f66:	701a      	strb	r2, [r3, #0]

  return status;
 8009f68:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3724      	adds	r7, #36	; 0x24
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <_Z16set_ref_spad_mapP13VL53L0X_Dev_tPh>:
  }

  return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray) {
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  VL53L0X_Error status = VL53L0X_WriteMulti(
 8009f82:	2306      	movs	r3, #6
 8009f84:	683a      	ldr	r2, [r7, #0]
 8009f86:	21b0      	movs	r1, #176	; 0xb0
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f002 ff2c 	bl	800cde6 <VL53L0X_WriteMulti>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	73fb      	strb	r3, [r7, #15]
      Dev, VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, refSpadArray, 6);
  return status;
 8009f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3710      	adds	r7, #16
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <_Z16get_ref_spad_mapP13VL53L0X_Dev_tPh>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray) {
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b084      	sub	sp, #16
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	6039      	str	r1, [r7, #0]
  VL53L0X_Error status = VL53L0X_ReadMulti(
 8009fa8:	2306      	movs	r3, #6
 8009faa:	683a      	ldr	r2, [r7, #0]
 8009fac:	21b0      	movs	r1, #176	; 0xb0
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f002 ff44 	bl	800ce3c <VL53L0X_ReadMulti>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	73fb      	strb	r3, [r7, #15]
      Dev, VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, refSpadArray, 6);
  return status;
 8009fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm>:

VL53L0X_Error enable_ref_spads(VL53L0X_DEV Dev, uint8_t apertureSpads,
                               uint8_t goodSpadArray[], uint8_t spadArray[],
                               uint32_t size, uint32_t start, uint32_t offset,
                               uint32_t spadCount, uint32_t *lastSpad) {
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b08c      	sub	sp, #48	; 0x30
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	607a      	str	r2, [r7, #4]
 8009fce:	603b      	str	r3, [r7, #0]
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint32_t index;
  uint32_t i;
  int32_t nextGoodSpad = offset;
 8009fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fdc:	61fb      	str	r3, [r7, #28]
   *
   * This function applies to only aperture or only non-aperture spads.
   * Checks are performed to ensure this.
   */

  currentSpad = offset;
 8009fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fe0:	623b      	str	r3, [r7, #32]
  for (index = 0; index < spadCount; index++) {
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d231      	bcs.n	800a052 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0x8e>
    get_next_good_spad(goodSpadArray, size, currentSpad, &nextGoodSpad);
 8009fee:	f107 031c 	add.w	r3, r7, #28
 8009ff2:	6a3a      	ldr	r2, [r7, #32]
 8009ff4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f7ff ff0d 	bl	8009e16 <_Z18get_next_good_spadPhmmPl>

    if (nextGoodSpad == -1) {
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a002:	d103      	bne.n	800a00c <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0x48>
      status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a004:	23ce      	movs	r3, #206	; 0xce
 800a006:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      break;
 800a00a:	e022      	b.n	800a052 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0x8e>
    }

    /* Confirm that the next good SPAD is non-aperture */
    if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800a00c:	69fb      	ldr	r3, [r7, #28]
 800a00e:	461a      	mov	r2, r3
 800a010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a012:	4413      	add	r3, r2
 800a014:	4618      	mov	r0, r3
 800a016:	f7ff ff5d 	bl	8009ed4 <_Z11is_aperturem>
 800a01a:	4603      	mov	r3, r0
 800a01c:	461a      	mov	r2, r3
 800a01e:	7afb      	ldrb	r3, [r7, #11]
 800a020:	4293      	cmp	r3, r2
 800a022:	bf14      	ite	ne
 800a024:	2301      	movne	r3, #1
 800a026:	2300      	moveq	r3, #0
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d003      	beq.n	800a036 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0x72>
      /* if we can't get the required number of good aperture
       * spads from the current quadrant then this is an error
       */
      status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a02e:	23ce      	movs	r3, #206	; 0xce
 800a030:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      break;
 800a034:	e00d      	b.n	800a052 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0x8e>
    }
    currentSpad = (uint32_t)nextGoodSpad;
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	623b      	str	r3, [r7, #32]
    enable_spad_bit(spadArray, size, currentSpad);
 800a03a:	6a3a      	ldr	r2, [r7, #32]
 800a03c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a03e:	6838      	ldr	r0, [r7, #0]
 800a040:	f7ff ff62 	bl	8009f08 <_Z15enable_spad_bitPhmm>
    currentSpad++;
 800a044:	6a3b      	ldr	r3, [r7, #32]
 800a046:	3301      	adds	r3, #1
 800a048:	623b      	str	r3, [r7, #32]
  for (index = 0; index < spadCount; index++) {
 800a04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04c:	3301      	adds	r3, #1
 800a04e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a050:	e7c9      	b.n	8009fe6 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0x22>
  }
  *lastSpad = currentSpad;
 800a052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a054:	6a3a      	ldr	r2, [r7, #32]
 800a056:	601a      	str	r2, [r3, #0]

  if (status == VL53L0X_ERROR_NONE)
 800a058:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d106      	bne.n	800a06e <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0xaa>
    status = set_ref_spad_map(Dev, spadArray);
 800a060:	6839      	ldr	r1, [r7, #0]
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f7ff ff88 	bl	8009f78 <_Z16set_ref_spad_mapP13VL53L0X_Dev_tPh>
 800a068:	4603      	mov	r3, r0
 800a06a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (status == VL53L0X_ERROR_NONE) {
 800a06e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a072:	2b00      	cmp	r3, #0
 800a074:	d121      	bne.n	800a0ba <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0xf6>
    status = get_ref_spad_map(Dev, checkSpadArray);
 800a076:	f107 0314 	add.w	r3, r7, #20
 800a07a:	4619      	mov	r1, r3
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	f7ff ff8e 	bl	8009f9e <_Z16get_ref_spad_mapP13VL53L0X_Dev_tPh>
 800a082:	4603      	mov	r3, r0
 800a084:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    i = 0;
 800a088:	2300      	movs	r3, #0
 800a08a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Compare spad maps. If not equal report error. */
    while (i < size) {
 800a08c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a090:	429a      	cmp	r2, r3
 800a092:	d212      	bcs.n	800a0ba <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0xf6>
      if (spadArray[i] != checkSpadArray[i]) {
 800a094:	683a      	ldr	r2, [r7, #0]
 800a096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a098:	4413      	add	r3, r2
 800a09a:	781a      	ldrb	r2, [r3, #0]
 800a09c:	f107 0114 	add.w	r1, r7, #20
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a2:	440b      	add	r3, r1
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d003      	beq.n	800a0b2 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0xee>
        status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a0aa:	23ce      	movs	r3, #206	; 0xce
 800a0ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800a0b0:	e003      	b.n	800a0ba <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0xf6>
      }
      i++;
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	627b      	str	r3, [r7, #36]	; 0x24
    while (i < size) {
 800a0b8:	e7e8      	b.n	800a08c <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0xc8>
    }
  }
  return status;
 800a0ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3730      	adds	r7, #48	; 0x30
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt>:

VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
                                             uint16_t *refSignalRate) {
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b08a      	sub	sp, #40	; 0x28
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
 800a0ce:	6039      	str	r1, [r7, #0]
  VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  VL53L0X_RangingMeasurementData_t rangingMeasurementData;

  uint8_t SequenceConfig = 0;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  /* store the value of the sequence config,
   * this will be reset before the end of the function
   */

  SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a0e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  /*
   * This function performs a reference signal rate measurement.
   */
  if (status == VL53L0X_ERROR_NONE)
 800a0e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d107      	bne.n	800a0fe <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt+0x38>
    status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);
 800a0ee:	22c0      	movs	r2, #192	; 0xc0
 800a0f0:	2101      	movs	r1, #1
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f002 fecb 	bl	800ce8e <VL53L0X_WrByte>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (status == VL53L0X_ERROR_NONE)
 800a0fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a102:	2b00      	cmp	r3, #0
 800a104:	d108      	bne.n	800a118 <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt+0x52>
    status =
        VL53L0X_PerformSingleRangingMeasurement(Dev, &rangingMeasurementData);
 800a106:	f107 0308 	add.w	r3, r7, #8
 800a10a:	4619      	mov	r1, r3
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f7ff fc43 	bl	8009998 <VL53L0X_PerformSingleRangingMeasurement>
 800a112:	4603      	mov	r3, r0
 800a114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (status == VL53L0X_ERROR_NONE)
 800a118:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d107      	bne.n	800a130 <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt+0x6a>
    status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a120:	2201      	movs	r2, #1
 800a122:	21ff      	movs	r1, #255	; 0xff
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f002 feb2 	bl	800ce8e <VL53L0X_WrByte>
 800a12a:	4603      	mov	r3, r0
 800a12c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (status == VL53L0X_ERROR_NONE)
 800a130:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a134:	2b00      	cmp	r3, #0
 800a136:	d107      	bne.n	800a148 <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt+0x82>
    status = VL53L0X_RdWord(Dev, VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
 800a138:	683a      	ldr	r2, [r7, #0]
 800a13a:	21b6      	movs	r1, #182	; 0xb6
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f002 ff4d 	bl	800cfdc <VL53L0X_RdWord>
 800a142:	4603      	mov	r3, r0
 800a144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                            refSignalRate);

  if (status == VL53L0X_ERROR_NONE)
 800a148:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d107      	bne.n	800a160 <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt+0x9a>
    status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a150:	2200      	movs	r2, #0
 800a152:	21ff      	movs	r1, #255	; 0xff
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f002 fe9a 	bl	800ce8e <VL53L0X_WrByte>
 800a15a:	4603      	mov	r3, r0
 800a15c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (status == VL53L0X_ERROR_NONE) {
 800a160:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a164:	2b00      	cmp	r3, #0
 800a166:	d112      	bne.n	800a18e <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt+0xc8>
    /* restore the previous Sequence Config */
    status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfig);
 800a168:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a16c:	461a      	mov	r2, r3
 800a16e:	2101      	movs	r1, #1
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f002 fe8c 	bl	800ce8e <VL53L0X_WrByte>
 800a176:	4603      	mov	r3, r0
 800a178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (status == VL53L0X_ERROR_NONE)
 800a17c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a180:	2b00      	cmp	r3, #0
 800a182:	d104      	bne.n	800a18e <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt+0xc8>
      PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a18a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  }

  return status;
 800a18e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a192:	4618      	mov	r0, r3
 800a194:	3728      	adds	r7, #40	; 0x28
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
                                                  uint32_t *refSpadCount,
                                                  uint8_t *isApertureSpads) {
 800a19a:	b590      	push	{r4, r7, lr}
 800a19c:	b09d      	sub	sp, #116	; 0x74
 800a19e:	af06      	add	r7, sp, #24
 800a1a0:	60f8      	str	r0, [r7, #12]
 800a1a2:	60b9      	str	r1, [r7, #8]
 800a1a4:	607a      	str	r2, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  uint8_t lastSpadArray[6];
  uint8_t startSelect = 0xB4;
 800a1ac:	23b4      	movs	r3, #180	; 0xb4
 800a1ae:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  uint32_t minimumSpadCount = 3;
 800a1b2:	2303      	movs	r3, #3
 800a1b4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t maxSpadCount = 44;
 800a1b6:	232c      	movs	r3, #44	; 0x2c
 800a1b8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t currentSpadIndex = 0;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t lastSpadIndex = 0;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	61bb      	str	r3, [r7, #24]
  int32_t nextGoodSpad = 0;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	617b      	str	r3, [r7, #20]
  uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800a1c6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800a1ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t peakSignalRateRef;
  uint32_t needAptSpads = 0;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t index = 0;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t spadArraySize = 6;
 800a1d4:	2306      	movs	r3, #6
 800a1d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t signalRateDiff = 0;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t lastSignalRateDiff = 0;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t complete = 0;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  uint8_t VhvSettings = 0;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	747b      	strb	r3, [r7, #17]
  uint8_t PhaseCal = 0;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	743b      	strb	r3, [r7, #16]
  uint32_t refSpadCount_int = 0;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t isApertureSpads_int = 0;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
   * The start point is currently fixed to 180, which lies towards the end
   * of the non-aperture quadrant and runs in to the adjacent aperture
   * quadrant.
   */

  targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800a1fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
   * This is a short term implementation. The good spad map will be
   * provided as an input.
   * Note that there are 6 bytes. Only the first 44 bits will be used to
   * represent spads.
   */
  for (index = 0; index < spadArraySize; index++)
 800a200:	2300      	movs	r3, #0
 800a202:	64bb      	str	r3, [r7, #72]	; 0x48
 800a204:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a208:	429a      	cmp	r2, r3
 800a20a:	d20a      	bcs.n	800a222 <VL53L0X_perform_ref_spad_management+0x88>
    Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800a20c:	68fa      	ldr	r2, [r7, #12]
 800a20e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a210:	4413      	add	r3, r2
 800a212:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800a216:	2200      	movs	r2, #0
 800a218:	701a      	strb	r2, [r3, #0]
  for (index = 0; index < spadArraySize; index++)
 800a21a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a21c:	3301      	adds	r3, #1
 800a21e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a220:	e7f0      	b.n	800a204 <VL53L0X_perform_ref_spad_management+0x6a>

  Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a222:	2201      	movs	r2, #1
 800a224:	21ff      	movs	r1, #255	; 0xff
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f002 fe31 	bl	800ce8e <VL53L0X_WrByte>
 800a22c:	4603      	mov	r3, r0
 800a22e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  if (Status == VL53L0X_ERROR_NONE)
 800a232:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a236:	2b00      	cmp	r3, #0
 800a238:	d107      	bne.n	800a24a <VL53L0X_perform_ref_spad_management+0xb0>
    Status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 800a23a:	2200      	movs	r2, #0
 800a23c:	214f      	movs	r1, #79	; 0x4f
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f002 fe25 	bl	800ce8e <VL53L0X_WrByte>
 800a244:	4603      	mov	r3, r0
 800a246:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  if (Status == VL53L0X_ERROR_NONE)
 800a24a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d107      	bne.n	800a262 <VL53L0X_perform_ref_spad_management+0xc8>
    Status = VL53L0X_WrByte(
 800a252:	222c      	movs	r2, #44	; 0x2c
 800a254:	214e      	movs	r1, #78	; 0x4e
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f002 fe19 	bl	800ce8e <VL53L0X_WrByte>
 800a25c:	4603      	mov	r3, r0
 800a25e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

  if (Status == VL53L0X_ERROR_NONE)
 800a262:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a266:	2b00      	cmp	r3, #0
 800a268:	d107      	bne.n	800a27a <VL53L0X_perform_ref_spad_management+0xe0>
    Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a26a:	2200      	movs	r2, #0
 800a26c:	21ff      	movs	r1, #255	; 0xff
 800a26e:	68f8      	ldr	r0, [r7, #12]
 800a270:	f002 fe0d 	bl	800ce8e <VL53L0X_WrByte>
 800a274:	4603      	mov	r3, r0
 800a276:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  if (Status == VL53L0X_ERROR_NONE)
 800a27a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d109      	bne.n	800a296 <VL53L0X_perform_ref_spad_management+0xfc>
    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
 800a282:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a286:	461a      	mov	r2, r3
 800a288:	21b6      	movs	r1, #182	; 0xb6
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f002 fdff 	bl	800ce8e <VL53L0X_WrByte>
 800a290:	4603      	mov	r3, r0
 800a292:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                            startSelect);

  if (Status == VL53L0X_ERROR_NONE)
 800a296:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d107      	bne.n	800a2ae <VL53L0X_perform_ref_spad_management+0x114>
    Status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);
 800a29e:	2200      	movs	r2, #0
 800a2a0:	2180      	movs	r1, #128	; 0x80
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f002 fdf3 	bl	800ce8e <VL53L0X_WrByte>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  /* Perform ref calibration */
  if (Status == VL53L0X_ERROR_NONE)
 800a2ae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10a      	bne.n	800a2cc <VL53L0X_perform_ref_spad_management+0x132>
    Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings, &PhaseCal, 0);
 800a2b6:	f107 0210 	add.w	r2, r7, #16
 800a2ba:	f107 0111 	add.w	r1, r7, #17
 800a2be:	2300      	movs	r3, #0
 800a2c0:	68f8      	ldr	r0, [r7, #12]
 800a2c2:	f000 fb1f 	bl	800a904 <VL53L0X_perform_ref_calibration>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  if (Status == VL53L0X_ERROR_NONE) {
 800a2cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d121      	bne.n	800a318 <VL53L0X_perform_ref_spad_management+0x17e>
    /* Enable Minimum NON-APERTURE Spads */
    currentSpadIndex = 0;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	653b      	str	r3, [r7, #80]	; 0x50
    lastSpadIndex = currentSpadIndex;
 800a2d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2da:	61bb      	str	r3, [r7, #24]
    needAptSpads = 0;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	64fb      	str	r3, [r7, #76]	; 0x4c
    Status = enable_ref_spads(
 800a2e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2e2:	b2d9      	uxtb	r1, r3
        Dev, needAptSpads, Dev->Data.SpadData.RefGoodSpadMap,
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f503 7095 	add.w	r0, r3, #298	; 0x12a
        Dev->Data.SpadData.RefSpadEnables, spadArraySize, startSelect,
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f503 7492 	add.w	r4, r3, #292	; 0x124
    Status = enable_ref_spads(
 800a2f0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a2f4:	f107 0218 	add.w	r2, r7, #24
 800a2f8:	9204      	str	r2, [sp, #16]
 800a2fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2fc:	9203      	str	r2, [sp, #12]
 800a2fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a300:	9202      	str	r2, [sp, #8]
 800a302:	9301      	str	r3, [sp, #4]
 800a304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	4623      	mov	r3, r4
 800a30a:	4602      	mov	r2, r0
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	f7ff fe59 	bl	8009fc4 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm>
 800a312:	4603      	mov	r3, r0
 800a314:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        currentSpadIndex, minimumSpadCount, &lastSpadIndex);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800a318:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d179      	bne.n	800a414 <VL53L0X_perform_ref_spad_management+0x27a>
    currentSpadIndex = lastSpadIndex;
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	653b      	str	r3, [r7, #80]	; 0x50

    Status = perform_ref_signal_measurement(Dev, &peakSignalRateRef);
 800a324:	f107 0312 	add.w	r3, r7, #18
 800a328:	4619      	mov	r1, r3
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f7ff fecb 	bl	800a0c6 <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt>
 800a330:	4603      	mov	r3, r0
 800a332:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if ((Status == VL53L0X_ERROR_NONE) && (peakSignalRateRef > targetRefRate)) {
 800a336:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d166      	bne.n	800a40c <VL53L0X_perform_ref_spad_management+0x272>
 800a33e:	8a7b      	ldrh	r3, [r7, #18]
 800a340:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a342:	429a      	cmp	r2, r3
 800a344:	d262      	bcs.n	800a40c <VL53L0X_perform_ref_spad_management+0x272>
      /* Signal rate measurement too high,
       * switch to APERTURE SPADs */

      for (index = 0; index < spadArraySize; index++)
 800a346:	2300      	movs	r3, #0
 800a348:	64bb      	str	r3, [r7, #72]	; 0x48
 800a34a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34e:	429a      	cmp	r2, r3
 800a350:	d20a      	bcs.n	800a368 <VL53L0X_perform_ref_spad_management+0x1ce>
        Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800a352:	68fa      	ldr	r2, [r7, #12]
 800a354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a356:	4413      	add	r3, r2
 800a358:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800a35c:	2200      	movs	r2, #0
 800a35e:	701a      	strb	r2, [r3, #0]
      for (index = 0; index < spadArraySize; index++)
 800a360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a362:	3301      	adds	r3, #1
 800a364:	64bb      	str	r3, [r7, #72]	; 0x48
 800a366:	e7f0      	b.n	800a34a <VL53L0X_perform_ref_spad_management+0x1b0>

      /* Increment to the first APERTURE spad */
      while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800a368:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800a36c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a36e:	4413      	add	r3, r2
 800a370:	4618      	mov	r0, r3
 800a372:	f7ff fdaf 	bl	8009ed4 <_Z11is_aperturem>
 800a376:	4603      	mov	r3, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d105      	bne.n	800a388 <VL53L0X_perform_ref_spad_management+0x1ee>
 800a37c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a380:	429a      	cmp	r2, r3
 800a382:	d201      	bcs.n	800a388 <VL53L0X_perform_ref_spad_management+0x1ee>
 800a384:	2301      	movs	r3, #1
 800a386:	e000      	b.n	800a38a <VL53L0X_perform_ref_spad_management+0x1f0>
 800a388:	2300      	movs	r3, #0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d003      	beq.n	800a396 <VL53L0X_perform_ref_spad_management+0x1fc>
             (currentSpadIndex < maxSpadCount)) {
        currentSpadIndex++;
 800a38e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a390:	3301      	adds	r3, #1
 800a392:	653b      	str	r3, [r7, #80]	; 0x50
      while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800a394:	e7e8      	b.n	800a368 <VL53L0X_perform_ref_spad_management+0x1ce>
      }

      needAptSpads = 1;
 800a396:	2301      	movs	r3, #1
 800a398:	64fb      	str	r3, [r7, #76]	; 0x4c

      Status = enable_ref_spads(
 800a39a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a39c:	b2d9      	uxtb	r1, r3
          Dev, needAptSpads, Dev->Data.SpadData.RefGoodSpadMap,
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
          Dev->Data.SpadData.RefSpadEnables, spadArraySize, startSelect,
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f503 7492 	add.w	r4, r3, #292	; 0x124
      Status = enable_ref_spads(
 800a3aa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a3ae:	f107 0218 	add.w	r2, r7, #24
 800a3b2:	9204      	str	r2, [sp, #16]
 800a3b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3b6:	9203      	str	r2, [sp, #12]
 800a3b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a3ba:	9202      	str	r2, [sp, #8]
 800a3bc:	9301      	str	r3, [sp, #4]
 800a3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c0:	9300      	str	r3, [sp, #0]
 800a3c2:	4623      	mov	r3, r4
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f7ff fdfc 	bl	8009fc4 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          currentSpadIndex, minimumSpadCount, &lastSpadIndex);

      if (Status == VL53L0X_ERROR_NONE) {
 800a3d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d11b      	bne.n	800a412 <VL53L0X_perform_ref_spad_management+0x278>
        currentSpadIndex = lastSpadIndex;
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	653b      	str	r3, [r7, #80]	; 0x50
        Status = perform_ref_signal_measurement(Dev, &peakSignalRateRef);
 800a3de:	f107 0312 	add.w	r3, r7, #18
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	f7ff fe6e 	bl	800a0c6 <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if ((Status == VL53L0X_ERROR_NONE) &&
 800a3f0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d10c      	bne.n	800a412 <VL53L0X_perform_ref_spad_management+0x278>
            (peakSignalRateRef > targetRefRate)) {
 800a3f8:	8a7b      	ldrh	r3, [r7, #18]
        if ((Status == VL53L0X_ERROR_NONE) &&
 800a3fa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d208      	bcs.n	800a412 <VL53L0X_perform_ref_spad_management+0x278>
           * setting the minimum number of
           * APERTURE spads. Can do no more
           * therefore set the min number of
           * aperture spads as the result.
           */
          isApertureSpads_int = 1;
 800a400:	2301      	movs	r3, #1
 800a402:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          refSpadCount_int = minimumSpadCount;
 800a406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a408:	63fb      	str	r3, [r7, #60]	; 0x3c
      if (Status == VL53L0X_ERROR_NONE) {
 800a40a:	e002      	b.n	800a412 <VL53L0X_perform_ref_spad_management+0x278>
        }
      }
    } else {
      needAptSpads = 0;
 800a40c:	2300      	movs	r3, #0
 800a40e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a410:	e000      	b.n	800a414 <VL53L0X_perform_ref_spad_management+0x27a>
      if (Status == VL53L0X_ERROR_NONE) {
 800a412:	bf00      	nop
    }
  }

  if ((Status == VL53L0X_ERROR_NONE) && (peakSignalRateRef < targetRefRate)) {
 800a414:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a418:	2b00      	cmp	r3, #0
 800a41a:	f040 80b3 	bne.w	800a584 <VL53L0X_perform_ref_spad_management+0x3ea>
 800a41e:	8a7b      	ldrh	r3, [r7, #18]
 800a420:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a422:	429a      	cmp	r2, r3
 800a424:	f240 80ae 	bls.w	800a584 <VL53L0X_perform_ref_spad_management+0x3ea>
    /* At this point, the minimum number of either aperture
     * or non-aperture spads have been set. Proceed to add
     * spads and perform measurements until the target
     * reference is reached.
     */
    isApertureSpads_int = needAptSpads;
 800a428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a42a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    refSpadCount_int = minimumSpadCount;
 800a42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a430:	63fb      	str	r3, [r7, #60]	; 0x3c

    memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables, spadArraySize);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800a438:	f107 031c 	add.w	r3, r7, #28
 800a43c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a43e:	4618      	mov	r0, r3
 800a440:	f002 fe56 	bl	800d0f0 <memcpy>
    lastSignalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800a444:	8a7b      	ldrh	r3, [r7, #18]
 800a446:	461a      	mov	r2, r3
 800a448:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	bfb8      	it	lt
 800a450:	425b      	neglt	r3, r3
 800a452:	647b      	str	r3, [r7, #68]	; 0x44
    complete = 0;
 800a454:	2300      	movs	r3, #0
 800a456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    while (!complete) {
 800a45a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a45e:	2b00      	cmp	r3, #0
 800a460:	f040 8090 	bne.w	800a584 <VL53L0X_perform_ref_spad_management+0x3ea>
      get_next_good_spad(Dev->Data.SpadData.RefGoodSpadMap, spadArraySize,
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f503 7095 	add.w	r0, r3, #298	; 0x12a
 800a46a:	f107 0314 	add.w	r3, r7, #20
 800a46e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a470:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a472:	f7ff fcd0 	bl	8009e16 <_Z18get_next_good_spadPhmmPl>
                         currentSpadIndex, &nextGoodSpad);

      if (nextGoodSpad == -1) {
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47c:	d103      	bne.n	800a486 <VL53L0X_perform_ref_spad_management+0x2ec>
        Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a47e:	23ce      	movs	r3, #206	; 0xce
 800a480:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        break;
 800a484:	e07e      	b.n	800a584 <VL53L0X_perform_ref_spad_management+0x3ea>
      }

      (refSpadCount_int)++;
 800a486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a488:	3301      	adds	r3, #1
 800a48a:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* Cannot combine Aperture and Non-Aperture spads, so
       * ensure the current spad is of the correct type.
       */
      if (is_aperture((uint32_t)startSelect + nextGoodSpad) != needAptSpads) {
 800a48c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800a490:	697a      	ldr	r2, [r7, #20]
 800a492:	4413      	add	r3, r2
 800a494:	4618      	mov	r0, r3
 800a496:	f7ff fd1d 	bl	8009ed4 <_Z11is_aperturem>
 800a49a:	4603      	mov	r3, r0
 800a49c:	461a      	mov	r2, r3
 800a49e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	bf14      	ite	ne
 800a4a4:	2301      	movne	r3, #1
 800a4a6:	2300      	moveq	r3, #0
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d003      	beq.n	800a4b6 <VL53L0X_perform_ref_spad_management+0x31c>
        Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a4ae:	23ce      	movs	r3, #206	; 0xce
 800a4b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        break;
 800a4b4:	e066      	b.n	800a584 <VL53L0X_perform_ref_spad_management+0x3ea>
      }

      currentSpadIndex = nextGoodSpad;
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	653b      	str	r3, [r7, #80]	; 0x50
      Status = enable_spad_bit(Dev->Data.SpadData.RefSpadEnables, spadArraySize,
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800a4c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a4c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7ff fd1f 	bl	8009f08 <_Z15enable_spad_bitPhmm>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                               currentSpadIndex);

      if (Status == VL53L0X_ERROR_NONE) {
 800a4d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d10c      	bne.n	800a4f2 <VL53L0X_perform_ref_spad_management+0x358>
        currentSpadIndex++;
 800a4d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4da:	3301      	adds	r3, #1
 800a4dc:	653b      	str	r3, [r7, #80]	; 0x50
        /* Proceed to apply the additional spad and
         * perform measurement. */
        Status = set_ref_spad_map(Dev, Dev->Data.SpadData.RefSpadEnables);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	68f8      	ldr	r0, [r7, #12]
 800a4e8:	f7ff fd46 	bl	8009f78 <_Z16set_ref_spad_mapP13VL53L0X_Dev_tPh>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      }

      if (Status != VL53L0X_ERROR_NONE)
 800a4f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d141      	bne.n	800a57e <VL53L0X_perform_ref_spad_management+0x3e4>
        break;

      Status = perform_ref_signal_measurement(Dev, &peakSignalRateRef);
 800a4fa:	f107 0312 	add.w	r3, r7, #18
 800a4fe:	4619      	mov	r1, r3
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f7ff fde0 	bl	800a0c6 <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt>
 800a506:	4603      	mov	r3, r0
 800a508:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

      if (Status != VL53L0X_ERROR_NONE)
 800a50c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a510:	2b00      	cmp	r3, #0
 800a512:	d136      	bne.n	800a582 <VL53L0X_perform_ref_spad_management+0x3e8>
        break;

      signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800a514:	8a7b      	ldrh	r3, [r7, #18]
 800a516:	461a      	mov	r2, r3
 800a518:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a51a:	1ad3      	subs	r3, r2, r3
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	bfb8      	it	lt
 800a520:	425b      	neglt	r3, r3
 800a522:	627b      	str	r3, [r7, #36]	; 0x24

      if (peakSignalRateRef > targetRefRate) {
 800a524:	8a7b      	ldrh	r3, [r7, #18]
 800a526:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a528:	429a      	cmp	r2, r3
 800a52a:	d21c      	bcs.n	800a566 <VL53L0X_perform_ref_spad_management+0x3cc>
        /* Select the spad map that provides the
         * measurement closest to the target rate,
         * either above or below it.
         */
        if (signalRateDiff > lastSignalRateDiff) {
 800a52c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a52e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a530:	429a      	cmp	r2, r3
 800a532:	d914      	bls.n	800a55e <VL53L0X_perform_ref_spad_management+0x3c4>
          /* Previous spad map produced a closer
           * measurement, so choose this. */
          Status = set_ref_spad_map(Dev, lastSpadArray);
 800a534:	f107 031c 	add.w	r3, r7, #28
 800a538:	4619      	mov	r1, r3
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f7ff fd1c 	bl	8009f78 <_Z16set_ref_spad_mapP13VL53L0X_Dev_tPh>
 800a540:	4603      	mov	r3, r0
 800a542:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          memcpy(Dev->Data.SpadData.RefSpadEnables, lastSpadArray,
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800a54c:	f107 011c 	add.w	r1, r7, #28
 800a550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a552:	4618      	mov	r0, r3
 800a554:	f002 fdcc 	bl	800d0f0 <memcpy>
                 spadArraySize);

          (refSpadCount_int)--;
 800a558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a55a:	3b01      	subs	r3, #1
 800a55c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        complete = 1;
 800a55e:	2301      	movs	r3, #1
 800a560:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a564:	e779      	b.n	800a45a <VL53L0X_perform_ref_spad_management+0x2c0>
      } else {
        /* Continue to add spads */
        lastSignalRateDiff = signalRateDiff;
 800a566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a568:	647b      	str	r3, [r7, #68]	; 0x44
        memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables, spadArraySize);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800a570:	f107 031c 	add.w	r3, r7, #28
 800a574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a576:	4618      	mov	r0, r3
 800a578:	f002 fdba 	bl	800d0f0 <memcpy>
    while (!complete) {
 800a57c:	e76d      	b.n	800a45a <VL53L0X_perform_ref_spad_management+0x2c0>
        break;
 800a57e:	bf00      	nop
 800a580:	e000      	b.n	800a584 <VL53L0X_perform_ref_spad_management+0x3ea>
        break;
 800a582:	bf00      	nop
      }

    } /* while */
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800a584:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d115      	bne.n	800a5b8 <VL53L0X_perform_ref_spad_management+0x41e>
    *refSpadCount = refSpadCount_int;
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a590:	601a      	str	r2, [r3, #0]
    *isApertureSpads = isApertureSpads_int;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800a598:	701a      	strb	r2, [r3, #0]

    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2201      	movs	r2, #1
 800a59e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadCount,
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	b2da      	uxtb	r2, r3
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
                                       (uint8_t)(*refSpadCount));
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadType,
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	781a      	ldrb	r2, [r3, #0]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                                       *isApertureSpads);
  }

  return Status;
 800a5b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	375c      	adds	r7, #92	; 0x5c
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd90      	pop	{r4, r7, pc}

0800a5c4 <_Z38VL53L0X_perform_single_ref_calibrationP13VL53L0X_Dev_th>:

  return Status;
}

VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
                                                     uint8_t vhv_init_byte) {
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	70fb      	strb	r3, [r7, #3]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 800a5d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d10a      	bne.n	800a5f2 <_Z38VL53L0X_perform_single_ref_calibrationP13VL53L0X_Dev_th+0x2e>
    Status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800a5dc:	78fb      	ldrb	r3, [r7, #3]
 800a5de:	f043 0301 	orr.w	r3, r3, #1
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	2100      	movs	r1, #0
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f002 fc50 	bl	800ce8e <VL53L0X_WrByte>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	73fb      	strb	r3, [r7, #15]
                       VL53L0X_REG_SYSRANGE_MODE_START_STOP | vhv_init_byte);

  if (Status == VL53L0X_ERROR_NONE)
 800a5f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d104      	bne.n	800a604 <_Z38VL53L0X_perform_single_ref_calibrationP13VL53L0X_Dev_th+0x40>
    Status = VL53L0X_measurement_poll_for_completion(Dev);
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 f9d4 	bl	800a9a8 <VL53L0X_measurement_poll_for_completion>
 800a600:	4603      	mov	r3, r0
 800a602:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 800a604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d105      	bne.n	800a618 <_Z38VL53L0X_perform_single_ref_calibrationP13VL53L0X_Dev_th+0x54>
    Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a60c:	2100      	movs	r1, #0
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f7ff fb4a 	bl	8009ca8 <VL53L0X_ClearInterruptMask>
 800a614:	4603      	mov	r3, r0
 800a616:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 800a618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d106      	bne.n	800a62e <_Z38VL53L0X_perform_single_ref_calibrationP13VL53L0X_Dev_th+0x6a>
    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800a620:	2200      	movs	r2, #0
 800a622:	2100      	movs	r1, #0
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f002 fc32 	bl	800ce8e <VL53L0X_WrByte>
 800a62a:	4603      	mov	r3, r0
 800a62c:	73fb      	strb	r3, [r7, #15]

  return Status;
 800a62e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a632:	4618      	mov	r0, r3
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh>:

VL53L0X_Error VL53L0X_ref_calibration_io(
    VL53L0X_DEV Dev, uint8_t read_not_write, uint8_t VhvSettings,
    uint8_t PhaseCal, uint8_t *pVhvSettings, uint8_t *pPhaseCal,
    const uint8_t vhv_enable, const uint8_t phase_enable) {
 800a63a:	b580      	push	{r7, lr}
 800a63c:	b084      	sub	sp, #16
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
 800a642:	4608      	mov	r0, r1
 800a644:	4611      	mov	r1, r2
 800a646:	461a      	mov	r2, r3
 800a648:	4603      	mov	r3, r0
 800a64a:	70fb      	strb	r3, [r7, #3]
 800a64c:	460b      	mov	r3, r1
 800a64e:	70bb      	strb	r3, [r7, #2]
 800a650:	4613      	mov	r3, r2
 800a652:	707b      	strb	r3, [r7, #1]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a654:	2300      	movs	r3, #0
 800a656:	73fb      	strb	r3, [r7, #15]
  uint8_t PhaseCalint = 0;
 800a658:	2300      	movs	r3, #0
 800a65a:	73bb      	strb	r3, [r7, #14]

  /* Read VHV from device */
  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a65c:	2201      	movs	r2, #1
 800a65e:	21ff      	movs	r1, #255	; 0xff
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f002 fc14 	bl	800ce8e <VL53L0X_WrByte>
 800a666:	4603      	mov	r3, r0
 800a668:	461a      	mov	r2, r3
 800a66a:	7bfb      	ldrb	r3, [r7, #15]
 800a66c:	4313      	orrs	r3, r2
 800a66e:	73fb      	strb	r3, [r7, #15]
  Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a670:	2200      	movs	r2, #0
 800a672:	2100      	movs	r1, #0
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f002 fc0a 	bl	800ce8e <VL53L0X_WrByte>
 800a67a:	4603      	mov	r3, r0
 800a67c:	461a      	mov	r2, r3
 800a67e:	7bfb      	ldrb	r3, [r7, #15]
 800a680:	4313      	orrs	r3, r2
 800a682:	73fb      	strb	r3, [r7, #15]
  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a684:	2200      	movs	r2, #0
 800a686:	21ff      	movs	r1, #255	; 0xff
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f002 fc00 	bl	800ce8e <VL53L0X_WrByte>
 800a68e:	4603      	mov	r3, r0
 800a690:	461a      	mov	r2, r3
 800a692:	7bfb      	ldrb	r3, [r7, #15]
 800a694:	4313      	orrs	r3, r2
 800a696:	73fb      	strb	r3, [r7, #15]

  if (read_not_write) {
 800a698:	78fb      	ldrb	r3, [r7, #3]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d01e      	beq.n	800a6dc <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh+0xa2>
    if (vhv_enable)
 800a69e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d009      	beq.n	800a6ba <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh+0x80>
      Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800a6a6:	69ba      	ldr	r2, [r7, #24]
 800a6a8:	21cb      	movs	r1, #203	; 0xcb
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f002 fc75 	bl	800cf9a <VL53L0X_RdByte>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	7bfb      	ldrb	r3, [r7, #15]
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	73fb      	strb	r3, [r7, #15]
    if (phase_enable)
 800a6ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d02a      	beq.n	800a718 <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh+0xde>
      Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800a6c2:	f107 030e 	add.w	r3, r7, #14
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	21ee      	movs	r1, #238	; 0xee
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f002 fc65 	bl	800cf9a <VL53L0X_RdByte>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	7bfb      	ldrb	r3, [r7, #15]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	73fb      	strb	r3, [r7, #15]
 800a6da:	e01d      	b.n	800a718 <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh+0xde>
  } else {
    if (vhv_enable)
 800a6dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d00a      	beq.n	800a6fa <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh+0xc0>
      Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800a6e4:	78bb      	ldrb	r3, [r7, #2]
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	21cb      	movs	r1, #203	; 0xcb
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f002 fbcf 	bl	800ce8e <VL53L0X_WrByte>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	7bfb      	ldrb	r3, [r7, #15]
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	73fb      	strb	r3, [r7, #15]
    if (phase_enable)
 800a6fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00a      	beq.n	800a718 <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh+0xde>
      Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800a702:	787b      	ldrb	r3, [r7, #1]
 800a704:	2280      	movs	r2, #128	; 0x80
 800a706:	21ee      	movs	r1, #238	; 0xee
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f002 fc04 	bl	800cf16 <VL53L0X_UpdateByte>
 800a70e:	4603      	mov	r3, r0
 800a710:	461a      	mov	r2, r3
 800a712:	7bfb      	ldrb	r3, [r7, #15]
 800a714:	4313      	orrs	r3, r2
 800a716:	73fb      	strb	r3, [r7, #15]
  }

  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a718:	2201      	movs	r2, #1
 800a71a:	21ff      	movs	r1, #255	; 0xff
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f002 fbb6 	bl	800ce8e <VL53L0X_WrByte>
 800a722:	4603      	mov	r3, r0
 800a724:	461a      	mov	r2, r3
 800a726:	7bfb      	ldrb	r3, [r7, #15]
 800a728:	4313      	orrs	r3, r2
 800a72a:	73fb      	strb	r3, [r7, #15]
  Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a72c:	2201      	movs	r2, #1
 800a72e:	2100      	movs	r1, #0
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f002 fbac 	bl	800ce8e <VL53L0X_WrByte>
 800a736:	4603      	mov	r3, r0
 800a738:	461a      	mov	r2, r3
 800a73a:	7bfb      	ldrb	r3, [r7, #15]
 800a73c:	4313      	orrs	r3, r2
 800a73e:	73fb      	strb	r3, [r7, #15]
  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a740:	2200      	movs	r2, #0
 800a742:	21ff      	movs	r1, #255	; 0xff
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f002 fba2 	bl	800ce8e <VL53L0X_WrByte>
 800a74a:	4603      	mov	r3, r0
 800a74c:	461a      	mov	r2, r3
 800a74e:	7bfb      	ldrb	r3, [r7, #15]
 800a750:	4313      	orrs	r3, r2
 800a752:	73fb      	strb	r3, [r7, #15]

  *pPhaseCal = (uint8_t)(PhaseCalint & 0xEF);
 800a754:	7bbb      	ldrb	r3, [r7, #14]
 800a756:	f023 0310 	bic.w	r3, r3, #16
 800a75a:	b2da      	uxtb	r2, r3
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	701a      	strb	r2, [r3, #0]

  return Status;
 800a760:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a764:	4618      	mov	r0, r3
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh>:

VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
                                              uint8_t *pVhvSettings,
                                              const uint8_t get_data_enable,
                                              const uint8_t restore_config) {
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b08a      	sub	sp, #40	; 0x28
 800a770:	af04      	add	r7, sp, #16
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	4611      	mov	r1, r2
 800a778:	461a      	mov	r2, r3
 800a77a:	460b      	mov	r3, r1
 800a77c:	71fb      	strb	r3, [r7, #7]
 800a77e:	4613      	mov	r3, r2
 800a780:	71bb      	strb	r3, [r7, #6]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a782:	2300      	movs	r3, #0
 800a784:	75fb      	strb	r3, [r7, #23]
  uint8_t SequenceConfig = 0;
 800a786:	2300      	movs	r3, #0
 800a788:	75bb      	strb	r3, [r7, #22]
  uint8_t VhvSettings = 0;
 800a78a:	2300      	movs	r3, #0
 800a78c:	757b      	strb	r3, [r7, #21]
  uint8_t PhaseCal = 0;
 800a78e:	2300      	movs	r3, #0
 800a790:	753b      	strb	r3, [r7, #20]
  uint8_t PhaseCalInt = 0;
 800a792:	2300      	movs	r3, #0
 800a794:	74fb      	strb	r3, [r7, #19]

  /* store the value of the sequence config,
   * this will be reset before the end of the function
   */

  if (restore_config)
 800a796:	79bb      	ldrb	r3, [r7, #6]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d003      	beq.n	800a7a4 <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh+0x38>
    SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a7a2:	75bb      	strb	r3, [r7, #22]

  /* Run VHV */
  Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	2101      	movs	r1, #1
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f002 fb70 	bl	800ce8e <VL53L0X_WrByte>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	75fb      	strb	r3, [r7, #23]

  if (Status == VL53L0X_ERROR_NONE)
 800a7b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d105      	bne.n	800a7c6 <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh+0x5a>
    Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800a7ba:	2140      	movs	r1, #64	; 0x40
 800a7bc:	68f8      	ldr	r0, [r7, #12]
 800a7be:	f7ff ff01 	bl	800a5c4 <_Z38VL53L0X_perform_single_ref_calibrationP13VL53L0X_Dev_th>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	75fb      	strb	r3, [r7, #23]

  /* Read VHV from device */
  if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800a7c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d115      	bne.n	800a7fa <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh+0x8e>
 800a7ce:	79fb      	ldrb	r3, [r7, #7]
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d112      	bne.n	800a7fa <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh+0x8e>
    Status = VL53L0X_ref_calibration_io(Dev, 1, VhvSettings,
 800a7d4:	7d39      	ldrb	r1, [r7, #20]
 800a7d6:	7d7a      	ldrb	r2, [r7, #21]
 800a7d8:	2300      	movs	r3, #0
 800a7da:	9303      	str	r3, [sp, #12]
 800a7dc:	2301      	movs	r3, #1
 800a7de:	9302      	str	r3, [sp, #8]
 800a7e0:	f107 0313 	add.w	r3, r7, #19
 800a7e4:	9301      	str	r3, [sp, #4]
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	2101      	movs	r1, #1
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f7ff ff23 	bl	800a63a <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	75fb      	strb	r3, [r7, #23]
 800a7f8:	e002      	b.n	800a800 <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh+0x94>
                                        PhaseCal, /* Not used here */
                                        pVhvSettings, &PhaseCalInt, 1, 0);
  } else
    *pVhvSettings = 0;
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	701a      	strb	r2, [r3, #0]

  if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800a800:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d112      	bne.n	800a82e <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh+0xc2>
 800a808:	79bb      	ldrb	r3, [r7, #6]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00f      	beq.n	800a82e <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh+0xc2>
    /* restore the previous Sequence Config */
    Status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfig);
 800a80e:	7dbb      	ldrb	r3, [r7, #22]
 800a810:	461a      	mov	r2, r3
 800a812:	2101      	movs	r1, #1
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	f002 fb3a 	bl	800ce8e <VL53L0X_WrByte>
 800a81a:	4603      	mov	r3, r0
 800a81c:	75fb      	strb	r3, [r7, #23]
    if (Status == VL53L0X_ERROR_NONE)
 800a81e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d103      	bne.n	800a82e <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh+0xc2>
      PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	7dba      	ldrb	r2, [r7, #22]
 800a82a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  }

  return Status;
 800a82e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a832:	4618      	mov	r0, r3
 800a834:	3718      	adds	r7, #24
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
                                                uint8_t *pPhaseCal,
                                                const uint8_t get_data_enable,
                                                const uint8_t restore_config) {
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b08a      	sub	sp, #40	; 0x28
 800a83e:	af04      	add	r7, sp, #16
 800a840:	60f8      	str	r0, [r7, #12]
 800a842:	60b9      	str	r1, [r7, #8]
 800a844:	4611      	mov	r1, r2
 800a846:	461a      	mov	r2, r3
 800a848:	460b      	mov	r3, r1
 800a84a:	71fb      	strb	r3, [r7, #7]
 800a84c:	4613      	mov	r3, r2
 800a84e:	71bb      	strb	r3, [r7, #6]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a850:	2300      	movs	r3, #0
 800a852:	75fb      	strb	r3, [r7, #23]
  uint8_t SequenceConfig = 0;
 800a854:	2300      	movs	r3, #0
 800a856:	75bb      	strb	r3, [r7, #22]
  uint8_t VhvSettings = 0;
 800a858:	2300      	movs	r3, #0
 800a85a:	757b      	strb	r3, [r7, #21]
  uint8_t PhaseCal = 0;
 800a85c:	2300      	movs	r3, #0
 800a85e:	753b      	strb	r3, [r7, #20]

  /* store the value of the sequence config,
   * this will be reset before the end of the function
   */

  if (restore_config)
 800a860:	79bb      	ldrb	r3, [r7, #6]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d003      	beq.n	800a86e <VL53L0X_perform_phase_calibration+0x34>
    SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a86c:	75bb      	strb	r3, [r7, #22]

  /* Run PhaseCal */
  Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800a86e:	2202      	movs	r2, #2
 800a870:	2101      	movs	r1, #1
 800a872:	68f8      	ldr	r0, [r7, #12]
 800a874:	f002 fb0b 	bl	800ce8e <VL53L0X_WrByte>
 800a878:	4603      	mov	r3, r0
 800a87a:	75fb      	strb	r3, [r7, #23]

  if (Status == VL53L0X_ERROR_NONE)
 800a87c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d105      	bne.n	800a890 <VL53L0X_perform_phase_calibration+0x56>
    Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800a884:	2100      	movs	r1, #0
 800a886:	68f8      	ldr	r0, [r7, #12]
 800a888:	f7ff fe9c 	bl	800a5c4 <_Z38VL53L0X_perform_single_ref_calibrationP13VL53L0X_Dev_th>
 800a88c:	4603      	mov	r3, r0
 800a88e:	75fb      	strb	r3, [r7, #23]

  /* Read PhaseCal from device */
  if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800a890:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d115      	bne.n	800a8c4 <VL53L0X_perform_phase_calibration+0x8a>
 800a898:	79fb      	ldrb	r3, [r7, #7]
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d112      	bne.n	800a8c4 <VL53L0X_perform_phase_calibration+0x8a>
    Status = VL53L0X_ref_calibration_io(Dev, 1, VhvSettings,
 800a89e:	7d39      	ldrb	r1, [r7, #20]
 800a8a0:	7d7a      	ldrb	r2, [r7, #21]
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	9303      	str	r3, [sp, #12]
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	9302      	str	r3, [sp, #8]
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	9301      	str	r3, [sp, #4]
 800a8ae:	f107 0313 	add.w	r3, r7, #19
 800a8b2:	9300      	str	r3, [sp, #0]
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	2101      	movs	r1, #1
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f7ff febe 	bl	800a63a <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	75fb      	strb	r3, [r7, #23]
 800a8c2:	e002      	b.n	800a8ca <VL53L0X_perform_phase_calibration+0x90>
                                        PhaseCal, /* Not used here */
                                        &VhvSettingsint, pPhaseCal, 0, 1);
  } else
    *pPhaseCal = 0;
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	701a      	strb	r2, [r3, #0]

  if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800a8ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d112      	bne.n	800a8f8 <VL53L0X_perform_phase_calibration+0xbe>
 800a8d2:	79bb      	ldrb	r3, [r7, #6]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d00f      	beq.n	800a8f8 <VL53L0X_perform_phase_calibration+0xbe>
    /* restore the previous Sequence Config */
    Status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfig);
 800a8d8:	7dbb      	ldrb	r3, [r7, #22]
 800a8da:	461a      	mov	r2, r3
 800a8dc:	2101      	movs	r1, #1
 800a8de:	68f8      	ldr	r0, [r7, #12]
 800a8e0:	f002 fad5 	bl	800ce8e <VL53L0X_WrByte>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	75fb      	strb	r3, [r7, #23]
    if (Status == VL53L0X_ERROR_NONE)
 800a8e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d103      	bne.n	800a8f8 <VL53L0X_perform_phase_calibration+0xbe>
      PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	7dba      	ldrb	r2, [r7, #22]
 800a8f4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  }

  return Status;
 800a8f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3718      	adds	r7, #24
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
                                              uint8_t *pVhvSettings,
                                              uint8_t *pPhaseCal,
                                              uint8_t get_data_enable) {
 800a904:	b580      	push	{r7, lr}
 800a906:	b086      	sub	sp, #24
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	607a      	str	r2, [r7, #4]
 800a910:	70fb      	strb	r3, [r7, #3]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a912:	2300      	movs	r3, #0
 800a914:	75fb      	strb	r3, [r7, #23]
  uint8_t SequenceConfig = 0;
 800a916:	2300      	movs	r3, #0
 800a918:	75bb      	strb	r3, [r7, #22]

  /* store the value of the sequence config,
   * this will be reset before the end of the function
   */

  SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a920:	75bb      	strb	r3, [r7, #22]

  /* In the following function we don't save the config to optimize
   * writes on device. Config is saved and restored only once. */
  Status =
      VL53L0X_perform_vhv_calibration(Dev, pVhvSettings, get_data_enable, 0);
 800a922:	78fa      	ldrb	r2, [r7, #3]
 800a924:	2300      	movs	r3, #0
 800a926:	68b9      	ldr	r1, [r7, #8]
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f7ff ff1f 	bl	800a76c <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh>
 800a92e:	4603      	mov	r3, r0
 800a930:	75fb      	strb	r3, [r7, #23]

  if (Status == VL53L0X_ERROR_NONE)
 800a932:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d107      	bne.n	800a94a <VL53L0X_perform_ref_calibration+0x46>
    Status =
        VL53L0X_perform_phase_calibration(Dev, pPhaseCal, get_data_enable, 0);
 800a93a:	78fa      	ldrb	r2, [r7, #3]
 800a93c:	2300      	movs	r3, #0
 800a93e:	6879      	ldr	r1, [r7, #4]
 800a940:	68f8      	ldr	r0, [r7, #12]
 800a942:	f7ff ff7a 	bl	800a83a <VL53L0X_perform_phase_calibration>
 800a946:	4603      	mov	r3, r0
 800a948:	75fb      	strb	r3, [r7, #23]

  if (Status == VL53L0X_ERROR_NONE) {
 800a94a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d10f      	bne.n	800a972 <VL53L0X_perform_ref_calibration+0x6e>
    /* restore the previous Sequence Config */
    Status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfig);
 800a952:	7dbb      	ldrb	r3, [r7, #22]
 800a954:	461a      	mov	r2, r3
 800a956:	2101      	movs	r1, #1
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f002 fa98 	bl	800ce8e <VL53L0X_WrByte>
 800a95e:	4603      	mov	r3, r0
 800a960:	75fb      	strb	r3, [r7, #23]
    if (Status == VL53L0X_ERROR_NONE)
 800a962:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d103      	bne.n	800a972 <VL53L0X_perform_ref_calibration+0x6e>
      PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	7dba      	ldrb	r2, [r7, #22]
 800a96e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  }

  return Status;
 800a972:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a976:	4618      	mov	r0, r3
 800a978:	3718      	adds	r7, #24
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <_ZSt3absx>:
  abs(long __i) { return __builtin_labs(__i); }
#endif

#ifdef _GLIBCXX_USE_LONG_LONG
  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
 800a97e:	b4b0      	push	{r4, r5, r7}
 800a980:	b083      	sub	sp, #12
 800a982:	af00      	add	r7, sp, #0
 800a984:	e9c7 0100 	strd	r0, r1, [r7]
 800a988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	da05      	bge.n	800a99c <_ZSt3absx+0x1e>
 800a990:	2100      	movs	r1, #0
 800a992:	4254      	negs	r4, r2
 800a994:	eb61 0503 	sbc.w	r5, r1, r3
 800a998:	4622      	mov	r2, r4
 800a99a:	462b      	mov	r3, r5
 800a99c:	4610      	mov	r0, r2
 800a99e:	4619      	mov	r1, r3
 800a9a0:	370c      	adds	r7, #12
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bcb0      	pop	{r4, r5, r7}
 800a9a6:	4770      	bx	lr

0800a9a8 <VL53L0X_measurement_poll_for_completion>:
    data[mirrorIndex] = tempData;
  }
  return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev) {
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b086      	sub	sp, #24
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	75fb      	strb	r3, [r7, #23]
  uint8_t NewDataReady = 0;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	73fb      	strb	r3, [r7, #15]
  uint32_t LoopNb;

  LOG_FUNCTION_START("");

  LoopNb = 0;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	613b      	str	r3, [r7, #16]

  do {
    Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800a9bc:	f107 030f 	add.w	r3, r7, #15
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f7fe fe83 	bl	80096ce <VL53L0X_GetMeasurementDataReady>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	75fb      	strb	r3, [r7, #23]
    if (Status != 0)
 800a9cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d10f      	bne.n	800a9f4 <VL53L0X_measurement_poll_for_completion+0x4c>
      break; /* the error is set */

    if (NewDataReady == 1)
 800a9d4:	7bfb      	ldrb	r3, [r7, #15]
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d00e      	beq.n	800a9f8 <VL53L0X_measurement_poll_for_completion+0x50>
      break; /* done note that status == 0 */

    LoopNb++;
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	3301      	adds	r3, #1
 800a9de:	613b      	str	r3, [r7, #16]
    if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	2bc7      	cmp	r3, #199	; 0xc7
 800a9e4:	d902      	bls.n	800a9ec <VL53L0X_measurement_poll_for_completion+0x44>
      Status = VL53L0X_ERROR_TIME_OUT;
 800a9e6:	23f9      	movs	r3, #249	; 0xf9
 800a9e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a9ea:	e006      	b.n	800a9fa <VL53L0X_measurement_poll_for_completion+0x52>
    }

    VL53L0X_PollingDelay(Dev);
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f002 fb37 	bl	800d060 <VL53L0X_PollingDelay>
    Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800a9f2:	e7e3      	b.n	800a9bc <VL53L0X_measurement_poll_for_completion+0x14>
      break; /* the error is set */
 800a9f4:	bf00      	nop
 800a9f6:	e000      	b.n	800a9fa <VL53L0X_measurement_poll_for_completion+0x52>
      break; /* done note that status == 0 */
 800a9f8:	bf00      	nop
  } while (1);

  LOG_FUNCTION_END(Status);

  return Status;
 800a9fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3718      	adds	r7, #24
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <VL53L0X_decode_vcsel_period>:

uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg) {
 800aa06:	b480      	push	{r7}
 800aa08:	b085      	sub	sp, #20
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	71fb      	strb	r3, [r7, #7]
  /*!
   * Converts the encoded VCSEL period register value into the real
   * period in PLL clocks
   */

  uint8_t vcsel_period_pclks = 0;
 800aa10:	2300      	movs	r3, #0
 800aa12:	73fb      	strb	r3, [r7, #15]

  vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800aa14:	79fb      	ldrb	r3, [r7, #7]
 800aa16:	3301      	adds	r3, #1
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	005b      	lsls	r3, r3, #1
 800aa1c:	73fb      	strb	r3, [r7, #15]

  return vcsel_period_pclks;
 800aa1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3714      	adds	r7, #20
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <VL53L0X_isqrt>:
  vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;

  return vcsel_period_reg;
}

uint32_t VL53L0X_isqrt(uint32_t num) {
 800aa2c:	b480      	push	{r7}
 800aa2e:	b085      	sub	sp, #20
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
   * Implements an integer square root
   *
   * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
   */

  uint32_t res = 0;
 800aa34:	2300      	movs	r3, #0
 800aa36:	60fb      	str	r3, [r7, #12]
  uint32_t bit = 1 << 30;
 800aa38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aa3c:	60bb      	str	r3, [r7, #8]
  /* The second-to-top bit is set:
   *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

  /* "bit" starts at the highest power of four <= the argument. */
  while (bit > num)
 800aa3e:	68ba      	ldr	r2, [r7, #8]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d903      	bls.n	800aa4e <VL53L0X_isqrt+0x22>
    bit >>= 2;
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	089b      	lsrs	r3, r3, #2
 800aa4a:	60bb      	str	r3, [r7, #8]
  while (bit > num)
 800aa4c:	e7f7      	b.n	800aa3e <VL53L0X_isqrt+0x12>

  while (bit != 0) {
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d018      	beq.n	800aa86 <VL53L0X_isqrt+0x5a>
    if (num >= res + bit) {
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	4413      	add	r3, r2
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d30b      	bcc.n	800aa78 <VL53L0X_isqrt+0x4c>
      num -= res + bit;
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	4413      	add	r3, r2
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	1ad3      	subs	r3, r2, r3
 800aa6a:	607b      	str	r3, [r7, #4]
      res = (res >> 1) + bit;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	085b      	lsrs	r3, r3, #1
 800aa70:	68ba      	ldr	r2, [r7, #8]
 800aa72:	4413      	add	r3, r2
 800aa74:	60fb      	str	r3, [r7, #12]
 800aa76:	e002      	b.n	800aa7e <VL53L0X_isqrt+0x52>
    } else
      res >>= 1;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	085b      	lsrs	r3, r3, #1
 800aa7c:	60fb      	str	r3, [r7, #12]

    bit >>= 2;
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	089b      	lsrs	r3, r3, #2
 800aa82:	60bb      	str	r3, [r7, #8]
  while (bit != 0) {
 800aa84:	e7e3      	b.n	800aa4e <VL53L0X_isqrt+0x22>
  }

  return res;
 800aa86:	68fb      	ldr	r3, [r7, #12]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3714      	adds	r7, #20
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>:
    res = VL53L0X_isqrt(a * a + b * b);

  return res;
}

VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev) {
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b086      	sub	sp, #24
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	75fb      	strb	r3, [r7, #23]
  uint8_t strobe;
  uint32_t LoopNb;
  LOG_FUNCTION_START("");

  Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	2183      	movs	r1, #131	; 0x83
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f002 f9f2 	bl	800ce8e <VL53L0X_WrByte>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	461a      	mov	r2, r3
 800aaae:	7dfb      	ldrb	r3, [r7, #23]
 800aab0:	4313      	orrs	r3, r2
 800aab2:	75fb      	strb	r3, [r7, #23]

  /* polling
   * use timeout to avoid deadlock*/
  if (Status == VL53L0X_ERROR_NONE) {
 800aab4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d11d      	bne.n	800aaf8 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t+0x64>
    LoopNb = 0;
 800aabc:	2300      	movs	r3, #0
 800aabe:	613b      	str	r3, [r7, #16]
    do {
      Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800aac0:	f107 030f 	add.w	r3, r7, #15
 800aac4:	461a      	mov	r2, r3
 800aac6:	2183      	movs	r1, #131	; 0x83
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f002 fa66 	bl	800cf9a <VL53L0X_RdByte>
 800aace:	4603      	mov	r3, r0
 800aad0:	75fb      	strb	r3, [r7, #23]
      if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800aad2:	7bfb      	ldrb	r3, [r7, #15]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d10a      	bne.n	800aaee <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t+0x5a>
 800aad8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d106      	bne.n	800aaee <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t+0x5a>
        break;

      LoopNb = LoopNb + 1;
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	3301      	adds	r3, #1
 800aae4:	613b      	str	r3, [r7, #16]
    } while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	2bc7      	cmp	r3, #199	; 0xc7
 800aaea:	d800      	bhi.n	800aaee <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t+0x5a>
    do {
 800aaec:	e7e8      	b.n	800aac0 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t+0x2c>

    if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	2bc7      	cmp	r3, #199	; 0xc7
 800aaf2:	d901      	bls.n	800aaf8 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t+0x64>
      Status = VL53L0X_ERROR_TIME_OUT;
 800aaf4:	23f9      	movs	r3, #249	; 0xf9
 800aaf6:	75fb      	strb	r3, [r7, #23]
  }

  Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800aaf8:	2201      	movs	r2, #1
 800aafa:	2183      	movs	r1, #131	; 0x83
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f002 f9c6 	bl	800ce8e <VL53L0X_WrByte>
 800ab02:	4603      	mov	r3, r0
 800ab04:	461a      	mov	r2, r3
 800ab06:	7dfb      	ldrb	r3, [r7, #23]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	75fb      	strb	r3, [r7, #23]

  LOG_FUNCTION_END(Status);
  return Status;
 800ab0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3718      	adds	r7, #24
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option) {
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b098      	sub	sp, #96	; 0x60
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	460b      	mov	r3, r1
 800ab22:	70fb      	strb	r3, [r7, #3]

  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab24:	2300      	movs	r3, #0
 800ab26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint8_t byte;
  uint32_t TmpDWord;
  uint8_t ModuleId;
  uint8_t Revision;
  uint8_t ReferenceSpadCount = 0;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  uint8_t ReferenceSpadType = 0;
 800ab30:	2300      	movs	r3, #0
 800ab32:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  uint32_t PartUIDUpper = 0;
 800ab36:	2300      	movs	r3, #0
 800ab38:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t PartUIDLower = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t OffsetFixed1104_mm = 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	64bb      	str	r3, [r7, #72]	; 0x48
  int16_t OffsetMicroMeters = 0;
 800ab42:	2300      	movs	r3, #0
 800ab44:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
  uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800ab48:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800ab4c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t DistMeasFixed1104_400_mm = 0;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800ab52:	2300      	movs	r3, #0
 800ab54:	653b      	str	r3, [r7, #80]	; 0x50
  char ProductId[19];
  char *ProductId_tmp;
  uint8_t ReadDataFromDeviceDone;
  FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800ab56:	2300      	movs	r3, #0
 800ab58:	643b      	str	r3, [r7, #64]	; 0x40
  uint8_t NvmRefGoodSpadMap[VL53L0X_REF_SPAD_BUFFER_SIZE];
  int i;

  LOG_FUNCTION_START("");

  ReadDataFromDeviceDone =
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ab60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone);

  /* This access is done only once after that a GetDeviceInfo or
   * datainit is done*/
  if (ReadDataFromDeviceDone != 7) {
 800ab64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab68:	2b07      	cmp	r3, #7
 800ab6a:	f000 83fc 	beq.w	800b366 <VL53L0X_get_info_from_device+0x84e>

    Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800ab6e:	2201      	movs	r2, #1
 800ab70:	2180      	movs	r1, #128	; 0x80
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f002 f98b 	bl	800ce8e <VL53L0X_WrByte>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab80:	4313      	orrs	r3, r2
 800ab82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ab86:	2201      	movs	r2, #1
 800ab88:	21ff      	movs	r1, #255	; 0xff
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f002 f97f 	bl	800ce8e <VL53L0X_WrByte>
 800ab90:	4603      	mov	r3, r0
 800ab92:	461a      	mov	r2, r3
 800ab94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800ab9e:	2200      	movs	r2, #0
 800aba0:	2100      	movs	r1, #0
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f002 f973 	bl	800ce8e <VL53L0X_WrByte>
 800aba8:	4603      	mov	r3, r0
 800abaa:	461a      	mov	r2, r3
 800abac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abb0:	4313      	orrs	r3, r2
 800abb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800abb6:	2206      	movs	r2, #6
 800abb8:	21ff      	movs	r1, #255	; 0xff
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f002 f967 	bl	800ce8e <VL53L0X_WrByte>
 800abc0:	4603      	mov	r3, r0
 800abc2:	461a      	mov	r2, r3
 800abc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abc8:	4313      	orrs	r3, r2
 800abca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800abce:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800abd2:	461a      	mov	r2, r3
 800abd4:	2183      	movs	r1, #131	; 0x83
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f002 f9df 	bl	800cf9a <VL53L0X_RdByte>
 800abdc:	4603      	mov	r3, r0
 800abde:	461a      	mov	r2, r3
 800abe0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abe4:	4313      	orrs	r3, r2
 800abe6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0x83, byte | 4);
 800abea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800abee:	f043 0304 	orr.w	r3, r3, #4
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	461a      	mov	r2, r3
 800abf6:	2183      	movs	r1, #131	; 0x83
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f002 f948 	bl	800ce8e <VL53L0X_WrByte>
 800abfe:	4603      	mov	r3, r0
 800ac00:	461a      	mov	r2, r3
 800ac02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac06:	4313      	orrs	r3, r2
 800ac08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800ac0c:	2207      	movs	r2, #7
 800ac0e:	21ff      	movs	r1, #255	; 0xff
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f002 f93c 	bl	800ce8e <VL53L0X_WrByte>
 800ac16:	4603      	mov	r3, r0
 800ac18:	461a      	mov	r2, r3
 800ac1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800ac24:	2201      	movs	r2, #1
 800ac26:	2181      	movs	r1, #129	; 0x81
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f002 f930 	bl	800ce8e <VL53L0X_WrByte>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	461a      	mov	r2, r3
 800ac32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac36:	4313      	orrs	r3, r2
 800ac38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    Status |= VL53L0X_PollingDelay(Dev);
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f002 fa0f 	bl	800d060 <VL53L0X_PollingDelay>
 800ac42:	4603      	mov	r3, r0
 800ac44:	461a      	mov	r2, r3
 800ac46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800ac50:	2201      	movs	r2, #1
 800ac52:	2180      	movs	r1, #128	; 0x80
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f002 f91a 	bl	800ce8e <VL53L0X_WrByte>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac62:	4313      	orrs	r3, r2
 800ac64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    if (((option & 1) == 1) && ((ReadDataFromDeviceDone & 1) == 0)) {
 800ac68:	78fb      	ldrb	r3, [r7, #3]
 800ac6a:	f003 0301 	and.w	r3, r3, #1
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	f000 8098 	beq.w	800ada4 <VL53L0X_get_info_from_device+0x28c>
 800ac74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ac78:	f003 0301 	and.w	r3, r3, #1
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f040 8091 	bne.w	800ada4 <VL53L0X_get_info_from_device+0x28c>
      Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800ac82:	226b      	movs	r2, #107	; 0x6b
 800ac84:	2194      	movs	r1, #148	; 0x94
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f002 f901 	bl	800ce8e <VL53L0X_WrByte>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	461a      	mov	r2, r3
 800ac90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac94:	4313      	orrs	r3, r2
 800ac96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f7ff fefa 	bl	800aa94 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800aca0:	4603      	mov	r3, r0
 800aca2:	461a      	mov	r2, r3
 800aca4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aca8:	4313      	orrs	r3, r2
 800acaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800acae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800acb2:	461a      	mov	r2, r3
 800acb4:	2190      	movs	r1, #144	; 0x90
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f002 f9b1 	bl	800d01e <VL53L0X_RdDWord>
 800acbc:	4603      	mov	r3, r0
 800acbe:	461a      	mov	r2, r3
 800acc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acc4:	4313      	orrs	r3, r2
 800acc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800acca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800accc:	0a1b      	lsrs	r3, r3, #8
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acd4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
      ReferenceSpadType = (uint8_t)((TmpDWord >> 15) & 0x01);
 800acd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acda:	0bdb      	lsrs	r3, r3, #15
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	f003 0301 	and.w	r3, r3, #1
 800ace2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800ace6:	2224      	movs	r2, #36	; 0x24
 800ace8:	2194      	movs	r1, #148	; 0x94
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f002 f8cf 	bl	800ce8e <VL53L0X_WrByte>
 800acf0:	4603      	mov	r3, r0
 800acf2:	461a      	mov	r2, r3
 800acf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acf8:	4313      	orrs	r3, r2
 800acfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f7ff fec8 	bl	800aa94 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800ad04:	4603      	mov	r3, r0
 800ad06:	461a      	mov	r2, r3
 800ad08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ad12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ad16:	461a      	mov	r2, r3
 800ad18:	2190      	movs	r1, #144	; 0x90
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f002 f97f 	bl	800d01e <VL53L0X_RdDWord>
 800ad20:	4603      	mov	r3, r0
 800ad22:	461a      	mov	r2, r3
 800ad24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24) & 0xff);
 800ad2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad30:	0e1b      	lsrs	r3, r3, #24
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	723b      	strb	r3, [r7, #8]
      NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16) & 0xff);
 800ad36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad38:	0c1b      	lsrs	r3, r3, #16
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	727b      	strb	r3, [r7, #9]
      NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8) & 0xff);
 800ad3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad40:	0a1b      	lsrs	r3, r3, #8
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	72bb      	strb	r3, [r7, #10]
      NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800ad46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	72fb      	strb	r3, [r7, #11]

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800ad4c:	2225      	movs	r2, #37	; 0x25
 800ad4e:	2194      	movs	r1, #148	; 0x94
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f002 f89c 	bl	800ce8e <VL53L0X_WrByte>
 800ad56:	4603      	mov	r3, r0
 800ad58:	461a      	mov	r2, r3
 800ad5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f7ff fe95 	bl	800aa94 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad72:	4313      	orrs	r3, r2
 800ad74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ad78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	2190      	movs	r1, #144	; 0x90
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f002 f94c 	bl	800d01e <VL53L0X_RdDWord>
 800ad86:	4603      	mov	r3, r0
 800ad88:	461a      	mov	r2, r3
 800ad8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24) & 0xff);
 800ad94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad96:	0e1b      	lsrs	r3, r3, #24
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	733b      	strb	r3, [r7, #12]
      NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16) & 0xff);
 800ad9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9e:	0c1b      	lsrs	r3, r3, #16
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	737b      	strb	r3, [r7, #13]
    }

    if (((option & 2) == 2) && ((ReadDataFromDeviceDone & 2) == 0)) {
 800ada4:	78fb      	ldrb	r3, [r7, #3]
 800ada6:	f003 0302 	and.w	r3, r3, #2
 800adaa:	2b00      	cmp	r3, #0
 800adac:	f000 817d 	beq.w	800b0aa <VL53L0X_get_info_from_device+0x592>
 800adb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800adb4:	f003 0302 	and.w	r3, r3, #2
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f040 8176 	bne.w	800b0aa <VL53L0X_get_info_from_device+0x592>

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800adbe:	2202      	movs	r2, #2
 800adc0:	2194      	movs	r1, #148	; 0x94
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f002 f863 	bl	800ce8e <VL53L0X_WrByte>
 800adc8:	4603      	mov	r3, r0
 800adca:	461a      	mov	r2, r3
 800adcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800add0:	4313      	orrs	r3, r2
 800add2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f7ff fe5c 	bl	800aa94 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800addc:	4603      	mov	r3, r0
 800adde:	461a      	mov	r2, r3
 800ade0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ade4:	4313      	orrs	r3, r2
 800ade6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800adea:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800adee:	461a      	mov	r2, r3
 800adf0:	2190      	movs	r1, #144	; 0x90
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f002 f8d1 	bl	800cf9a <VL53L0X_RdByte>
 800adf8:	4603      	mov	r3, r0
 800adfa:	461a      	mov	r2, r3
 800adfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae00:	4313      	orrs	r3, r2
 800ae02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800ae06:	227b      	movs	r2, #123	; 0x7b
 800ae08:	2194      	movs	r1, #148	; 0x94
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f002 f83f 	bl	800ce8e <VL53L0X_WrByte>
 800ae10:	4603      	mov	r3, r0
 800ae12:	461a      	mov	r2, r3
 800ae14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f7ff fe38 	bl	800aa94 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800ae24:	4603      	mov	r3, r0
 800ae26:	461a      	mov	r2, r3
 800ae28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800ae32:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800ae36:	461a      	mov	r2, r3
 800ae38:	2190      	movs	r1, #144	; 0x90
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f002 f8ad 	bl	800cf9a <VL53L0X_RdByte>
 800ae40:	4603      	mov	r3, r0
 800ae42:	461a      	mov	r2, r3
 800ae44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800ae4e:	2277      	movs	r2, #119	; 0x77
 800ae50:	2194      	movs	r1, #148	; 0x94
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f002 f81b 	bl	800ce8e <VL53L0X_WrByte>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae60:	4313      	orrs	r3, r2
 800ae62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f7ff fe14 	bl	800aa94 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	461a      	mov	r2, r3
 800ae70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae74:	4313      	orrs	r3, r2
 800ae76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ae7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ae7e:	461a      	mov	r2, r3
 800ae80:	2190      	movs	r1, #144	; 0x90
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f002 f8cb 	bl	800d01e <VL53L0X_RdDWord>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae90:	4313      	orrs	r3, r2
 800ae92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800ae96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae98:	0e5b      	lsrs	r3, r3, #25
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	743b      	strb	r3, [r7, #16]
      ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800ae9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea0:	0c9b      	lsrs	r3, r3, #18
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	747b      	strb	r3, [r7, #17]
      ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800aeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeae:	0adb      	lsrs	r3, r3, #11
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	74bb      	strb	r3, [r7, #18]
      ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800aeba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aebc:	091b      	lsrs	r3, r3, #4
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	74fb      	strb	r3, [r7, #19]

      byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800aec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	00db      	lsls	r3, r3, #3
 800aece:	b2db      	uxtb	r3, r3
 800aed0:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800aed4:	b2db      	uxtb	r3, r3
 800aed6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800aeda:	2278      	movs	r2, #120	; 0x78
 800aedc:	2194      	movs	r1, #148	; 0x94
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f001 ffd5 	bl	800ce8e <VL53L0X_WrByte>
 800aee4:	4603      	mov	r3, r0
 800aee6:	461a      	mov	r2, r3
 800aee8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aeec:	4313      	orrs	r3, r2
 800aeee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f7ff fdce 	bl	800aa94 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800aef8:	4603      	mov	r3, r0
 800aefa:	461a      	mov	r2, r3
 800aefc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af00:	4313      	orrs	r3, r2
 800af02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800af06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800af0a:	461a      	mov	r2, r3
 800af0c:	2190      	movs	r1, #144	; 0x90
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f002 f885 	bl	800d01e <VL53L0X_RdDWord>
 800af14:	4603      	mov	r3, r0
 800af16:	461a      	mov	r2, r3
 800af18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af1c:	4313      	orrs	r3, r2
 800af1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      ProductId[4] = (char)(byte + ((TmpDWord >> 29) & 0x07f));
 800af22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af24:	0f5b      	lsrs	r3, r3, #29
 800af26:	b2da      	uxtb	r2, r3
 800af28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af2c:	4413      	add	r3, r2
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	753b      	strb	r3, [r7, #20]
      ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800af32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af34:	0d9b      	lsrs	r3, r3, #22
 800af36:	b2db      	uxtb	r3, r3
 800af38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	757b      	strb	r3, [r7, #21]
      ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800af40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af42:	0bdb      	lsrs	r3, r3, #15
 800af44:	b2db      	uxtb	r3, r3
 800af46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	75bb      	strb	r3, [r7, #22]
      ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800af4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af50:	0a1b      	lsrs	r3, r3, #8
 800af52:	b2db      	uxtb	r3, r3
 800af54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	75fb      	strb	r3, [r7, #23]
      ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800af5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5e:	085b      	lsrs	r3, r3, #1
 800af60:	b2db      	uxtb	r3, r3
 800af62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af66:	b2db      	uxtb	r3, r3
 800af68:	763b      	strb	r3, [r7, #24]

      byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800af6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	019b      	lsls	r3, r3, #6
 800af70:	b2db      	uxtb	r3, r3
 800af72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af76:	b2db      	uxtb	r3, r3
 800af78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800af7c:	2279      	movs	r2, #121	; 0x79
 800af7e:	2194      	movs	r1, #148	; 0x94
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f001 ff84 	bl	800ce8e <VL53L0X_WrByte>
 800af86:	4603      	mov	r3, r0
 800af88:	461a      	mov	r2, r3
 800af8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af8e:	4313      	orrs	r3, r2
 800af90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_device_read_strobe(Dev);
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f7ff fd7d 	bl	800aa94 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800af9a:	4603      	mov	r3, r0
 800af9c:	461a      	mov	r2, r3
 800af9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800afa2:	4313      	orrs	r3, r2
 800afa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800afa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800afac:	461a      	mov	r2, r3
 800afae:	2190      	movs	r1, #144	; 0x90
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f002 f834 	bl	800d01e <VL53L0X_RdDWord>
 800afb6:	4603      	mov	r3, r0
 800afb8:	461a      	mov	r2, r3
 800afba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800afbe:	4313      	orrs	r3, r2
 800afc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      ProductId[9] = (char)(byte + ((TmpDWord >> 26) & 0x07f));
 800afc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc6:	0e9b      	lsrs	r3, r3, #26
 800afc8:	b2da      	uxtb	r2, r3
 800afca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800afce:	4413      	add	r3, r2
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	767b      	strb	r3, [r7, #25]
      ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800afd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd6:	0cdb      	lsrs	r3, r3, #19
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	76bb      	strb	r3, [r7, #26]
      ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800afe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe4:	0b1b      	lsrs	r3, r3, #12
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afec:	b2db      	uxtb	r3, r3
 800afee:	76fb      	strb	r3, [r7, #27]
      ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800aff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff2:	095b      	lsrs	r3, r3, #5
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800affa:	b2db      	uxtb	r3, r3
 800affc:	773b      	strb	r3, [r7, #28]

      byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800affe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b000:	b2db      	uxtb	r3, r3
 800b002:	009b      	lsls	r3, r3, #2
 800b004:	b2db      	uxtb	r3, r3
 800b006:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800b010:	227a      	movs	r2, #122	; 0x7a
 800b012:	2194      	movs	r1, #148	; 0x94
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f001 ff3a 	bl	800ce8e <VL53L0X_WrByte>
 800b01a:	4603      	mov	r3, r0
 800b01c:	461a      	mov	r2, r3
 800b01e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b022:	4313      	orrs	r3, r2
 800b024:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_device_read_strobe(Dev);
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f7ff fd33 	bl	800aa94 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800b02e:	4603      	mov	r3, r0
 800b030:	461a      	mov	r2, r3
 800b032:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b036:	4313      	orrs	r3, r2
 800b038:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b03c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b040:	461a      	mov	r2, r3
 800b042:	2190      	movs	r1, #144	; 0x90
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f001 ffea 	bl	800d01e <VL53L0X_RdDWord>
 800b04a:	4603      	mov	r3, r0
 800b04c:	461a      	mov	r2, r3
 800b04e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b052:	4313      	orrs	r3, r2
 800b054:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      ProductId[13] = (char)(byte + ((TmpDWord >> 30) & 0x07f));
 800b058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05a:	0f9b      	lsrs	r3, r3, #30
 800b05c:	b2da      	uxtb	r2, r3
 800b05e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b062:	4413      	add	r3, r2
 800b064:	b2db      	uxtb	r3, r3
 800b066:	777b      	strb	r3, [r7, #29]
      ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800b068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06a:	0ddb      	lsrs	r3, r3, #23
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b072:	b2db      	uxtb	r3, r3
 800b074:	77bb      	strb	r3, [r7, #30]
      ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800b076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b078:	0c1b      	lsrs	r3, r3, #16
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b080:	b2db      	uxtb	r3, r3
 800b082:	77fb      	strb	r3, [r7, #31]
      ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800b084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b086:	0a5b      	lsrs	r3, r3, #9
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	f887 3020 	strb.w	r3, [r7, #32]
      ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800b094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b096:	089b      	lsrs	r3, r3, #2
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      ProductId[18] = '\0';
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    }

    if (((option & 4) == 4) && ((ReadDataFromDeviceDone & 4) == 0)) {
 800b0aa:	78fb      	ldrb	r3, [r7, #3]
 800b0ac:	f003 0304 	and.w	r3, r3, #4
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f000 80f1 	beq.w	800b298 <VL53L0X_get_info_from_device+0x780>
 800b0b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b0ba:	f003 0304 	and.w	r3, r3, #4
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	f040 80ea 	bne.w	800b298 <VL53L0X_get_info_from_device+0x780>

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800b0c4:	227b      	movs	r2, #123	; 0x7b
 800b0c6:	2194      	movs	r1, #148	; 0x94
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f001 fee0 	bl	800ce8e <VL53L0X_WrByte>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f7ff fcd9 	bl	800aa94 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800b0f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	2190      	movs	r1, #144	; 0x90
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f001 ff90 	bl	800d01e <VL53L0X_RdDWord>
 800b0fe:	4603      	mov	r3, r0
 800b100:	461a      	mov	r2, r3
 800b102:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b106:	4313      	orrs	r3, r2
 800b108:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800b10c:	227c      	movs	r2, #124	; 0x7c
 800b10e:	2194      	movs	r1, #148	; 0x94
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f001 febc 	bl	800ce8e <VL53L0X_WrByte>
 800b116:	4603      	mov	r3, r0
 800b118:	461a      	mov	r2, r3
 800b11a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b11e:	4313      	orrs	r3, r2
 800b120:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f7ff fcb5 	bl	800aa94 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800b12a:	4603      	mov	r3, r0
 800b12c:	461a      	mov	r2, r3
 800b12e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b132:	4313      	orrs	r3, r2
 800b134:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800b138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b13c:	461a      	mov	r2, r3
 800b13e:	2190      	movs	r1, #144	; 0x90
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f001 ff6c 	bl	800d01e <VL53L0X_RdDWord>
 800b146:	4603      	mov	r3, r0
 800b148:	461a      	mov	r2, r3
 800b14a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b14e:	4313      	orrs	r3, r2
 800b150:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800b154:	2273      	movs	r2, #115	; 0x73
 800b156:	2194      	movs	r1, #148	; 0x94
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f001 fe98 	bl	800ce8e <VL53L0X_WrByte>
 800b15e:	4603      	mov	r3, r0
 800b160:	461a      	mov	r2, r3
 800b162:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b166:	4313      	orrs	r3, r2
 800b168:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f7ff fc91 	bl	800aa94 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800b172:	4603      	mov	r3, r0
 800b174:	461a      	mov	r2, r3
 800b176:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b17a:	4313      	orrs	r3, r2
 800b17c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b180:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b184:	461a      	mov	r2, r3
 800b186:	2190      	movs	r1, #144	; 0x90
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f001 ff48 	bl	800d01e <VL53L0X_RdDWord>
 800b18e:	4603      	mov	r3, r0
 800b190:	461a      	mov	r2, r3
 800b192:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b196:	4313      	orrs	r3, r2
 800b198:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      SignalRateMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff) << 8;
 800b19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b19e:	021b      	lsls	r3, r3, #8
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	653b      	str	r3, [r7, #80]	; 0x50

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800b1a4:	2274      	movs	r2, #116	; 0x74
 800b1a6:	2194      	movs	r1, #148	; 0x94
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f001 fe70 	bl	800ce8e <VL53L0X_WrByte>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f7ff fc69 	bl	800aa94 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b1d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	2190      	movs	r1, #144	; 0x90
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f001 ff20 	bl	800d01e <VL53L0X_RdDWord>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      SignalRateMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000) >> 24);
 800b1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ee:	0e1b      	lsrs	r3, r3, #24
 800b1f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	653b      	str	r3, [r7, #80]	; 0x50

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800b1f6:	2275      	movs	r2, #117	; 0x75
 800b1f8:	2194      	movs	r1, #148	; 0x94
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f001 fe47 	bl	800ce8e <VL53L0X_WrByte>
 800b200:	4603      	mov	r3, r0
 800b202:	461a      	mov	r2, r3
 800b204:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b208:	4313      	orrs	r3, r2
 800b20a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f7ff fc40 	bl	800aa94 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800b214:	4603      	mov	r3, r0
 800b216:	461a      	mov	r2, r3
 800b218:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b21c:	4313      	orrs	r3, r2
 800b21e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b222:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b226:	461a      	mov	r2, r3
 800b228:	2190      	movs	r1, #144	; 0x90
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f001 fef7 	bl	800d01e <VL53L0X_RdDWord>
 800b230:	4603      	mov	r3, r0
 800b232:	461a      	mov	r2, r3
 800b234:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b238:	4313      	orrs	r3, r2
 800b23a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff) << 8;
 800b23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b240:	021b      	lsls	r3, r3, #8
 800b242:	b29b      	uxth	r3, r3
 800b244:	657b      	str	r3, [r7, #84]	; 0x54

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800b246:	2276      	movs	r2, #118	; 0x76
 800b248:	2194      	movs	r1, #148	; 0x94
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f001 fe1f 	bl	800ce8e <VL53L0X_WrByte>
 800b250:	4603      	mov	r3, r0
 800b252:	461a      	mov	r2, r3
 800b254:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b258:	4313      	orrs	r3, r2
 800b25a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f7ff fc18 	bl	800aa94 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800b264:	4603      	mov	r3, r0
 800b266:	461a      	mov	r2, r3
 800b268:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b26c:	4313      	orrs	r3, r2
 800b26e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b272:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b276:	461a      	mov	r2, r3
 800b278:	2190      	movs	r1, #144	; 0x90
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f001 fecf 	bl	800d01e <VL53L0X_RdDWord>
 800b280:	4603      	mov	r3, r0
 800b282:	461a      	mov	r2, r3
 800b284:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b288:	4313      	orrs	r3, r2
 800b28a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000) >> 24);
 800b28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b290:	0e1b      	lsrs	r3, r3, #24
 800b292:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b294:	4313      	orrs	r3, r2
 800b296:	657b      	str	r3, [r7, #84]	; 0x54
    }

    Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800b298:	2200      	movs	r2, #0
 800b29a:	2181      	movs	r1, #129	; 0x81
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f001 fdf6 	bl	800ce8e <VL53L0X_WrByte>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800b2b0:	2206      	movs	r2, #6
 800b2b2:	21ff      	movs	r1, #255	; 0xff
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f001 fdea 	bl	800ce8e <VL53L0X_WrByte>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	461a      	mov	r2, r3
 800b2be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800b2c8:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	2183      	movs	r1, #131	; 0x83
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f001 fe62 	bl	800cf9a <VL53L0X_RdByte>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	461a      	mov	r2, r3
 800b2da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0x83, byte & 0xfb);
 800b2e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b2e8:	f023 0304 	bic.w	r3, r3, #4
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	2183      	movs	r1, #131	; 0x83
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f001 fdcb 	bl	800ce8e <VL53L0X_WrByte>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b300:	4313      	orrs	r3, r2
 800b302:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b306:	2201      	movs	r2, #1
 800b308:	21ff      	movs	r1, #255	; 0xff
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f001 fdbf 	bl	800ce8e <VL53L0X_WrByte>
 800b310:	4603      	mov	r3, r0
 800b312:	461a      	mov	r2, r3
 800b314:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b318:	4313      	orrs	r3, r2
 800b31a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b31e:	2201      	movs	r2, #1
 800b320:	2100      	movs	r1, #0
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f001 fdb3 	bl	800ce8e <VL53L0X_WrByte>
 800b328:	4603      	mov	r3, r0
 800b32a:	461a      	mov	r2, r3
 800b32c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b330:	4313      	orrs	r3, r2
 800b332:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b336:	2200      	movs	r2, #0
 800b338:	21ff      	movs	r1, #255	; 0xff
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f001 fda7 	bl	800ce8e <VL53L0X_WrByte>
 800b340:	4603      	mov	r3, r0
 800b342:	461a      	mov	r2, r3
 800b344:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b348:	4313      	orrs	r3, r2
 800b34a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b34e:	2200      	movs	r2, #0
 800b350:	2180      	movs	r1, #128	; 0x80
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f001 fd9b 	bl	800ce8e <VL53L0X_WrByte>
 800b358:	4603      	mov	r3, r0
 800b35a:	461a      	mov	r2, r3
 800b35c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b360:	4313      	orrs	r3, r2
 800b362:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  if ((Status == VL53L0X_ERROR_NONE) && (ReadDataFromDeviceDone != 7)) {
 800b366:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	f040 808f 	bne.w	800b48e <VL53L0X_get_info_from_device+0x976>
 800b370:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b374:	2b07      	cmp	r3, #7
 800b376:	f000 808a 	beq.w	800b48e <VL53L0X_get_info_from_device+0x976>
    /* Assign to variable if status is ok */
    if (((option & 1) == 1) && ((ReadDataFromDeviceDone & 1) == 0)) {
 800b37a:	78fb      	ldrb	r3, [r7, #3]
 800b37c:	f003 0301 	and.w	r3, r3, #1
 800b380:	2b00      	cmp	r3, #0
 800b382:	d024      	beq.n	800b3ce <VL53L0X_get_info_from_device+0x8b6>
 800b384:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b388:	f003 0301 	and.w	r3, r3, #1
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d11e      	bne.n	800b3ce <VL53L0X_get_info_from_device+0x8b6>
      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadCount,
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800b396:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
                                         ReferenceSpadCount);

      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadType,
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800b3a0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                                         ReferenceSpadType);

      for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3aa:	2b05      	cmp	r3, #5
 800b3ac:	dc0f      	bgt.n	800b3ce <VL53L0X_get_info_from_device+0x8b6>
        Dev->Data.SpadData.RefGoodSpadMap[i] = NvmRefGoodSpadMap[i];
 800b3ae:	f107 0208 	add.w	r2, r7, #8
 800b3b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3b4:	4413      	add	r3, r2
 800b3b6:	7819      	ldrb	r1, [r3, #0]
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3bc:	4413      	add	r3, r2
 800b3be:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800b3c2:	460a      	mov	r2, r1
 800b3c4:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800b3c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3cc:	e7ec      	b.n	800b3a8 <VL53L0X_get_info_from_device+0x890>
      }
    }

    if (((option & 2) == 2) && ((ReadDataFromDeviceDone & 2) == 0)) {
 800b3ce:	78fb      	ldrb	r3, [r7, #3]
 800b3d0:	f003 0302 	and.w	r3, r3, #2
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d018      	beq.n	800b40a <VL53L0X_get_info_from_device+0x8f2>
 800b3d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b3dc:	f003 0302 	and.w	r3, r3, #2
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d112      	bne.n	800b40a <VL53L0X_get_info_from_device+0x8f2>
      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ModuleId, ModuleId);
 800b3e4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1

      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, Revision, Revision);
 800b3ee:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2

      ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ProductId);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	33f3      	adds	r3, #243	; 0xf3
 800b3fc:	63bb      	str	r3, [r7, #56]	; 0x38
      VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800b3fe:	f107 0310 	add.w	r3, r7, #16
 800b402:	4619      	mov	r1, r3
 800b404:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b406:	f002 fd29 	bl	800de5c <strcpy>
    }

    if (((option & 4) == 4) && ((ReadDataFromDeviceDone & 4) == 0)) {
 800b40a:	78fb      	ldrb	r3, [r7, #3]
 800b40c:	f003 0304 	and.w	r3, r3, #4
 800b410:	2b00      	cmp	r3, #0
 800b412:	d030      	beq.n	800b476 <VL53L0X_get_info_from_device+0x95e>
 800b414:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b418:	f003 0304 	and.w	r3, r3, #4
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d12a      	bne.n	800b476 <VL53L0X_get_info_from_device+0x95e>
      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, PartUIDUpper, PartUIDUpper);
 800b420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, PartUIDLower, PartUIDLower);
 800b428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

      SignalRateMeasFixed400mmFix =
 800b430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b432:	025b      	lsls	r3, r3, #9
 800b434:	643b      	str	r3, [r7, #64]	; 0x40
          VL53L0X_FIXPOINT97TOFIXPOINT1616(SignalRateMeasFixed1104_400_mm);

      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, SignalRateMeasFixed400mm,
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b43a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
                                         SignalRateMeasFixed400mmFix);

      OffsetMicroMeters = 0;
 800b43e:	2300      	movs	r3, #0
 800b440:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
      if (DistMeasFixed1104_400_mm != 0) {
 800b444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b446:	2b00      	cmp	r3, #0
 800b448:	d011      	beq.n	800b46e <VL53L0X_get_info_from_device+0x956>
        OffsetFixed1104_mm = DistMeasFixed1104_400_mm - DistMeasTgtFixed1104_mm;
 800b44a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b44c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b44e:	1ad3      	subs	r3, r2, r3
 800b450:	64bb      	str	r3, [r7, #72]	; 0x48
        OffsetMicroMeters = (OffsetFixed1104_mm * 1000) >> 4;
 800b452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b454:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b458:	fb02 f303 	mul.w	r3, r2, r3
 800b45c:	091b      	lsrs	r3, r3, #4
 800b45e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        OffsetMicroMeters *= -1;
 800b462:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800b466:	425b      	negs	r3, r3
 800b468:	b29b      	uxth	r3, r3
 800b46a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
      }

      PALDevDataSet(Dev, Part2PartOffsetAdjustmentNVMMicroMeter,
 800b46e:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	60da      	str	r2, [r3, #12]
                    OffsetMicroMeters);
    }
    byte = (uint8_t)(ReadDataFromDeviceDone | option);
 800b476:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b47a:	78fb      	ldrb	r3, [r7, #3]
 800b47c:	4313      	orrs	r3, r2
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, byte);
 800b484:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800b48e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800b492:	4618      	mov	r0, r3
 800b494:	3760      	adds	r7, #96	; 0x60
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <_Z28VL53L0X_calc_macro_period_psP13VL53L0X_Dev_th>:

uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev,
                                      uint8_t vcsel_period_pclks) {
 800b49a:	b480      	push	{r7}
 800b49c:	b087      	sub	sp, #28
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	70fb      	strb	r3, [r7, #3]
  LOG_FUNCTION_START("");

  /* The above calculation will produce rounding errors,
     therefore set fixed value
  */
  PLL_period_ps = 1655;
 800b4a6:	f240 6277 	movw	r2, #1655	; 0x677
 800b4aa:	f04f 0300 	mov.w	r3, #0
 800b4ae:	e9c7 2304 	strd	r2, r3, [r7, #16]

  macro_period_vclks = 2304;
 800b4b2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800b4b6:	60fb      	str	r3, [r7, #12]
  macro_period_ps =
      (uint32_t)(macro_period_vclks * vcsel_period_pclks * PLL_period_ps);
 800b4b8:	78fb      	ldrb	r3, [r7, #3]
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	fb02 f303 	mul.w	r3, r2, r3
  macro_period_ps =
 800b4c0:	693a      	ldr	r2, [r7, #16]
 800b4c2:	fb02 f303 	mul.w	r3, r2, r3
 800b4c6:	60bb      	str	r3, [r7, #8]

  LOG_FUNCTION_END("");
  return macro_period_ps;
 800b4c8:	68bb      	ldr	r3, [r7, #8]
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	371c      	adds	r7, #28
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr

0800b4d6 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks) {
 800b4d6:	b480      	push	{r7}
 800b4d8:	b087      	sub	sp, #28
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
  /*!
   * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
   */

  uint16_t encoded_timeout = 0;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	82fb      	strh	r3, [r7, #22]
  uint32_t ls_byte = 0;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	613b      	str	r3, [r7, #16]
  uint16_t ms_byte = 0;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	81fb      	strh	r3, [r7, #14]

  if (timeout_macro_clks > 0) {
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d017      	beq.n	800b520 <VL53L0X_encode_timeout+0x4a>
    ls_byte = timeout_macro_clks - 1;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	3b01      	subs	r3, #1
 800b4f4:	613b      	str	r3, [r7, #16]

    while ((ls_byte & 0xFFFFFF00) > 0) {
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d006      	beq.n	800b50e <VL53L0X_encode_timeout+0x38>
      ls_byte = ls_byte >> 1;
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	085b      	lsrs	r3, r3, #1
 800b504:	613b      	str	r3, [r7, #16]
      ms_byte++;
 800b506:	89fb      	ldrh	r3, [r7, #14]
 800b508:	3301      	adds	r3, #1
 800b50a:	81fb      	strh	r3, [r7, #14]
    while ((ls_byte & 0xFFFFFF00) > 0) {
 800b50c:	e7f3      	b.n	800b4f6 <VL53L0X_encode_timeout+0x20>
    }

    encoded_timeout = (ms_byte << 8) + (uint16_t)(ls_byte & 0x000000FF);
 800b50e:	89fb      	ldrh	r3, [r7, #14]
 800b510:	021b      	lsls	r3, r3, #8
 800b512:	b29a      	uxth	r2, r3
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	b29b      	uxth	r3, r3
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	4413      	add	r3, r2
 800b51e:	82fb      	strh	r3, [r7, #22]
  }

  return encoded_timeout;
 800b520:	8afb      	ldrh	r3, [r7, #22]
}
 800b522:	4618      	mov	r0, r3
 800b524:	371c      	adds	r7, #28
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr

0800b52e <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout) {
 800b52e:	b480      	push	{r7}
 800b530:	b085      	sub	sp, #20
 800b532:	af00      	add	r7, sp, #0
 800b534:	4603      	mov	r3, r0
 800b536:	80fb      	strh	r3, [r7, #6]
  /*!
   * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
   */

  uint32_t timeout_macro_clks = 0;
 800b538:	2300      	movs	r3, #0
 800b53a:	60fb      	str	r3, [r7, #12]

  timeout_macro_clks = ((uint32_t)(encoded_timeout & 0x00FF)
 800b53c:	88fb      	ldrh	r3, [r7, #6]
 800b53e:	b2db      	uxtb	r3, r3
                        << (uint32_t)((encoded_timeout & 0xFF00) >> 8)) +
 800b540:	88fa      	ldrh	r2, [r7, #6]
 800b542:	0a12      	lsrs	r2, r2, #8
 800b544:	b292      	uxth	r2, r2
 800b546:	4093      	lsls	r3, r2
  timeout_macro_clks = ((uint32_t)(encoded_timeout & 0x00FF)
 800b548:	3301      	adds	r3, #1
 800b54a:	60fb      	str	r3, [r7, #12]
                       1;

  return timeout_macro_clks;
 800b54c:	68fb      	ldr	r3, [r7, #12]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3714      	adds	r7, #20
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr
	...

0800b55c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev, uint32_t timeout_period_us,
                                    uint8_t vcsel_period_pclks) {
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b088      	sub	sp, #32
 800b560:	af00      	add	r7, sp, #0
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	60b9      	str	r1, [r7, #8]
 800b566:	4613      	mov	r3, r2
 800b568:	71fb      	strb	r3, [r7, #7]
  uint32_t macro_period_ps;
  uint32_t macro_period_ns;
  uint32_t timeout_period_mclks = 0;
 800b56a:	2300      	movs	r3, #0
 800b56c:	61fb      	str	r3, [r7, #28]

  macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800b56e:	79fb      	ldrb	r3, [r7, #7]
 800b570:	4619      	mov	r1, r3
 800b572:	68f8      	ldr	r0, [r7, #12]
 800b574:	f7ff ff91 	bl	800b49a <_Z28VL53L0X_calc_macro_period_psP13VL53L0X_Dev_th>
 800b578:	61b8      	str	r0, [r7, #24]
  macro_period_ns = (macro_period_ps + 500) / 1000;
 800b57a:	69bb      	ldr	r3, [r7, #24]
 800b57c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b580:	4a0a      	ldr	r2, [pc, #40]	; (800b5ac <VL53L0X_calc_timeout_mclks+0x50>)
 800b582:	fba2 2303 	umull	r2, r3, r2, r3
 800b586:	099b      	lsrs	r3, r3, #6
 800b588:	617b      	str	r3, [r7, #20]

  timeout_period_mclks = (uint32_t)(
      ((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b590:	fb03 f202 	mul.w	r2, r3, r2
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	085b      	lsrs	r3, r3, #1
 800b598:	441a      	add	r2, r3
  timeout_period_mclks = (uint32_t)(
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5a0:	61fb      	str	r3, [r7, #28]

  return timeout_period_mclks;
 800b5a2:	69fb      	ldr	r3, [r7, #28]
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3720      	adds	r7, #32
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	10624dd3 	.word	0x10624dd3

0800b5b0 <_Z23VL53L0X_calc_timeout_usP13VL53L0X_Dev_tth>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev, uint16_t timeout_period_mclks,
                                 uint8_t vcsel_period_pclks) {
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b086      	sub	sp, #24
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	807b      	strh	r3, [r7, #2]
 800b5bc:	4613      	mov	r3, r2
 800b5be:	707b      	strb	r3, [r7, #1]
  uint32_t macro_period_ps;
  uint32_t macro_period_ns;
  uint32_t actual_timeout_period_us = 0;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	617b      	str	r3, [r7, #20]

  macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800b5c4:	787b      	ldrb	r3, [r7, #1]
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f7ff ff66 	bl	800b49a <_Z28VL53L0X_calc_macro_period_psP13VL53L0X_Dev_th>
 800b5ce:	6138      	str	r0, [r7, #16]
  macro_period_ns = (macro_period_ps + 500) / 1000;
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b5d6:	4a0b      	ldr	r2, [pc, #44]	; (800b604 <_Z23VL53L0X_calc_timeout_usP13VL53L0X_Dev_tth+0x54>)
 800b5d8:	fba2 2303 	umull	r2, r3, r2, r3
 800b5dc:	099b      	lsrs	r3, r3, #6
 800b5de:	60fb      	str	r3, [r7, #12]

  actual_timeout_period_us =
      ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 800b5e0:	887b      	ldrh	r3, [r7, #2]
 800b5e2:	68fa      	ldr	r2, [r7, #12]
 800b5e4:	fb03 f202 	mul.w	r2, r3, r2
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	085b      	lsrs	r3, r3, #1
 800b5ec:	4413      	add	r3, r2
  actual_timeout_period_us =
 800b5ee:	4a05      	ldr	r2, [pc, #20]	; (800b604 <_Z23VL53L0X_calc_timeout_usP13VL53L0X_Dev_tth+0x54>)
 800b5f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b5f4:	099b      	lsrs	r3, r3, #6
 800b5f6:	617b      	str	r3, [r7, #20]

  return actual_timeout_period_us;
 800b5f8:	697b      	ldr	r3, [r7, #20]
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3718      	adds	r7, #24
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	10624dd3 	.word	0x10624dd3

0800b608 <get_sequence_step_timeout>:

VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
                                        VL53L0X_SequenceStepId SequenceStepId,
                                        uint32_t *pTimeOutMicroSecs) {
 800b608:	b580      	push	{r7, lr}
 800b60a:	b08c      	sub	sp, #48	; 0x30
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	460b      	mov	r3, r1
 800b612:	607a      	str	r2, [r7, #4]
 800b614:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b616:	2300      	movs	r3, #0
 800b618:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t CurrentVCSELPulsePeriodPClk;
  uint8_t EncodedTimeOutByte = 0;
 800b61c:	2300      	movs	r3, #0
 800b61e:	f887 3020 	strb.w	r3, [r7, #32]
  uint32_t TimeoutMicroSeconds = 0;
 800b622:	2300      	movs	r3, #0
 800b624:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t PreRangeEncodedTimeOut = 0;
 800b626:	2300      	movs	r3, #0
 800b628:	83fb      	strh	r3, [r7, #30]
  uint16_t MsrcTimeOutMClks;
  uint16_t PreRangeTimeOutMClks;
  uint16_t FinalRangeTimeOutMClks = 0;
 800b62a:	2300      	movs	r3, #0
 800b62c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t FinalRangeEncodedTimeOut;
  VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

  if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC) ||
 800b62e:	7afb      	ldrb	r3, [r7, #11]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d005      	beq.n	800b640 <get_sequence_step_timeout+0x38>
 800b634:	7afb      	ldrb	r3, [r7, #11]
 800b636:	2b01      	cmp	r3, #1
 800b638:	d002      	beq.n	800b640 <get_sequence_step_timeout+0x38>
      (SequenceStepId == VL53L0X_SEQUENCESTEP_DSS) ||
 800b63a:	7afb      	ldrb	r3, [r7, #11]
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	d128      	bne.n	800b692 <get_sequence_step_timeout+0x8a>
      (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

    Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE,
 800b640:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b644:	461a      	mov	r2, r3
 800b646:	2100      	movs	r1, #0
 800b648:	68f8      	ldr	r0, [r7, #12]
 800b64a:	f7fd fadf 	bl	8008c0c <VL53L0X_GetVcselPulsePeriod>
 800b64e:	4603      	mov	r3, r0
 800b650:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                         &CurrentVCSELPulsePeriodPClk);
    if (Status == VL53L0X_ERROR_NONE) {
 800b654:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d109      	bne.n	800b670 <get_sequence_step_timeout+0x68>
      Status = VL53L0X_RdByte(Dev, VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
 800b65c:	f107 0320 	add.w	r3, r7, #32
 800b660:	461a      	mov	r2, r3
 800b662:	2146      	movs	r1, #70	; 0x46
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	f001 fc98 	bl	800cf9a <VL53L0X_RdByte>
 800b66a:	4603      	mov	r3, r0
 800b66c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                              &EncodedTimeOutByte);
    }
    MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800b670:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b674:	b29b      	uxth	r3, r3
 800b676:	4618      	mov	r0, r3
 800b678:	f7ff ff59 	bl	800b52e <VL53L0X_decode_timeout>
 800b67c:	4603      	mov	r3, r0
 800b67e:	847b      	strh	r3, [r7, #34]	; 0x22

    TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev, MsrcTimeOutMClks,
 800b680:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b684:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b686:	4619      	mov	r1, r3
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f7ff ff91 	bl	800b5b0 <_Z23VL53L0X_calc_timeout_usP13VL53L0X_Dev_tth>
 800b68e:	62b8      	str	r0, [r7, #40]	; 0x28
 800b690:	e092      	b.n	800b7b8 <get_sequence_step_timeout+0x1b0>
                                                  CurrentVCSELPulsePeriodPClk);
  } else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800b692:	7afb      	ldrb	r3, [r7, #11]
 800b694:	2b03      	cmp	r3, #3
 800b696:	d135      	bne.n	800b704 <get_sequence_step_timeout+0xfc>
    /* Retrieve PRE-RANGE VCSEL Period */
    Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE,
 800b698:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b69c:	461a      	mov	r2, r3
 800b69e:	2100      	movs	r1, #0
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	f7fd fab3 	bl	8008c0c <VL53L0X_GetVcselPulsePeriod>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                         &CurrentVCSELPulsePeriodPClk);

    /* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
    if (Status == VL53L0X_ERROR_NONE) {
 800b6ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	f040 8081 	bne.w	800b7b8 <get_sequence_step_timeout+0x1b0>

      /* Retrieve PRE-RANGE VCSEL Period */
      Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE,
 800b6b6:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	2100      	movs	r1, #0
 800b6be:	68f8      	ldr	r0, [r7, #12]
 800b6c0:	f7fd faa4 	bl	8008c0c <VL53L0X_GetVcselPulsePeriod>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                           &CurrentVCSELPulsePeriodPClk);

      if (Status == VL53L0X_ERROR_NONE) {
 800b6ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d109      	bne.n	800b6e6 <get_sequence_step_timeout+0xde>
        Status =
            VL53L0X_RdWord(Dev, VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800b6d2:	f107 031e 	add.w	r3, r7, #30
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	2151      	movs	r1, #81	; 0x51
 800b6da:	68f8      	ldr	r0, [r7, #12]
 800b6dc:	f001 fc7e 	bl	800cfdc <VL53L0X_RdWord>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                           &PreRangeEncodedTimeOut);
      }

      PreRangeTimeOutMClks = VL53L0X_decode_timeout(PreRangeEncodedTimeOut);
 800b6e6:	8bfb      	ldrh	r3, [r7, #30]
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f7ff ff20 	bl	800b52e <VL53L0X_decode_timeout>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	84fb      	strh	r3, [r7, #38]	; 0x26

      TimeoutMicroSeconds = VL53L0X_calc_timeout_us(
 800b6f2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b6f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	68f8      	ldr	r0, [r7, #12]
 800b6fc:	f7ff ff58 	bl	800b5b0 <_Z23VL53L0X_calc_timeout_usP13VL53L0X_Dev_tth>
 800b700:	62b8      	str	r0, [r7, #40]	; 0x28
 800b702:	e059      	b.n	800b7b8 <get_sequence_step_timeout+0x1b0>
          Dev, PreRangeTimeOutMClks, CurrentVCSELPulsePeriodPClk);
    }
  } else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800b704:	7afb      	ldrb	r3, [r7, #11]
 800b706:	2b04      	cmp	r3, #4
 800b708:	d156      	bne.n	800b7b8 <get_sequence_step_timeout+0x1b0>

    VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b70a:	f107 0314 	add.w	r3, r7, #20
 800b70e:	4619      	mov	r1, r3
 800b710:	68f8      	ldr	r0, [r7, #12]
 800b712:	f7fd fb85 	bl	8008e20 <VL53L0X_GetSequenceStepEnables>
    PreRangeTimeOutMClks = 0;
 800b716:	2300      	movs	r3, #0
 800b718:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (SchedulerSequenceSteps.PreRangeOn) {
 800b71a:	7dfb      	ldrb	r3, [r7, #23]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d01d      	beq.n	800b75c <get_sequence_step_timeout+0x154>
      /* Retrieve PRE-RANGE VCSEL Period */
      Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE,
 800b720:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b724:	461a      	mov	r2, r3
 800b726:	2100      	movs	r1, #0
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	f7fd fa6f 	bl	8008c0c <VL53L0X_GetVcselPulsePeriod>
 800b72e:	4603      	mov	r3, r0
 800b730:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                           &CurrentVCSELPulsePeriodPClk);

      /* Retrieve PRE-RANGE Timeout in Macro periods
       * (MCLKS) */
      if (Status == VL53L0X_ERROR_NONE) {
 800b734:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d10f      	bne.n	800b75c <get_sequence_step_timeout+0x154>
        Status =
            VL53L0X_RdWord(Dev, VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800b73c:	f107 031e 	add.w	r3, r7, #30
 800b740:	461a      	mov	r2, r3
 800b742:	2151      	movs	r1, #81	; 0x51
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f001 fc49 	bl	800cfdc <VL53L0X_RdWord>
 800b74a:	4603      	mov	r3, r0
 800b74c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                           &PreRangeEncodedTimeOut);
        PreRangeTimeOutMClks = VL53L0X_decode_timeout(PreRangeEncodedTimeOut);
 800b750:	8bfb      	ldrh	r3, [r7, #30]
 800b752:	4618      	mov	r0, r3
 800b754:	f7ff feeb 	bl	800b52e <VL53L0X_decode_timeout>
 800b758:	4603      	mov	r3, r0
 800b75a:	84fb      	strh	r3, [r7, #38]	; 0x26
      }
    }

    if (Status == VL53L0X_ERROR_NONE) {
 800b75c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b760:	2b00      	cmp	r3, #0
 800b762:	d109      	bne.n	800b778 <get_sequence_step_timeout+0x170>
      /* Retrieve FINAL-RANGE VCSEL Period */
      Status = VL53L0X_GetVcselPulsePeriod(
 800b764:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b768:	461a      	mov	r2, r3
 800b76a:	2101      	movs	r1, #1
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f7fd fa4d 	bl	8008c0c <VL53L0X_GetVcselPulsePeriod>
 800b772:	4603      	mov	r3, r0
 800b774:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, &CurrentVCSELPulsePeriodPClk);
    }

    /* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
    if (Status == VL53L0X_ERROR_NONE) {
 800b778:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d10f      	bne.n	800b7a0 <get_sequence_step_timeout+0x198>
      Status =
          VL53L0X_RdWord(Dev, VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800b780:	f107 031c 	add.w	r3, r7, #28
 800b784:	461a      	mov	r2, r3
 800b786:	2171      	movs	r1, #113	; 0x71
 800b788:	68f8      	ldr	r0, [r7, #12]
 800b78a:	f001 fc27 	bl	800cfdc <VL53L0X_RdWord>
 800b78e:	4603      	mov	r3, r0
 800b790:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                         &FinalRangeEncodedTimeOut);
      FinalRangeTimeOutMClks = VL53L0X_decode_timeout(FinalRangeEncodedTimeOut);
 800b794:	8bbb      	ldrh	r3, [r7, #28]
 800b796:	4618      	mov	r0, r3
 800b798:	f7ff fec9 	bl	800b52e <VL53L0X_decode_timeout>
 800b79c:	4603      	mov	r3, r0
 800b79e:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800b7a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b7a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b7a4:	1ad3      	subs	r3, r2, r3
 800b7a6:	84bb      	strh	r3, [r7, #36]	; 0x24
    TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev, FinalRangeTimeOutMClks,
 800b7a8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b7ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	68f8      	ldr	r0, [r7, #12]
 800b7b2:	f7ff fefd 	bl	800b5b0 <_Z23VL53L0X_calc_timeout_usP13VL53L0X_Dev_tth>
 800b7b6:	62b8      	str	r0, [r7, #40]	; 0x28
                                                  CurrentVCSELPulsePeriodPClk);
  }

  *pTimeOutMicroSecs = TimeoutMicroSeconds;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7bc:	601a      	str	r2, [r3, #0]

  return Status;
 800b7be:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3730      	adds	r7, #48	; 0x30
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <set_sequence_step_timeout>:

VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
                                        VL53L0X_SequenceStepId SequenceStepId,
                                        uint32_t TimeOutMicroSecs) {
 800b7ca:	b580      	push	{r7, lr}
 800b7cc:	b08a      	sub	sp, #40	; 0x28
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	60f8      	str	r0, [r7, #12]
 800b7d2:	460b      	mov	r3, r1
 800b7d4:	607a      	str	r2, [r7, #4]
 800b7d6:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint16_t MsrcRangeTimeOutMClks;
  uint16_t FinalRangeTimeOutMClks;
  uint16_t FinalRangeEncodedTimeOut;
  VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

  if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC) ||
 800b7de:	7afb      	ldrb	r3, [r7, #11]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d005      	beq.n	800b7f0 <set_sequence_step_timeout+0x26>
 800b7e4:	7afb      	ldrb	r3, [r7, #11]
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d002      	beq.n	800b7f0 <set_sequence_step_timeout+0x26>
      (SequenceStepId == VL53L0X_SEQUENCESTEP_DSS) ||
 800b7ea:	7afb      	ldrb	r3, [r7, #11]
 800b7ec:	2b02      	cmp	r3, #2
 800b7ee:	d138      	bne.n	800b862 <set_sequence_step_timeout+0x98>
      (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

    Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE,
 800b7f0:	f107 031d 	add.w	r3, r7, #29
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	2100      	movs	r1, #0
 800b7f8:	68f8      	ldr	r0, [r7, #12]
 800b7fa:	f7fd fa07 	bl	8008c0c <VL53L0X_GetVcselPulsePeriod>
 800b7fe:	4603      	mov	r3, r0
 800b800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                         &CurrentVCSELPulsePeriodPClk);

    if (Status == VL53L0X_ERROR_NONE) {
 800b804:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d11a      	bne.n	800b842 <set_sequence_step_timeout+0x78>
      MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(
 800b80c:	7f7b      	ldrb	r3, [r7, #29]
 800b80e:	461a      	mov	r2, r3
 800b810:	6879      	ldr	r1, [r7, #4]
 800b812:	68f8      	ldr	r0, [r7, #12]
 800b814:	f7ff fea2 	bl	800b55c <VL53L0X_calc_timeout_mclks>
 800b818:	4603      	mov	r3, r0
 800b81a:	83fb      	strh	r3, [r7, #30]
          Dev, TimeOutMicroSecs, (uint8_t)CurrentVCSELPulsePeriodPClk);

      if (MsrcRangeTimeOutMClks > 256)
 800b81c:	8bfb      	ldrh	r3, [r7, #30]
 800b81e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b822:	d903      	bls.n	800b82c <set_sequence_step_timeout+0x62>
        MsrcEncodedTimeOut = 255;
 800b824:	23ff      	movs	r3, #255	; 0xff
 800b826:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b82a:	e004      	b.n	800b836 <set_sequence_step_timeout+0x6c>
      else
        MsrcEncodedTimeOut = (uint8_t)MsrcRangeTimeOutMClks - 1;
 800b82c:	8bfb      	ldrh	r3, [r7, #30]
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	3b01      	subs	r3, #1
 800b832:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, LastEncodedTimeout,
 800b836:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b83a:	b29a      	uxth	r2, r3
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
                                         MsrcEncodedTimeOut);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 800b842:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b846:	2b00      	cmp	r3, #0
 800b848:	f040 80ad 	bne.w	800b9a6 <set_sequence_step_timeout+0x1dc>
      Status = VL53L0X_WrByte(Dev, VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
 800b84c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b850:	461a      	mov	r2, r3
 800b852:	2146      	movs	r1, #70	; 0x46
 800b854:	68f8      	ldr	r0, [r7, #12]
 800b856:	f001 fb1a 	bl	800ce8e <VL53L0X_WrByte>
 800b85a:	4603      	mov	r3, r0
 800b85c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (Status == VL53L0X_ERROR_NONE) {
 800b860:	e0a1      	b.n	800b9a6 <set_sequence_step_timeout+0x1dc>
                              MsrcEncodedTimeOut);
    }
  } else {

    if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800b862:	7afb      	ldrb	r3, [r7, #11]
 800b864:	2b03      	cmp	r3, #3
 800b866:	d135      	bne.n	800b8d4 <set_sequence_step_timeout+0x10a>

      if (Status == VL53L0X_ERROR_NONE) {
 800b868:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d11b      	bne.n	800b8a8 <set_sequence_step_timeout+0xde>
        Status = VL53L0X_GetVcselPulsePeriod(
 800b870:	f107 031d 	add.w	r3, r7, #29
 800b874:	461a      	mov	r2, r3
 800b876:	2100      	movs	r1, #0
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f7fd f9c7 	bl	8008c0c <VL53L0X_GetVcselPulsePeriod>
 800b87e:	4603      	mov	r3, r0
 800b880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, &CurrentVCSELPulsePeriodPClk);
        PreRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(
 800b884:	7f7b      	ldrb	r3, [r7, #29]
 800b886:	461a      	mov	r2, r3
 800b888:	6879      	ldr	r1, [r7, #4]
 800b88a:	68f8      	ldr	r0, [r7, #12]
 800b88c:	f7ff fe66 	bl	800b55c <VL53L0X_calc_timeout_mclks>
 800b890:	4603      	mov	r3, r0
 800b892:	84bb      	strh	r3, [r7, #36]	; 0x24
            Dev, TimeOutMicroSecs, (uint8_t)CurrentVCSELPulsePeriodPClk);
        PreRangeEncodedTimeOut = VL53L0X_encode_timeout(PreRangeTimeOutMClks);
 800b894:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b896:	4618      	mov	r0, r3
 800b898:	f7ff fe1d 	bl	800b4d6 <VL53L0X_encode_timeout>
 800b89c:	4603      	mov	r3, r0
 800b89e:	837b      	strh	r3, [r7, #26]

        VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, LastEncodedTimeout,
 800b8a0:	8b7a      	ldrh	r2, [r7, #26]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
                                           PreRangeEncodedTimeOut);
      }

      if (Status == VL53L0X_ERROR_NONE) {
 800b8a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d108      	bne.n	800b8c2 <set_sequence_step_timeout+0xf8>
        Status =
            VL53L0X_WrWord(Dev, VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800b8b0:	8b7b      	ldrh	r3, [r7, #26]
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	2151      	movs	r1, #81	; 0x51
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	f001 fb0b 	bl	800ced2 <VL53L0X_WrWord>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                           PreRangeEncodedTimeOut);
      }

      if (Status == VL53L0X_ERROR_NONE) {
 800b8c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d16d      	bne.n	800b9a6 <set_sequence_step_timeout+0x1dc>
        VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, PreRangeTimeoutMicroSecs,
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800b8d2:	e068      	b.n	800b9a6 <set_sequence_step_timeout+0x1dc>
                                           TimeOutMicroSecs);
      }
    } else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800b8d4:	7afb      	ldrb	r3, [r7, #11]
 800b8d6:	2b04      	cmp	r3, #4
 800b8d8:	d162      	bne.n	800b9a0 <set_sequence_step_timeout+0x1d6>
       * must be added. To do this both final and pre-range
       * timeouts must be expressed in macro periods MClks
       * because they have different vcsel periods.
       */

      VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b8da:	f107 0314 	add.w	r3, r7, #20
 800b8de:	4619      	mov	r1, r3
 800b8e0:	68f8      	ldr	r0, [r7, #12]
 800b8e2:	f7fd fa9d 	bl	8008e20 <VL53L0X_GetSequenceStepEnables>
      PreRangeTimeOutMClks = 0;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (SchedulerSequenceSteps.PreRangeOn) {
 800b8ea:	7dfb      	ldrb	r3, [r7, #23]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d01d      	beq.n	800b92c <set_sequence_step_timeout+0x162>

        /* Retrieve PRE-RANGE VCSEL Period */
        Status = VL53L0X_GetVcselPulsePeriod(
 800b8f0:	f107 031d 	add.w	r3, r7, #29
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	2100      	movs	r1, #0
 800b8f8:	68f8      	ldr	r0, [r7, #12]
 800b8fa:	f7fd f987 	bl	8008c0c <VL53L0X_GetVcselPulsePeriod>
 800b8fe:	4603      	mov	r3, r0
 800b900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, &CurrentVCSELPulsePeriodPClk);

        /* Retrieve PRE-RANGE Timeout in Macro periods
         * (MCLKS) */
        if (Status == VL53L0X_ERROR_NONE) {
 800b904:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d10f      	bne.n	800b92c <set_sequence_step_timeout+0x162>
          Status = VL53L0X_RdWord(Dev, 0x51, &PreRangeEncodedTimeOut);
 800b90c:	f107 031a 	add.w	r3, r7, #26
 800b910:	461a      	mov	r2, r3
 800b912:	2151      	movs	r1, #81	; 0x51
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	f001 fb61 	bl	800cfdc <VL53L0X_RdWord>
 800b91a:	4603      	mov	r3, r0
 800b91c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          PreRangeTimeOutMClks = VL53L0X_decode_timeout(PreRangeEncodedTimeOut);
 800b920:	8b7b      	ldrh	r3, [r7, #26]
 800b922:	4618      	mov	r0, r3
 800b924:	f7ff fe03 	bl	800b52e <VL53L0X_decode_timeout>
 800b928:	4603      	mov	r3, r0
 800b92a:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Calculate FINAL RANGE Timeout in Macro Periods
       * (MCLKS) and add PRE-RANGE value
       */
      if (Status == VL53L0X_ERROR_NONE) {
 800b92c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b930:	2b00      	cmp	r3, #0
 800b932:	d109      	bne.n	800b948 <set_sequence_step_timeout+0x17e>

        Status =
            VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
 800b934:	f107 031d 	add.w	r3, r7, #29
 800b938:	461a      	mov	r2, r3
 800b93a:	2101      	movs	r1, #1
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f7fd f965 	bl	8008c0c <VL53L0X_GetVcselPulsePeriod>
 800b942:	4603      	mov	r3, r0
 800b944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                        &CurrentVCSELPulsePeriodPClk);
      }
      if (Status == VL53L0X_ERROR_NONE) {
 800b948:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d12a      	bne.n	800b9a6 <set_sequence_step_timeout+0x1dc>

        FinalRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(
 800b950:	7f7b      	ldrb	r3, [r7, #29]
 800b952:	461a      	mov	r2, r3
 800b954:	6879      	ldr	r1, [r7, #4]
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	f7ff fe00 	bl	800b55c <VL53L0X_calc_timeout_mclks>
 800b95c:	4603      	mov	r3, r0
 800b95e:	847b      	strh	r3, [r7, #34]	; 0x22
            Dev, TimeOutMicroSecs, (uint8_t)CurrentVCSELPulsePeriodPClk);

        FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800b960:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b962:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b964:	4413      	add	r3, r2
 800b966:	847b      	strh	r3, [r7, #34]	; 0x22

        FinalRangeEncodedTimeOut =
            VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800b968:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7ff fdb3 	bl	800b4d6 <VL53L0X_encode_timeout>
 800b970:	4603      	mov	r3, r0
 800b972:	843b      	strh	r3, [r7, #32]

        if (Status == VL53L0X_ERROR_NONE) {
 800b974:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d108      	bne.n	800b98e <set_sequence_step_timeout+0x1c4>
          Status = VL53L0X_WrWord(Dev, 0x71, FinalRangeEncodedTimeOut);
 800b97c:	8c3b      	ldrh	r3, [r7, #32]
 800b97e:	461a      	mov	r2, r3
 800b980:	2171      	movs	r1, #113	; 0x71
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	f001 faa5 	bl	800ced2 <VL53L0X_WrWord>
 800b988:	4603      	mov	r3, r0
 800b98a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        if (Status == VL53L0X_ERROR_NONE) {
 800b98e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b992:	2b00      	cmp	r3, #0
 800b994:	d107      	bne.n	800b9a6 <set_sequence_step_timeout+0x1dc>
          VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, FinalRangeTimeoutMicroSecs,
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800b99e:	e002      	b.n	800b9a6 <set_sequence_step_timeout+0x1dc>
                                             TimeOutMicroSecs);
        }
      }
    } else
      Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b9a0:	23fc      	movs	r3, #252	; 0xfc
 800b9a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return Status;
 800b9a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3728      	adds	r7, #40	; 0x28
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <VL53L0X_get_vcsel_pulse_period>:
}

VL53L0X_Error
VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
                               VL53L0X_VcselPeriod VcselPeriodType,
                               uint8_t *pVCSELPulsePeriodPCLK) {
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b086      	sub	sp, #24
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	60f8      	str	r0, [r7, #12]
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	607a      	str	r2, [r7, #4]
 800b9be:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	75fb      	strb	r3, [r7, #23]
  uint8_t vcsel_period_reg;

  switch (VcselPeriodType) {
 800b9c4:	7afb      	ldrb	r3, [r7, #11]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d002      	beq.n	800b9d0 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	d00a      	beq.n	800b9e4 <VL53L0X_get_vcsel_pulse_period+0x32>
 800b9ce:	e013      	b.n	800b9f8 <VL53L0X_get_vcsel_pulse_period+0x46>
  case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
 800b9d0:	f107 0316 	add.w	r3, r7, #22
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	2150      	movs	r1, #80	; 0x50
 800b9d8:	68f8      	ldr	r0, [r7, #12]
 800b9da:	f001 fade 	bl	800cf9a <VL53L0X_RdByte>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	75fb      	strb	r3, [r7, #23]
                            &vcsel_period_reg);
    break;
 800b9e2:	e00b      	b.n	800b9fc <VL53L0X_get_vcsel_pulse_period+0x4a>
  case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
 800b9e4:	f107 0316 	add.w	r3, r7, #22
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	2170      	movs	r1, #112	; 0x70
 800b9ec:	68f8      	ldr	r0, [r7, #12]
 800b9ee:	f001 fad4 	bl	800cf9a <VL53L0X_RdByte>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	75fb      	strb	r3, [r7, #23]
                            &vcsel_period_reg);
    break;
 800b9f6:	e001      	b.n	800b9fc <VL53L0X_get_vcsel_pulse_period+0x4a>
  default:
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b9f8:	23fc      	movs	r3, #252	; 0xfc
 800b9fa:	75fb      	strb	r3, [r7, #23]
  }

  if (Status == VL53L0X_ERROR_NONE)
 800b9fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d107      	bne.n	800ba14 <VL53L0X_get_vcsel_pulse_period+0x62>
    *pVCSELPulsePeriodPCLK = VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800ba04:	7dbb      	ldrb	r3, [r7, #22]
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7fe fffd 	bl	800aa06 <VL53L0X_decode_vcsel_period>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	461a      	mov	r2, r3
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	701a      	strb	r2, [r3, #0]

  return Status;
 800ba14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3718      	adds	r7, #24
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <VL53L0X_set_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(
    VL53L0X_DEV Dev, uint32_t MeasurementTimingBudgetMicroSeconds) {
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b092      	sub	sp, #72	; 0x48
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t FinalRangeTimingBudgetMicroSeconds;
  VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
  uint32_t MsrcDccTccTimeoutMicroSeconds = 2000;
 800ba30:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ba34:	613b      	str	r3, [r7, #16]
  uint32_t StartOverheadMicroSeconds = 1320;
 800ba36:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 800ba3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t EndOverheadMicroSeconds = 960;
 800ba3c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ba40:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t MsrcOverheadMicroSeconds = 660;
 800ba42:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ba46:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t TccOverheadMicroSeconds = 590;
 800ba48:	f240 234e 	movw	r3, #590	; 0x24e
 800ba4c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t DssOverheadMicroSeconds = 690;
 800ba4e:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ba52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t PreRangeOverheadMicroSeconds = 660;
 800ba54:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ba58:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ba5a:	f240 2326 	movw	r3, #550	; 0x226
 800ba5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t PreRangeTimeoutMicroSeconds = 0;
 800ba60:	2300      	movs	r3, #0
 800ba62:	60fb      	str	r3, [r7, #12]
  uint32_t cMinTimingBudgetMicroSeconds = 20000;
 800ba64:	f644 6320 	movw	r3, #20000	; 0x4e20
 800ba68:	623b      	str	r3, [r7, #32]
  uint32_t SubTimeout = 0;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	61fb      	str	r3, [r7, #28]

  LOG_FUNCTION_START("");

  if (MeasurementTimingBudgetMicroSeconds < cMinTimingBudgetMicroSeconds) {
 800ba6e:	683a      	ldr	r2, [r7, #0]
 800ba70:	6a3b      	ldr	r3, [r7, #32]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d205      	bcs.n	800ba82 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ba76:	23fc      	movs	r3, #252	; 0xfc
 800ba78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    return Status;
 800ba7c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ba80:	e0aa      	b.n	800bbd8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
  }

  FinalRangeTimingBudgetMicroSeconds =
      MeasurementTimingBudgetMicroSeconds -
      (StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800ba82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba86:	4413      	add	r3, r2
  FinalRangeTimingBudgetMicroSeconds =
 800ba88:	683a      	ldr	r2, [r7, #0]
 800ba8a:	1ad3      	subs	r3, r2, r3
 800ba8c:	643b      	str	r3, [r7, #64]	; 0x40

  Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ba8e:	f107 0314 	add.w	r3, r7, #20
 800ba92:	4619      	mov	r1, r3
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f7fd f9c3 	bl	8008e20 <VL53L0X_GetSequenceStepEnables>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  if (Status == VL53L0X_ERROR_NONE &&
 800baa0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d15b      	bne.n	800bb60 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
      (SchedulerSequenceSteps.TccOn || SchedulerSequenceSteps.MsrcOn ||
 800baa8:	7d3b      	ldrb	r3, [r7, #20]
  if (Status == VL53L0X_ERROR_NONE &&
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d105      	bne.n	800baba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
      (SchedulerSequenceSteps.TccOn || SchedulerSequenceSteps.MsrcOn ||
 800baae:	7d7b      	ldrb	r3, [r7, #21]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d102      	bne.n	800baba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
       SchedulerSequenceSteps.DssOn)) {
 800bab4:	7dbb      	ldrb	r3, [r7, #22]
      (SchedulerSequenceSteps.TccOn || SchedulerSequenceSteps.MsrcOn ||
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d052      	beq.n	800bb60 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

    /* TCC, MSRC and DSS all share the same timeout */
    Status = get_sequence_step_timeout(Dev, VL53L0X_SEQUENCESTEP_MSRC,
 800baba:	f107 0310 	add.w	r3, r7, #16
 800babe:	461a      	mov	r2, r3
 800bac0:	2102      	movs	r1, #2
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f7ff fda0 	bl	800b608 <get_sequence_step_timeout>
 800bac8:	4603      	mov	r3, r0
 800baca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                                       &MsrcDccTccTimeoutMicroSeconds);

    /* Subtract the TCC, MSRC and DSS timeouts if they are
     * enabled. */

    if (Status != VL53L0X_ERROR_NONE)
 800bace:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d002      	beq.n	800badc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
      return Status;
 800bad6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bada:	e07d      	b.n	800bbd8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

    /* TCC */
    if (SchedulerSequenceSteps.TccOn) {
 800badc:	7d3b      	ldrb	r3, [r7, #20]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00f      	beq.n	800bb02 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

      SubTimeout = MsrcDccTccTimeoutMicroSeconds + TccOverheadMicroSeconds;
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bae6:	4413      	add	r3, r2
 800bae8:	61fb      	str	r3, [r7, #28]

      if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800baea:	69fa      	ldr	r2, [r7, #28]
 800baec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800baee:	429a      	cmp	r2, r3
 800baf0:	d204      	bcs.n	800bafc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
        FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800baf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800baf4:	69fb      	ldr	r3, [r7, #28]
 800baf6:	1ad3      	subs	r3, r2, r3
 800baf8:	643b      	str	r3, [r7, #64]	; 0x40
 800bafa:	e002      	b.n	800bb02 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
      } else {
        /* Requested timeout too big. */
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bafc:	23fc      	movs	r3, #252	; 0xfc
 800bafe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }

    if (Status != VL53L0X_ERROR_NONE) {
 800bb02:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d002      	beq.n	800bb10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
      LOG_FUNCTION_END(Status);
      return Status;
 800bb0a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bb0e:	e063      	b.n	800bbd8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
    }

    /* DSS */
    if (SchedulerSequenceSteps.DssOn) {
 800bb10:	7dbb      	ldrb	r3, [r7, #22]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d011      	beq.n	800bb3a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

      SubTimeout =
          2 * (MsrcDccTccTimeoutMicroSeconds + DssOverheadMicroSeconds);
 800bb16:	693a      	ldr	r2, [r7, #16]
 800bb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb1a:	4413      	add	r3, r2
      SubTimeout =
 800bb1c:	005b      	lsls	r3, r3, #1
 800bb1e:	61fb      	str	r3, [r7, #28]

      if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800bb20:	69fa      	ldr	r2, [r7, #28]
 800bb22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d204      	bcs.n	800bb32 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
        FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800bb28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb2a:	69fb      	ldr	r3, [r7, #28]
 800bb2c:	1ad3      	subs	r3, r2, r3
 800bb2e:	643b      	str	r3, [r7, #64]	; 0x40
 800bb30:	e016      	b.n	800bb60 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
      } else {
        /* Requested timeout too big. */
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bb32:	23fc      	movs	r3, #252	; 0xfc
 800bb34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bb38:	e012      	b.n	800bb60 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
      }
    } else if (SchedulerSequenceSteps.MsrcOn) {
 800bb3a:	7d7b      	ldrb	r3, [r7, #21]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d00f      	beq.n	800bb60 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
      /* MSRC */
      SubTimeout = MsrcDccTccTimeoutMicroSeconds + MsrcOverheadMicroSeconds;
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb44:	4413      	add	r3, r2
 800bb46:	61fb      	str	r3, [r7, #28]

      if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800bb48:	69fa      	ldr	r2, [r7, #28]
 800bb4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d204      	bcs.n	800bb5a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
        FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800bb50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb52:	69fb      	ldr	r3, [r7, #28]
 800bb54:	1ad3      	subs	r3, r2, r3
 800bb56:	643b      	str	r3, [r7, #64]	; 0x40
 800bb58:	e002      	b.n	800bb60 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
      } else {
        /* Requested timeout too big. */
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bb5a:	23fc      	movs	r3, #252	; 0xfc
 800bb5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  if (Status != VL53L0X_ERROR_NONE) {
 800bb60:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d002      	beq.n	800bb6e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
    LOG_FUNCTION_END(Status);
    return Status;
 800bb68:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bb6c:	e034      	b.n	800bbd8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
  }

  if (SchedulerSequenceSteps.PreRangeOn) {
 800bb6e:	7dfb      	ldrb	r3, [r7, #23]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d019      	beq.n	800bba8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

    /* Subtract the Pre-range timeout if enabled. */

    Status = get_sequence_step_timeout(Dev, VL53L0X_SEQUENCESTEP_PRE_RANGE,
 800bb74:	f107 030c 	add.w	r3, r7, #12
 800bb78:	461a      	mov	r2, r3
 800bb7a:	2103      	movs	r1, #3
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f7ff fd43 	bl	800b608 <get_sequence_step_timeout>
 800bb82:	4603      	mov	r3, r0
 800bb84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                                       &PreRangeTimeoutMicroSeconds);

    SubTimeout = PreRangeTimeoutMicroSeconds + PreRangeOverheadMicroSeconds;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb8c:	4413      	add	r3, r2
 800bb8e:	61fb      	str	r3, [r7, #28]

    if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800bb90:	69fa      	ldr	r2, [r7, #28]
 800bb92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d204      	bcs.n	800bba2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
      FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800bb98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	1ad3      	subs	r3, r2, r3
 800bb9e:	643b      	str	r3, [r7, #64]	; 0x40
 800bba0:	e002      	b.n	800bba8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
    } else {
      /* Requested timeout too big. */
      Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bba2:	23fc      	movs	r3, #252	; 0xfc
 800bba4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
  }

  if (Status == VL53L0X_ERROR_NONE && SchedulerSequenceSteps.FinalRangeOn) {
 800bba8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d111      	bne.n	800bbd4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
 800bbb0:	7e3b      	ldrb	r3, [r7, #24]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00e      	beq.n	800bbd4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

    FinalRangeTimingBudgetMicroSeconds -= FinalRangeOverheadMicroSeconds;
 800bbb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbba:	1ad3      	subs	r3, r2, r3
 800bbbc:	643b      	str	r3, [r7, #64]	; 0x40
     * budget and the sum of all other timeouts within the sequence.
     * If there is no room for the final range timeout, then an error
     * will be set. Otherwise the remaining time will be applied to
     * the final range.
     */
    Status = set_sequence_step_timeout(Dev, VL53L0X_SEQUENCESTEP_FINAL_RANGE,
 800bbbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bbc0:	2104      	movs	r1, #4
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f7ff fe01 	bl	800b7ca <set_sequence_step_timeout>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                                       FinalRangeTimingBudgetMicroSeconds);

    VL53L0X_SETPARAMETERFIELD(Dev, MeasurementTimingBudgetMicroSeconds,
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	683a      	ldr	r2, [r7, #0]
 800bbd2:	615a      	str	r2, [r3, #20]
                              MeasurementTimingBudgetMicroSeconds);
  }

  LOG_FUNCTION_END(Status);

  return Status;
 800bbd4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3748      	adds	r7, #72	; 0x48
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(
    VL53L0X_DEV Dev, uint32_t *pMeasurementTimingBudgetMicroSeconds) {
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b090      	sub	sp, #64	; 0x40
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bbea:	2300      	movs	r3, #0
 800bbec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
  uint32_t FinalRangeTimeoutMicroSeconds;
  uint32_t MsrcDccTccTimeoutMicroSeconds = 2000;
 800bbf0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800bbf4:	613b      	str	r3, [r7, #16]
  uint32_t StartOverheadMicroSeconds = 1910;
 800bbf6:	f240 7376 	movw	r3, #1910	; 0x776
 800bbfa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t EndOverheadMicroSeconds = 960;
 800bbfc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800bc00:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t MsrcOverheadMicroSeconds = 660;
 800bc02:	f44f 7325 	mov.w	r3, #660	; 0x294
 800bc06:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t TccOverheadMicroSeconds = 590;
 800bc08:	f240 234e 	movw	r3, #590	; 0x24e
 800bc0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t DssOverheadMicroSeconds = 690;
 800bc0e:	f240 23b2 	movw	r3, #690	; 0x2b2
 800bc12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t PreRangeOverheadMicroSeconds = 660;
 800bc14:	f44f 7325 	mov.w	r3, #660	; 0x294
 800bc18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t FinalRangeOverheadMicroSeconds = 550;
 800bc1a:	f240 2326 	movw	r3, #550	; 0x226
 800bc1e:	623b      	str	r3, [r7, #32]
  uint32_t PreRangeTimeoutMicroSeconds = 0;
 800bc20:	2300      	movs	r3, #0
 800bc22:	60fb      	str	r3, [r7, #12]

  LOG_FUNCTION_START("");

  /* Start and end overhead times always present */
  *pMeasurementTimingBudgetMicroSeconds =
      StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800bc24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc28:	441a      	add	r2, r3
  *pMeasurementTimingBudgetMicroSeconds =
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	601a      	str	r2, [r3, #0]

  Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800bc2e:	f107 0318 	add.w	r3, r7, #24
 800bc32:	4619      	mov	r1, r3
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f7fd f8f3 	bl	8008e20 <VL53L0X_GetSequenceStepEnables>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (Status != VL53L0X_ERROR_NONE) {
 800bc40:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d002      	beq.n	800bc4e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
    LOG_FUNCTION_END(Status);
    return Status;
 800bc48:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bc4c:	e075      	b.n	800bd3a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
  }

  if (SchedulerSequenceSteps.TccOn || SchedulerSequenceSteps.MsrcOn ||
 800bc4e:	7e3b      	ldrb	r3, [r7, #24]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d105      	bne.n	800bc60 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
 800bc54:	7e7b      	ldrb	r3, [r7, #25]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d102      	bne.n	800bc60 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
      SchedulerSequenceSteps.DssOn) {
 800bc5a:	7ebb      	ldrb	r3, [r7, #26]
  if (SchedulerSequenceSteps.TccOn || SchedulerSequenceSteps.MsrcOn ||
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d030      	beq.n	800bcc2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

    Status = get_sequence_step_timeout(Dev, VL53L0X_SEQUENCESTEP_MSRC,
 800bc60:	f107 0310 	add.w	r3, r7, #16
 800bc64:	461a      	mov	r2, r3
 800bc66:	2102      	movs	r1, #2
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f7ff fccd 	bl	800b608 <get_sequence_step_timeout>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                       &MsrcDccTccTimeoutMicroSeconds);

    if (Status == VL53L0X_ERROR_NONE) {
 800bc74:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d122      	bne.n	800bcc2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
      if (SchedulerSequenceSteps.TccOn) {
 800bc7c:	7e3b      	ldrb	r3, [r7, #24]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d007      	beq.n	800bc92 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
        *pMeasurementTimingBudgetMicroSeconds +=
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	681a      	ldr	r2, [r3, #0]
            MsrcDccTccTimeoutMicroSeconds + TccOverheadMicroSeconds;
 800bc86:	6939      	ldr	r1, [r7, #16]
 800bc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc8a:	440b      	add	r3, r1
        *pMeasurementTimingBudgetMicroSeconds +=
 800bc8c:	441a      	add	r2, r3
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	601a      	str	r2, [r3, #0]
      }

      if (SchedulerSequenceSteps.DssOn) {
 800bc92:	7ebb      	ldrb	r3, [r7, #26]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d009      	beq.n	800bcac <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
        *pMeasurementTimingBudgetMicroSeconds +=
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	681a      	ldr	r2, [r3, #0]
            2 * (MsrcDccTccTimeoutMicroSeconds + DssOverheadMicroSeconds);
 800bc9c:	6939      	ldr	r1, [r7, #16]
 800bc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca0:	440b      	add	r3, r1
 800bca2:	005b      	lsls	r3, r3, #1
        *pMeasurementTimingBudgetMicroSeconds +=
 800bca4:	441a      	add	r2, r3
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	601a      	str	r2, [r3, #0]
 800bcaa:	e00a      	b.n	800bcc2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
      } else if (SchedulerSequenceSteps.MsrcOn) {
 800bcac:	7e7b      	ldrb	r3, [r7, #25]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d007      	beq.n	800bcc2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
        *pMeasurementTimingBudgetMicroSeconds +=
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	681a      	ldr	r2, [r3, #0]
            MsrcDccTccTimeoutMicroSeconds + MsrcOverheadMicroSeconds;
 800bcb6:	6939      	ldr	r1, [r7, #16]
 800bcb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcba:	440b      	add	r3, r1
        *pMeasurementTimingBudgetMicroSeconds +=
 800bcbc:	441a      	add	r2, r3
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800bcc2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d114      	bne.n	800bcf4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
    if (SchedulerSequenceSteps.PreRangeOn) {
 800bcca:	7efb      	ldrb	r3, [r7, #27]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d011      	beq.n	800bcf4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
      Status = get_sequence_step_timeout(Dev, VL53L0X_SEQUENCESTEP_PRE_RANGE,
 800bcd0:	f107 030c 	add.w	r3, r7, #12
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	2103      	movs	r1, #3
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f7ff fc95 	bl	800b608 <get_sequence_step_timeout>
 800bcde:	4603      	mov	r3, r0
 800bce0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                         &PreRangeTimeoutMicroSeconds);
      *pMeasurementTimingBudgetMicroSeconds +=
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	681a      	ldr	r2, [r3, #0]
          PreRangeTimeoutMicroSeconds + PreRangeOverheadMicroSeconds;
 800bce8:	68f9      	ldr	r1, [r7, #12]
 800bcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcec:	440b      	add	r3, r1
      *pMeasurementTimingBudgetMicroSeconds +=
 800bcee:	441a      	add	r2, r3
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	601a      	str	r2, [r3, #0]
    }
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800bcf4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d114      	bne.n	800bd26 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
    if (SchedulerSequenceSteps.FinalRangeOn) {
 800bcfc:	7f3b      	ldrb	r3, [r7, #28]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d011      	beq.n	800bd26 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
      Status = get_sequence_step_timeout(Dev, VL53L0X_SEQUENCESTEP_FINAL_RANGE,
 800bd02:	f107 0314 	add.w	r3, r7, #20
 800bd06:	461a      	mov	r2, r3
 800bd08:	2104      	movs	r1, #4
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f7ff fc7c 	bl	800b608 <get_sequence_step_timeout>
 800bd10:	4603      	mov	r3, r0
 800bd12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                         &FinalRangeTimeoutMicroSeconds);
      *pMeasurementTimingBudgetMicroSeconds +=
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	681a      	ldr	r2, [r3, #0]
          (FinalRangeTimeoutMicroSeconds + FinalRangeOverheadMicroSeconds);
 800bd1a:	6979      	ldr	r1, [r7, #20]
 800bd1c:	6a3b      	ldr	r3, [r7, #32]
 800bd1e:	440b      	add	r3, r1
      *pMeasurementTimingBudgetMicroSeconds +=
 800bd20:	441a      	add	r2, r3
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	601a      	str	r2, [r3, #0]
    }
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800bd26:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d103      	bne.n	800bd36 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
    VL53L0X_SETPARAMETERFIELD(Dev, MeasurementTimingBudgetMicroSeconds,
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	615a      	str	r2, [r3, #20]
                              *pMeasurementTimingBudgetMicroSeconds);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800bd36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3740      	adds	r7, #64	; 0x40
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
	...

0800bd44 <VL53L0X_load_tuning_settings>:

VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
                                           uint8_t *pTuningSettingBuffer) {
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b088      	sub	sp, #32
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	77fb      	strb	r3, [r7, #31]
  uint8_t localBuffer[4]; /* max */
  uint16_t Temp16;

  LOG_FUNCTION_START("");

  Index = 0;
 800bd52:	2300      	movs	r3, #0
 800bd54:	617b      	str	r3, [r7, #20]

  while ((*(pTuningSettingBuffer + Index) != 0) &&
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	683a      	ldr	r2, [r7, #0]
 800bd5a:	4413      	add	r3, r2
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	f000 80ce 	beq.w	800bf00 <VL53L0X_load_tuning_settings+0x1bc>
 800bd64:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	f040 80c9 	bne.w	800bf00 <VL53L0X_load_tuning_settings+0x1bc>
         (Status == VL53L0X_ERROR_NONE)) {
    NumberOfWrites = *(pTuningSettingBuffer + Index);
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	683a      	ldr	r2, [r7, #0]
 800bd72:	4413      	add	r3, r2
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	74fb      	strb	r3, [r7, #19]
    Index++;
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	617b      	str	r3, [r7, #20]
    if (NumberOfWrites == 0xFF) {
 800bd7e:	7cfb      	ldrb	r3, [r7, #19]
 800bd80:	2bff      	cmp	r3, #255	; 0xff
 800bd82:	f040 808e 	bne.w	800bea2 <VL53L0X_load_tuning_settings+0x15e>
      /* internal parameters */
      SelectParam = *(pTuningSettingBuffer + Index);
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	683a      	ldr	r2, [r7, #0]
 800bd8a:	4413      	add	r3, r2
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	747b      	strb	r3, [r7, #17]
      Index++;
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	3301      	adds	r3, #1
 800bd94:	617b      	str	r3, [r7, #20]
      switch (SelectParam) {
 800bd96:	7c7b      	ldrb	r3, [r7, #17]
 800bd98:	2b03      	cmp	r3, #3
 800bd9a:	d87f      	bhi.n	800be9c <VL53L0X_load_tuning_settings+0x158>
 800bd9c:	a201      	add	r2, pc, #4	; (adr r2, 800bda4 <VL53L0X_load_tuning_settings+0x60>)
 800bd9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda2:	bf00      	nop
 800bda4:	0800bdb5 	.word	0x0800bdb5
 800bda8:	0800bdef 	.word	0x0800bdef
 800bdac:	0800be29 	.word	0x0800be29
 800bdb0:	0800be63 	.word	0x0800be63
      case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
        msb = *(pTuningSettingBuffer + Index);
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	683a      	ldr	r2, [r7, #0]
 800bdb8:	4413      	add	r3, r2
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	743b      	strb	r3, [r7, #16]
        Index++;
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	617b      	str	r3, [r7, #20]
        lsb = *(pTuningSettingBuffer + Index);
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	683a      	ldr	r2, [r7, #0]
 800bdc8:	4413      	add	r3, r2
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	73fb      	strb	r3, [r7, #15]
        Index++;
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	617b      	str	r3, [r7, #20]
        Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800bdd4:	7c3b      	ldrb	r3, [r7, #16]
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	021b      	lsls	r3, r3, #8
 800bdda:	b29a      	uxth	r2, r3
 800bddc:	7bfb      	ldrb	r3, [r7, #15]
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	4413      	add	r3, r2
 800bde2:	81bb      	strh	r3, [r7, #12]
        PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	89ba      	ldrh	r2, [r7, #12]
 800bde8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
        break;
 800bdec:	e087      	b.n	800befe <VL53L0X_load_tuning_settings+0x1ba>
      case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
        msb = *(pTuningSettingBuffer + Index);
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	683a      	ldr	r2, [r7, #0]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	743b      	strb	r3, [r7, #16]
        Index++;
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	617b      	str	r3, [r7, #20]
        lsb = *(pTuningSettingBuffer + Index);
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	683a      	ldr	r2, [r7, #0]
 800be02:	4413      	add	r3, r2
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	73fb      	strb	r3, [r7, #15]
        Index++;
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	3301      	adds	r3, #1
 800be0c:	617b      	str	r3, [r7, #20]
        Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800be0e:	7c3b      	ldrb	r3, [r7, #16]
 800be10:	b29b      	uxth	r3, r3
 800be12:	021b      	lsls	r3, r3, #8
 800be14:	b29a      	uxth	r2, r3
 800be16:	7bfb      	ldrb	r3, [r7, #15]
 800be18:	b29b      	uxth	r3, r3
 800be1a:	4413      	add	r3, r2
 800be1c:	81bb      	strh	r3, [r7, #12]
        PALDevDataSet(Dev, SigmaEstEffPulseWidth, Temp16);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	89ba      	ldrh	r2, [r7, #12]
 800be22:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
        break;
 800be26:	e06a      	b.n	800befe <VL53L0X_load_tuning_settings+0x1ba>
      case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
        msb = *(pTuningSettingBuffer + Index);
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	683a      	ldr	r2, [r7, #0]
 800be2c:	4413      	add	r3, r2
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	743b      	strb	r3, [r7, #16]
        Index++;
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	3301      	adds	r3, #1
 800be36:	617b      	str	r3, [r7, #20]
        lsb = *(pTuningSettingBuffer + Index);
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	683a      	ldr	r2, [r7, #0]
 800be3c:	4413      	add	r3, r2
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	73fb      	strb	r3, [r7, #15]
        Index++;
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	3301      	adds	r3, #1
 800be46:	617b      	str	r3, [r7, #20]
        Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800be48:	7c3b      	ldrb	r3, [r7, #16]
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	021b      	lsls	r3, r3, #8
 800be4e:	b29a      	uxth	r2, r3
 800be50:	7bfb      	ldrb	r3, [r7, #15]
 800be52:	b29b      	uxth	r3, r3
 800be54:	4413      	add	r3, r2
 800be56:	81bb      	strh	r3, [r7, #12]
        PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	89ba      	ldrh	r2, [r7, #12]
 800be5c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
        break;
 800be60:	e04d      	b.n	800befe <VL53L0X_load_tuning_settings+0x1ba>
      case 3: /* uint16_t targetRefRate -> 2 bytes */
        msb = *(pTuningSettingBuffer + Index);
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	683a      	ldr	r2, [r7, #0]
 800be66:	4413      	add	r3, r2
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	743b      	strb	r3, [r7, #16]
        Index++;
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	3301      	adds	r3, #1
 800be70:	617b      	str	r3, [r7, #20]
        lsb = *(pTuningSettingBuffer + Index);
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	683a      	ldr	r2, [r7, #0]
 800be76:	4413      	add	r3, r2
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	73fb      	strb	r3, [r7, #15]
        Index++;
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	3301      	adds	r3, #1
 800be80:	617b      	str	r3, [r7, #20]
        Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800be82:	7c3b      	ldrb	r3, [r7, #16]
 800be84:	b29b      	uxth	r3, r3
 800be86:	021b      	lsls	r3, r3, #8
 800be88:	b29a      	uxth	r2, r3
 800be8a:	7bfb      	ldrb	r3, [r7, #15]
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	4413      	add	r3, r2
 800be90:	81bb      	strh	r3, [r7, #12]
        PALDevDataSet(Dev, targetRefRate, Temp16);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	89ba      	ldrh	r2, [r7, #12]
 800be96:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
        break;
 800be9a:	e030      	b.n	800befe <VL53L0X_load_tuning_settings+0x1ba>
      default: /* invalid parameter */
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800be9c:	23fc      	movs	r3, #252	; 0xfc
 800be9e:	77fb      	strb	r3, [r7, #31]
 800bea0:	e759      	b.n	800bd56 <VL53L0X_load_tuning_settings+0x12>
      }

    } else if (NumberOfWrites <= 4) {
 800bea2:	7cfb      	ldrb	r3, [r7, #19]
 800bea4:	2b04      	cmp	r3, #4
 800bea6:	d828      	bhi.n	800befa <VL53L0X_load_tuning_settings+0x1b6>
      Address = *(pTuningSettingBuffer + Index);
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	683a      	ldr	r2, [r7, #0]
 800beac:	4413      	add	r3, r2
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	74bb      	strb	r3, [r7, #18]
      Index++;
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	3301      	adds	r3, #1
 800beb6:	617b      	str	r3, [r7, #20]

      for (i = 0; i < NumberOfWrites; i++) {
 800beb8:	2300      	movs	r3, #0
 800beba:	61bb      	str	r3, [r7, #24]
 800bebc:	7cfb      	ldrb	r3, [r7, #19]
 800bebe:	69ba      	ldr	r2, [r7, #24]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	da10      	bge.n	800bee6 <VL53L0X_load_tuning_settings+0x1a2>
        localBuffer[i] = *(pTuningSettingBuffer + Index);
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	683a      	ldr	r2, [r7, #0]
 800bec8:	4413      	add	r3, r2
 800beca:	7819      	ldrb	r1, [r3, #0]
 800becc:	f107 0208 	add.w	r2, r7, #8
 800bed0:	69bb      	ldr	r3, [r7, #24]
 800bed2:	4413      	add	r3, r2
 800bed4:	460a      	mov	r2, r1
 800bed6:	701a      	strb	r2, [r3, #0]
        Index++;
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	3301      	adds	r3, #1
 800bedc:	617b      	str	r3, [r7, #20]
      for (i = 0; i < NumberOfWrites; i++) {
 800bede:	69bb      	ldr	r3, [r7, #24]
 800bee0:	3301      	adds	r3, #1
 800bee2:	61bb      	str	r3, [r7, #24]
 800bee4:	e7ea      	b.n	800bebc <VL53L0X_load_tuning_settings+0x178>
      }

      Status = VL53L0X_WriteMulti(Dev, Address, localBuffer, NumberOfWrites);
 800bee6:	7cfb      	ldrb	r3, [r7, #19]
 800bee8:	f107 0208 	add.w	r2, r7, #8
 800beec:	7cb9      	ldrb	r1, [r7, #18]
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 ff79 	bl	800cde6 <VL53L0X_WriteMulti>
 800bef4:	4603      	mov	r3, r0
 800bef6:	77fb      	strb	r3, [r7, #31]
 800bef8:	e72d      	b.n	800bd56 <VL53L0X_load_tuning_settings+0x12>

    } else {
      Status = VL53L0X_ERROR_INVALID_PARAMS;
 800befa:	23fc      	movs	r3, #252	; 0xfc
 800befc:	77fb      	strb	r3, [r7, #31]
  while ((*(pTuningSettingBuffer + Index) != 0) &&
 800befe:	e72a      	b.n	800bd56 <VL53L0X_load_tuning_settings+0x12>
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800bf00:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3720      	adds	r7, #32
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(
    VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
    FixPoint1616_t *ptotal_xtalk_rate_mcps) {
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b088      	sub	sp, #32
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	60f8      	str	r0, [r7, #12]
 800bf14:	60b9      	str	r1, [r7, #8]
 800bf16:	607a      	str	r2, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	77fb      	strb	r3, [r7, #31]

  uint8_t xtalkCompEnable;
  FixPoint1616_t totalXtalkMegaCps;
  FixPoint1616_t xtalkPerSpadMegaCps;

  *ptotal_xtalk_rate_mcps = 0;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	601a      	str	r2, [r3, #0]

  Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800bf22:	f107 0313 	add.w	r3, r7, #19
 800bf26:	4619      	mov	r1, r3
 800bf28:	68f8      	ldr	r0, [r7, #12]
 800bf2a:	f7fd f845 	bl	8008fb8 <VL53L0X_GetXTalkCompensationEnable>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	77fb      	strb	r3, [r7, #31]
  if (Status == VL53L0X_ERROR_NONE) {
 800bf32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d111      	bne.n	800bf5e <VL53L0X_get_total_xtalk_rate+0x52>

    if (xtalkCompEnable) {
 800bf3a:	7cfb      	ldrb	r3, [r7, #19]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d00e      	beq.n	800bf5e <VL53L0X_get_total_xtalk_rate+0x52>

      VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	6a1b      	ldr	r3, [r3, #32]
 800bf44:	61bb      	str	r3, [r7, #24]
                                xtalkPerSpadMegaCps);

      /* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
      totalXtalkMegaCps =
          pRangingMeasurementData->EffectiveSpadRtnCount * xtalkPerSpadMegaCps;
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	8a9b      	ldrh	r3, [r3, #20]
 800bf4a:	461a      	mov	r2, r3
      totalXtalkMegaCps =
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	fb02 f303 	mul.w	r3, r2, r3
 800bf52:	617b      	str	r3, [r7, #20]

      /* FixPoint0824 >> 8 = FixPoint1616 */
      *ptotal_xtalk_rate_mcps = (totalXtalkMegaCps + 0x80) >> 8;
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	3380      	adds	r3, #128	; 0x80
 800bf58:	0a1a      	lsrs	r2, r3, #8
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	601a      	str	r2, [r3, #0]
    }
  }

  return Status;
 800bf5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3720      	adds	r7, #32
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}

0800bf6a <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(
    VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
    FixPoint1616_t *ptotal_signal_rate_mcps) {
 800bf6a:	b580      	push	{r7, lr}
 800bf6c:	b086      	sub	sp, #24
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	60f8      	str	r0, [r7, #12]
 800bf72:	60b9      	str	r1, [r7, #8]
 800bf74:	607a      	str	r2, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf76:	2300      	movs	r3, #0
 800bf78:	75fb      	strb	r3, [r7, #23]
  FixPoint1616_t totalXtalkMegaCps;

  LOG_FUNCTION_START("");

  *ptotal_signal_rate_mcps = pRangingMeasurementData->SignalRateRtnMegaCps;
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	68da      	ldr	r2, [r3, #12]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	601a      	str	r2, [r3, #0]

  Status = VL53L0X_get_total_xtalk_rate(Dev, pRangingMeasurementData,
 800bf82:	f107 0310 	add.w	r3, r7, #16
 800bf86:	461a      	mov	r2, r3
 800bf88:	68b9      	ldr	r1, [r7, #8]
 800bf8a:	68f8      	ldr	r0, [r7, #12]
 800bf8c:	f7ff ffbe 	bl	800bf0c <VL53L0X_get_total_xtalk_rate>
 800bf90:	4603      	mov	r3, r0
 800bf92:	75fb      	strb	r3, [r7, #23]
                                        &totalXtalkMegaCps);

  if (Status == VL53L0X_ERROR_NONE)
 800bf94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d105      	bne.n	800bfa8 <VL53L0X_get_total_signal_rate+0x3e>
    *ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681a      	ldr	r2, [r3, #0]
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	441a      	add	r2, r3
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	601a      	str	r2, [r3, #0]

  return Status;
 800bfa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3718      	adds	r7, #24
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm>:
                                FixPoint1616_t totalSignalRate_mcps,
                                FixPoint1616_t totalCorrSignalRate_mcps,
                                FixPoint1616_t pwMult, uint32_t sigmaEstimateP1,
                                FixPoint1616_t sigmaEstimateP2,
                                uint32_t peakVcselDuration_us,
                                uint32_t *pdmax_mm) {
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b09a      	sub	sp, #104	; 0x68
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60f8      	str	r0, [r7, #12]
 800bfbc:	60b9      	str	r1, [r7, #8]
 800bfbe:	607a      	str	r2, [r7, #4]
 800bfc0:	603b      	str	r3, [r7, #0]
  const uint32_t cSigmaLimit = 18;
 800bfc2:	2312      	movs	r3, #18
 800bfc4:	657b      	str	r3, [r7, #84]	; 0x54
  const FixPoint1616_t cSignalLimit = 0x4000;     /* 0.25 */
 800bfc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bfca:	653b      	str	r3, [r7, #80]	; 0x50
  const FixPoint1616_t cSigmaEstRef = 0x00000042; /* 0.001 */
 800bfcc:	2342      	movs	r3, #66	; 0x42
 800bfce:	64fb      	str	r3, [r7, #76]	; 0x4c
  const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800bfd0:	2306      	movs	r3, #6
 800bfd2:	64bb      	str	r3, [r7, #72]	; 0x48
  const uint32_t cAmbEffWidthDMax_ns = 7;
 800bfd4:	2307      	movs	r3, #7
 800bfd6:	647b      	str	r3, [r7, #68]	; 0x44
  FixPoint1616_t dmaxAmbient;
  FixPoint1616_t dmaxDarkTmp;
  FixPoint1616_t sigmaEstP2Tmp;
  uint32_t signalRateTemp_mcps;

  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  LOG_FUNCTION_START("");

  dmaxCalRange_mm = PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 800bfe4:	63fb      	str	r3, [r7, #60]	; 0x3c

  dmaxCalSignalRateRtn_mcps = PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800bfec:	63bb      	str	r3, [r7, #56]	; 0x38

  /* uint32 * FixPoint1616 = FixPoint1616 */
  SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800bfee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bff2:	fb02 f303 	mul.w	r3, r2, r3
 800bff6:	637b      	str	r3, [r7, #52]	; 0x34

  /* FixPoint1616 >> 8 = FixPoint2408 */
  SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800bff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bffa:	3380      	adds	r3, #128	; 0x80
 800bffc:	0a1b      	lsrs	r3, r3, #8
 800bffe:	637b      	str	r3, [r7, #52]	; 0x34
  SignalAt0mm *= dmaxCalRange_mm;
 800c000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c002:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c004:	fb02 f303 	mul.w	r3, r2, r3
 800c008:	637b      	str	r3, [r7, #52]	; 0x34

  minSignalNeeded_p1 = 0;
 800c00a:	2300      	movs	r3, #0
 800c00c:	667b      	str	r3, [r7, #100]	; 0x64
  if (totalCorrSignalRate_mcps > 0) {
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d01a      	beq.n	800c04a <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x96>

    /* Shift by 10 bits to increase resolution prior to the
     * division */
    signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	029b      	lsls	r3, r3, #10
 800c018:	633b      	str	r3, [r7, #48]	; 0x30

    /* Add rounding value prior to division */
    minSignalNeeded_p1 = signalRateTemp_mcps + (totalCorrSignalRate_mcps / 2);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	085b      	lsrs	r3, r3, #1
 800c01e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c020:	4413      	add	r3, r2
 800c022:	667b      	str	r3, [r7, #100]	; 0x64

    /* FixPoint0626/FixPoint1616 = FixPoint2210 */
    minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800c024:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	fbb2 f3f3 	udiv	r3, r2, r3
 800c02c:	667b      	str	r3, [r7, #100]	; 0x64

    /* Apply a factored version of the speed of light.
     Correction to be applied at the end */
    minSignalNeeded_p1 *= 3;
 800c02e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c030:	4613      	mov	r3, r2
 800c032:	005b      	lsls	r3, r3, #1
 800c034:	4413      	add	r3, r2
 800c036:	667b      	str	r3, [r7, #100]	; 0x64

    /* FixPoint2210 * FixPoint2210 = FixPoint1220 */
    minSignalNeeded_p1 *= minSignalNeeded_p1;
 800c038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c03a:	fb03 f303 	mul.w	r3, r3, r3
 800c03e:	667b      	str	r3, [r7, #100]	; 0x64

    /* FixPoint1220 >> 16 = FixPoint2804 */
    minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800c040:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c042:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c046:	0c1b      	lsrs	r3, r3, #16
 800c048:	667b      	str	r3, [r7, #100]	; 0x64
  }

  minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c04e:	fb02 f303 	mul.w	r3, r2, r3
 800c052:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* FixPoint1616 >> 16 =	 uint32 */
  minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800c054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c056:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c05a:	0c1b      	lsrs	r3, r3, #16
 800c05c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* uint32 * uint32	=  uint32 */
  minSignalNeeded_p2 *= minSignalNeeded_p2;
 800c05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c060:	fb03 f303 	mul.w	r3, r3, r3
 800c064:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Check sigmaEstimateP2
   * If this value is too high there is not enough signal rate
   * to calculate dmax value so set a suitable value to ensure
   * a very small dmax.
   */
  sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800c066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c068:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c06c:	0c1b      	lsrs	r3, r3, #16
 800c06e:	62bb      	str	r3, [r7, #40]	; 0x28
  sigmaEstP2Tmp =
      (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns / 2) / cAmbEffWidthSigmaEst_ns;
 800c070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c072:	3303      	adds	r3, #3
  sigmaEstP2Tmp =
 800c074:	4a55      	ldr	r2, [pc, #340]	; (800c1cc <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x218>)
 800c076:	fba2 2303 	umull	r2, r3, r2, r3
 800c07a:	089b      	lsrs	r3, r3, #2
 800c07c:	62bb      	str	r3, [r7, #40]	; 0x28
  sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800c07e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c080:	4613      	mov	r3, r2
 800c082:	00db      	lsls	r3, r3, #3
 800c084:	1a9b      	subs	r3, r3, r2
 800c086:	62bb      	str	r3, [r7, #40]	; 0x28

  if (sigmaEstP2Tmp > 0xffff) {
 800c088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c08e:	d302      	bcc.n	800c096 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0xe2>
    minSignalNeeded_p3 = 0xfff00000;
 800c090:	4b4f      	ldr	r3, [pc, #316]	; (800c1d0 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x21c>)
 800c092:	663b      	str	r3, [r7, #96]	; 0x60
 800c094:	e014      	b.n	800c0c0 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x10c>

    /* DMAX uses a different ambient width from sigma, so apply
     * correction.
     * Perform division before multiplication to prevent overflow.
     */
    sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns / 2) /
 800c096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c098:	3303      	adds	r3, #3
 800c09a:	4a4c      	ldr	r2, [pc, #304]	; (800c1cc <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x218>)
 800c09c:	fba2 2303 	umull	r2, r3, r2, r3
 800c0a0:	089b      	lsrs	r3, r3, #2
 800c0a2:	677b      	str	r3, [r7, #116]	; 0x74
                      cAmbEffWidthSigmaEst_ns;
    sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800c0a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c0a6:	4613      	mov	r3, r2
 800c0a8:	00db      	lsls	r3, r3, #3
 800c0aa:	1a9b      	subs	r3, r3, r2
 800c0ac:	677b      	str	r3, [r7, #116]	; 0x74

    /* FixPoint1616 >> 16 = uint32 */
    minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800c0ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c0b4:	0c1b      	lsrs	r3, r3, #16
 800c0b6:	663b      	str	r3, [r7, #96]	; 0x60

    minSignalNeeded_p3 *= minSignalNeeded_p3;
 800c0b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0ba:	fb03 f303 	mul.w	r3, r3, r3
 800c0be:	663b      	str	r3, [r7, #96]	; 0x60
  }

  /* FixPoint1814 / uint32 = FixPoint1814 */
  sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800c0c0:	f240 1327 	movw	r3, #295	; 0x127
 800c0c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
  sigmaLimitTmp *= sigmaLimitTmp;
 800c0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c8:	fb03 f303 	mul.w	r3, r3, r3
 800c0cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* FixPoint1616 * FixPoint1616 = FixPoint3232 */
  sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800c0ce:	f241 1304 	movw	r3, #4356	; 0x1104
 800c0d2:	623b      	str	r3, [r7, #32]

  /* FixPoint3232 >> 4 = FixPoint0428 */
  sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800c0d4:	6a3b      	ldr	r3, [r7, #32]
 800c0d6:	3308      	adds	r3, #8
 800c0d8:	091b      	lsrs	r3, r3, #4
 800c0da:	623b      	str	r3, [r7, #32]

  /* FixPoint0428 - FixPoint0428	= FixPoint0428 */
  sigmaLimitTmp -= sigmaEstSqTmp;
 800c0dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0de:	6a3b      	ldr	r3, [r7, #32]
 800c0e0:	1ad3      	subs	r3, r2, r3
 800c0e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* uint32_t * FixPoint0428 = FixPoint0428 */
  minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800c0e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0e6:	4613      	mov	r3, r2
 800c0e8:	005b      	lsls	r3, r3, #1
 800c0ea:	4413      	add	r3, r2
 800c0ec:	011b      	lsls	r3, r3, #4
 800c0ee:	61fb      	str	r3, [r7, #28]

  /* FixPoint0428 >> 14 = FixPoint1814 */
  minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800c0f0:	69fb      	ldr	r3, [r7, #28]
 800c0f2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c0f6:	0b9b      	lsrs	r3, r3, #14
 800c0f8:	61fb      	str	r3, [r7, #28]

  /* uint32 + uint32 = uint32 */
  minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800c0fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0fe:	4413      	add	r3, r2
 800c100:	61bb      	str	r3, [r7, #24]

  /* uint32 / uint32 = uint32 */
  minSignalNeeded += (peakVcselDuration_us / 2);
 800c102:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c104:	085b      	lsrs	r3, r3, #1
 800c106:	69ba      	ldr	r2, [r7, #24]
 800c108:	4413      	add	r3, r2
 800c10a:	61bb      	str	r3, [r7, #24]
  minSignalNeeded /= peakVcselDuration_us;
 800c10c:	69ba      	ldr	r2, [r7, #24]
 800c10e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c110:	fbb2 f3f3 	udiv	r3, r2, r3
 800c114:	61bb      	str	r3, [r7, #24]

  /* uint32 << 14 = FixPoint1814 */
  minSignalNeeded <<= 14;
 800c116:	69bb      	ldr	r3, [r7, #24]
 800c118:	039b      	lsls	r3, r3, #14
 800c11a:	61bb      	str	r3, [r7, #24]

  /* FixPoint1814 / FixPoint1814 = uint32 */
  minSignalNeeded += (minSignalNeeded_p4 / 2);
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	085b      	lsrs	r3, r3, #1
 800c120:	69ba      	ldr	r2, [r7, #24]
 800c122:	4413      	add	r3, r2
 800c124:	61bb      	str	r3, [r7, #24]
  minSignalNeeded /= minSignalNeeded_p4;
 800c126:	69ba      	ldr	r2, [r7, #24]
 800c128:	69fb      	ldr	r3, [r7, #28]
 800c12a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c12e:	61bb      	str	r3, [r7, #24]

  /* FixPoint3200 * FixPoint2804 := FixPoint2804*/
  minSignalNeeded *= minSignalNeeded_p1;
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c134:	fb02 f303 	mul.w	r3, r2, r3
 800c138:	61bb      	str	r3, [r7, #24]
   * and 10E-22 on the denominator.
   * We do this because 32bit fix point calculation can't
   * handle the larger and smaller elements of this equation,
   * i.e. speed of light and pulse widths.
   */
  minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c140:	4a24      	ldr	r2, [pc, #144]	; (800c1d4 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x220>)
 800c142:	fba2 2303 	umull	r2, r3, r2, r3
 800c146:	099b      	lsrs	r3, r3, #6
 800c148:	61bb      	str	r3, [r7, #24]
  minSignalNeeded <<= 4;
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	011b      	lsls	r3, r3, #4
 800c14e:	61bb      	str	r3, [r7, #24]

  minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800c150:	69bb      	ldr	r3, [r7, #24]
 800c152:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c156:	4a1f      	ldr	r2, [pc, #124]	; (800c1d4 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x220>)
 800c158:	fba2 2303 	umull	r2, r3, r2, r3
 800c15c:	099b      	lsrs	r3, r3, #6
 800c15e:	61bb      	str	r3, [r7, #24]

  /* FixPoint1616 >> 8 = FixPoint2408 */
  signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800c160:	2340      	movs	r3, #64	; 0x40
 800c162:	617b      	str	r3, [r7, #20]

  /* FixPoint2408/FixPoint2408 = uint32 */
  if (signalLimitTmp != 0)
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d008      	beq.n	800c17c <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x1c8>
    dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2)) / signalLimitTmp;
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	085a      	lsrs	r2, r3, #1
 800c16e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c170:	441a      	add	r2, r3
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	fbb2 f3f3 	udiv	r3, r2, r3
 800c178:	65bb      	str	r3, [r7, #88]	; 0x58
 800c17a:	e001      	b.n	800c180 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x1cc>
  else
    dmaxDarkTmp = 0;
 800c17c:	2300      	movs	r3, #0
 800c17e:	65bb      	str	r3, [r7, #88]	; 0x58

  dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800c180:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c182:	f7fe fc53 	bl	800aa2c <VL53L0X_isqrt>
 800c186:	6138      	str	r0, [r7, #16]

  /* FixPoint2408/FixPoint2408 = uint32 */
  if (minSignalNeeded != 0)
 800c188:	69bb      	ldr	r3, [r7, #24]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d008      	beq.n	800c1a0 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x1ec>
    dmaxAmbient = (SignalAt0mm + minSignalNeeded / 2) / minSignalNeeded;
 800c18e:	69bb      	ldr	r3, [r7, #24]
 800c190:	085a      	lsrs	r2, r3, #1
 800c192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c194:	441a      	add	r2, r3
 800c196:	69bb      	ldr	r3, [r7, #24]
 800c198:	fbb2 f3f3 	udiv	r3, r2, r3
 800c19c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c19e:	e001      	b.n	800c1a4 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x1f0>
  else
    dmaxAmbient = 0;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	65fb      	str	r3, [r7, #92]	; 0x5c

  dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800c1a4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c1a6:	f7fe fc41 	bl	800aa2c <VL53L0X_isqrt>
 800c1aa:	65f8      	str	r0, [r7, #92]	; 0x5c

  *pdmax_mm = dmaxDark;
 800c1ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c1ae:	693a      	ldr	r2, [r7, #16]
 800c1b0:	601a      	str	r2, [r3, #0]
  if (dmaxDark > dmaxAmbient)
 800c1b2:	693a      	ldr	r2, [r7, #16]
 800c1b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d902      	bls.n	800c1c0 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x20c>
    *pdmax_mm = dmaxAmbient;
 800c1ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c1bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c1be:	601a      	str	r2, [r3, #0]

  LOG_FUNCTION_END(Status);

  return Status;
 800c1c0:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3768      	adds	r7, #104	; 0x68
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	aaaaaaab 	.word	0xaaaaaaab
 800c1d0:	fff00000 	.word	0xfff00000
 800c1d4:	10624dd3 	.word	0x10624dd3

0800c1d8 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(
    VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
    FixPoint1616_t *pSigmaEstimate, uint32_t *pDmax_mm) {
 800c1d8:	b5b0      	push	{r4, r5, r7, lr}
 800c1da:	b0b2      	sub	sp, #200	; 0xc8
 800c1dc:	af04      	add	r7, sp, #16
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	60b9      	str	r1, [r7, #8]
 800c1e2:	607a      	str	r2, [r7, #4]
 800c1e4:	603b      	str	r3, [r7, #0]
  /* Expressed in 100ths of a ns, i.e. centi-ns */
  const uint32_t cPulseEffectiveWidth_centi_ns = 800;
 800c1e6:	f44f 7348 	mov.w	r3, #800	; 0x320
 800c1ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  /* Expressed in 100ths of a ns, i.e. centi-ns */
  const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800c1ee:	f44f 7316 	mov.w	r3, #600	; 0x258
 800c1f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  const FixPoint1616_t cSigmaEstRef = 0x00000042; /* 0.001 */
 800c1f6:	2342      	movs	r3, #66	; 0x42
 800c1f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  const uint32_t cVcselPulseWidth_ps = 4700;      /* pico secs */
 800c1fc:	f241 235c 	movw	r3, #4700	; 0x125c
 800c200:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const FixPoint1616_t cSigmaEstMax = 0x028F87AE;
 800c204:	4b69      	ldr	r3, [pc, #420]	; (800c3ac <VL53L0X_calc_sigma_estimate+0x1d4>)
 800c206:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  const FixPoint1616_t cSigmaEstRtnMax = 0xF000;
 800c20a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800c20e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const FixPoint1616_t cAmbToSignalRatioMax =
 800c212:	4b67      	ldr	r3, [pc, #412]	; (800c3b0 <VL53L0X_calc_sigma_estimate+0x1d8>)
 800c214:	67fb      	str	r3, [r7, #124]	; 0x7c
      0xF0000000 / cAmbientEffectiveWidth_centi_ns;
  /* Time Of Flight per mm (6.6 pico secs) */
  const FixPoint1616_t cTOF_per_mm_ps = 0x0006999A;
 800c216:	4b67      	ldr	r3, [pc, #412]	; (800c3b4 <VL53L0X_calc_sigma_estimate+0x1dc>)
 800c218:	67bb      	str	r3, [r7, #120]	; 0x78
  const uint32_t c16BitRoundingParam = 0x00008000;
 800c21a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c21e:	677b      	str	r3, [r7, #116]	; 0x74
  const FixPoint1616_t cMaxXTalk_kcps = 0x00320000;
 800c220:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800c224:	673b      	str	r3, [r7, #112]	; 0x70
  const uint32_t cPllPeriod_ps = 1655;
 800c226:	f240 6377 	movw	r3, #1655	; 0x677
 800c22a:	66fb      	str	r3, [r7, #108]	; 0x6c
  FixPoint1616_t xTalkCorrection;
  FixPoint1616_t ambientRate_kcps;
  FixPoint1616_t peakSignalRate_kcps;
  FixPoint1616_t xTalkCompRate_mcps;
  uint32_t xTalkCompRate_kcps;
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c22c:	2300      	movs	r3, #0
 800c22e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
   *	- SigmaEstEffAmbWidth
   */

  LOG_FUNCTION_START("");

  VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6a1b      	ldr	r3, [r3, #32]
 800c236:	617b      	str	r3, [r7, #20]
   * We work in kcps rather than mcps as this helps keep within the
   * confines of the 32 Fix1616 type.
   */

  ambientRate_kcps =
      (pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	691b      	ldr	r3, [r3, #16]
 800c23c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c240:	fb02 f303 	mul.w	r3, r2, r3
  ambientRate_kcps =
 800c244:	0c1b      	lsrs	r3, r3, #16
 800c246:	66bb      	str	r3, [r7, #104]	; 0x68

  correctedSignalRate_mcps = pRangingMeasurementData->SignalRateRtnMegaCps;
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	68db      	ldr	r3, [r3, #12]
 800c24c:	667b      	str	r3, [r7, #100]	; 0x64

  Status = VL53L0X_get_total_signal_rate(Dev, pRangingMeasurementData,
 800c24e:	f107 0310 	add.w	r3, r7, #16
 800c252:	461a      	mov	r2, r3
 800c254:	68b9      	ldr	r1, [r7, #8]
 800c256:	68f8      	ldr	r0, [r7, #12]
 800c258:	f7ff fe87 	bl	800bf6a <VL53L0X_get_total_signal_rate>
 800c25c:	4603      	mov	r3, r0
 800c25e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
                                         &totalSignalRate_mcps);
  Status = VL53L0X_get_total_xtalk_rate(Dev, pRangingMeasurementData,
 800c262:	f107 0314 	add.w	r3, r7, #20
 800c266:	461a      	mov	r2, r3
 800c268:	68b9      	ldr	r1, [r7, #8]
 800c26a:	68f8      	ldr	r0, [r7, #12]
 800c26c:	f7ff fe4e 	bl	800bf0c <VL53L0X_get_total_xtalk_rate>
 800c270:	4603      	mov	r3, r0
 800c272:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
                                        &xTalkCompRate_mcps);

  /* Signal rate measurement provided by device is the
   * peak signal rate, not average.
   */
  peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c27c:	fb02 f303 	mul.w	r3, r2, r3
 800c280:	663b      	str	r3, [r7, #96]	; 0x60
  peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800c282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c284:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c288:	0c1b      	lsrs	r3, r3, #16
 800c28a:	663b      	str	r3, [r7, #96]	; 0x60

  xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c292:	fb02 f303 	mul.w	r3, r2, r3
 800c296:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800c29a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c29e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800c2a2:	d903      	bls.n	800c2ac <VL53L0X_calc_sigma_estimate+0xd4>
    xTalkCompRate_kcps = cMaxXTalk_kcps;
 800c2a4:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800c2a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  if (Status == VL53L0X_ERROR_NONE) {
 800c2ac:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d165      	bne.n	800c380 <VL53L0X_calc_sigma_estimate+0x1a8>

    /* Calculate final range macro periods */
    finalRangeTimeoutMicroSecs =
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800c2ba:	65fb      	str	r3, [r7, #92]	; 0x5c
        VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, FinalRangeTimeoutMicroSecs);

    finalRangeVcselPCLKS =
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800c2c2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
        VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, FinalRangeVcselPulsePeriod);

    finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800c2c6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c2ce:	68f8      	ldr	r0, [r7, #12]
 800c2d0:	f7ff f944 	bl	800b55c <VL53L0X_calc_timeout_mclks>
 800c2d4:	6578      	str	r0, [r7, #84]	; 0x54
        Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

    /* Calculate pre-range macro periods */
    preRangeTimeoutMicroSecs =
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c2dc:	653b      	str	r3, [r7, #80]	; 0x50
        VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, PreRangeTimeoutMicroSecs);

    preRangeVcselPCLKS =
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800c2e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, PreRangeVcselPulsePeriod);

    preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800c2e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c2f0:	68f8      	ldr	r0, [r7, #12]
 800c2f2:	f7ff f933 	bl	800b55c <VL53L0X_calc_timeout_mclks>
 800c2f6:	64b8      	str	r0, [r7, #72]	; 0x48
        Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

    vcselWidth = 3;
 800c2f8:	2303      	movs	r3, #3
 800c2fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (finalRangeVcselPCLKS == 8)
 800c2fe:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c302:	2b08      	cmp	r3, #8
 800c304:	d102      	bne.n	800c30c <VL53L0X_calc_sigma_estimate+0x134>
      vcselWidth = 2;
 800c306:	2302      	movs	r3, #2
 800c308:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    peakVcselDuration_us =
        vcselWidth * 2048 * (preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800c30c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c30e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c310:	4413      	add	r3, r2
 800c312:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800c316:	fb02 f303 	mul.w	r3, r2, r3
    peakVcselDuration_us =
 800c31a:	02db      	lsls	r3, r3, #11
 800c31c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    peakVcselDuration_us = (peakVcselDuration_us + 500) / 1000;
 800c320:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c324:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c328:	4a23      	ldr	r2, [pc, #140]	; (800c3b8 <VL53L0X_calc_sigma_estimate+0x1e0>)
 800c32a:	fba2 2303 	umull	r2, r3, r2, r3
 800c32e:	099b      	lsrs	r3, r3, #6
 800c330:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    peakVcselDuration_us *= cPllPeriod_ps;
 800c334:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c338:	f240 6277 	movw	r2, #1655	; 0x677
 800c33c:	fb02 f303 	mul.w	r3, r2, r3
 800c340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    peakVcselDuration_us = (peakVcselDuration_us + 500) / 1000;
 800c344:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c348:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c34c:	4a1a      	ldr	r2, [pc, #104]	; (800c3b8 <VL53L0X_calc_sigma_estimate+0x1e0>)
 800c34e:	fba2 2303 	umull	r2, r3, r2, r3
 800c352:	099b      	lsrs	r3, r3, #6
 800c354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Fix1616 >> 8 = Fix2408 */
    totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	3380      	adds	r3, #128	; 0x80
 800c35c:	0a1b      	lsrs	r3, r3, #8
 800c35e:	613b      	str	r3, [r7, #16]

    /* Fix2408 * uint32 = Fix2408 */
    vcselTotalEventsRtn = totalSignalRate_mcps * peakVcselDuration_us;
 800c360:	693a      	ldr	r2, [r7, #16]
 800c362:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c366:	fb02 f303 	mul.w	r3, r2, r3
 800c36a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

    /* Fix2408 >> 8 = uint32 */
    vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800c36e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c372:	3380      	adds	r3, #128	; 0x80
 800c374:	0a1b      	lsrs	r3, r3, #8
 800c376:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

    /* Fix2408 << 8 = Fix1616 = */
    totalSignalRate_mcps <<= 8;
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	021b      	lsls	r3, r3, #8
 800c37e:	613b      	str	r3, [r7, #16]
  }

  if (Status != VL53L0X_ERROR_NONE) {
 800c380:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800c384:	2b00      	cmp	r3, #0
 800c386:	d002      	beq.n	800c38e <VL53L0X_calc_sigma_estimate+0x1b6>
    LOG_FUNCTION_END(Status);
    return Status;
 800c388:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800c38c:	e12a      	b.n	800c5e4 <VL53L0X_calc_sigma_estimate+0x40c>
  }

  if (peakSignalRate_kcps == 0) {
 800c38e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c390:	2b00      	cmp	r3, #0
 800c392:	d113      	bne.n	800c3bc <VL53L0X_calc_sigma_estimate+0x1e4>
    *pSigmaEstimate = cSigmaEstMax;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	4a05      	ldr	r2, [pc, #20]	; (800c3ac <VL53L0X_calc_sigma_estimate+0x1d4>)
 800c398:	601a      	str	r2, [r3, #0]
    PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	4a03      	ldr	r2, [pc, #12]	; (800c3ac <VL53L0X_calc_sigma_estimate+0x1d4>)
 800c39e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    *pDmax_mm = 0;
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	601a      	str	r2, [r3, #0]
 800c3a8:	e11a      	b.n	800c5e0 <VL53L0X_calc_sigma_estimate+0x408>
 800c3aa:	bf00      	nop
 800c3ac:	028f87ae 	.word	0x028f87ae
 800c3b0:	00666666 	.word	0x00666666
 800c3b4:	0006999a 	.word	0x0006999a
 800c3b8:	10624dd3 	.word	0x10624dd3
  } else {
    if (vcselTotalEventsRtn < 1)
 800c3bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d102      	bne.n	800c3ca <VL53L0X_calc_sigma_estimate+0x1f2>
      vcselTotalEventsRtn = 1;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
     * deltaT_ps represents the time of flight in pico secs for the
     * current range measurement, using the "TOF per mm" constant
     * (in ps).
     */

    sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800c3ca:	f44f 7348 	mov.w	r3, #800	; 0x320
 800c3ce:	647b      	str	r3, [r7, #68]	; 0x44

    /* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
    sigmaEstimateP2 = (ambientRate_kcps << 16) / peakSignalRate_kcps;
 800c3d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c3d2:	041a      	lsls	r2, r3, #16
 800c3d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800c3de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c3e2:	4a82      	ldr	r2, [pc, #520]	; (800c5ec <VL53L0X_calc_sigma_estimate+0x414>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d902      	bls.n	800c3ee <VL53L0X_calc_sigma_estimate+0x216>
      /* Clip to prevent overflow. Will ensure safe
       * max result. */
      sigmaEstimateP2 = cAmbToSignalRatioMax;
 800c3e8:	4b80      	ldr	r3, [pc, #512]	; (800c5ec <VL53L0X_calc_sigma_estimate+0x414>)
 800c3ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    }
    sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800c3ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c3f2:	f44f 7216 	mov.w	r2, #600	; 0x258
 800c3f6:	fb02 f303 	mul.w	r3, r2, r3
 800c3fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800c3fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c402:	4613      	mov	r3, r2
 800c404:	005b      	lsls	r3, r3, #1
 800c406:	4413      	add	r3, r2
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7fe fb0e 	bl	800aa2c <VL53L0X_isqrt>
 800c410:	4603      	mov	r3, r0
 800c412:	005b      	lsls	r3, r3, #1
 800c414:	643b      	str	r3, [r7, #64]	; 0x40

    /* uint32 * FixPoint1616 = FixPoint1616 */
    deltaT_ps = pRangingMeasurementData->RangeMilliMeter * cTOF_per_mm_ps;
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	891b      	ldrh	r3, [r3, #8]
 800c41a:	461a      	mov	r2, r3
 800c41c:	4b74      	ldr	r3, [pc, #464]	; (800c5f0 <VL53L0X_calc_sigma_estimate+0x418>)
 800c41e:	fb02 f303 	mul.w	r3, r2, r3
 800c422:	63fb      	str	r3, [r7, #60]	; 0x3c
     * Divide result by 1000 to convert to mcps.
     * 500 is added to ensure rounding when integer division
     * truncates.
     */
    diff1_mcps =
        (((peakSignalRate_kcps << 16) - xTalkCompRate_kcps) + 500) / 1000;
 800c424:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c426:	041a      	lsls	r2, r3, #16
 800c428:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c42c:	1ad3      	subs	r3, r2, r3
 800c42e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
    diff1_mcps =
 800c432:	4a70      	ldr	r2, [pc, #448]	; (800c5f4 <VL53L0X_calc_sigma_estimate+0x41c>)
 800c434:	fba2 2303 	umull	r2, r3, r2, r3
 800c438:	099b      	lsrs	r3, r3, #6
 800c43a:	63bb      	str	r3, [r7, #56]	; 0x38

    /* vcselRate + xtalkCompRate */
    diff2_mcps =
        (((peakSignalRate_kcps << 16) + xTalkCompRate_kcps) + 500) / 1000;
 800c43c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c43e:	041a      	lsls	r2, r3, #16
 800c440:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c444:	4413      	add	r3, r2
 800c446:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
    diff2_mcps =
 800c44a:	4a6a      	ldr	r2, [pc, #424]	; (800c5f4 <VL53L0X_calc_sigma_estimate+0x41c>)
 800c44c:	fba2 2303 	umull	r2, r3, r2, r3
 800c450:	099b      	lsrs	r3, r3, #6
 800c452:	637b      	str	r3, [r7, #52]	; 0x34

    /* Shift by 8 bits to increase resolution prior to the
     * division */
    diff1_mcps <<= 8;
 800c454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c456:	021b      	lsls	r3, r3, #8
 800c458:	63bb      	str	r3, [r7, #56]	; 0x38

    /* FixPoint0824/FixPoint1616 = FixPoint2408 */
    xTalkCorrection = (FixPoint1616_t)abs((long long)(diff1_mcps / diff2_mcps));
 800c45a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c45e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c462:	2200      	movs	r2, #0
 800c464:	461c      	mov	r4, r3
 800c466:	4615      	mov	r5, r2
 800c468:	4620      	mov	r0, r4
 800c46a:	4629      	mov	r1, r5
 800c46c:	f7fe fa87 	bl	800a97e <_ZSt3absx>
 800c470:	4602      	mov	r2, r0
 800c472:	460b      	mov	r3, r1
 800c474:	4613      	mov	r3, r2
 800c476:	633b      	str	r3, [r7, #48]	; 0x30

    /* FixPoint2408 << 8 = FixPoint1616 */
    xTalkCorrection <<= 8;
 800c478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47a:	021b      	lsls	r3, r3, #8
 800c47c:	633b      	str	r3, [r7, #48]	; 0x30

    /* FixPoint1616/uint32 = FixPoint1616 */
    pwMult = deltaT_ps / cVcselPulseWidth_ps; /* smaller than 1.0f */
 800c47e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c480:	4a5d      	ldr	r2, [pc, #372]	; (800c5f8 <VL53L0X_calc_sigma_estimate+0x420>)
 800c482:	fba2 2303 	umull	r2, r3, r2, r3
 800c486:	0a9b      	lsrs	r3, r3, #10
 800c488:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*
     * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
     * values are small enough such that32 bits will not be
     * exceeded.
     */
    pwMult *= ((1 << 16) - xTalkCorrection);
 800c48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c48c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800c490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c492:	fb02 f303 	mul.w	r3, r2, r3
 800c496:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* (FixPoint3232 >> 16) = FixPoint1616 */
    pwMult = (pwMult + c16BitRoundingParam) >> 16;
 800c498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c49a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c49e:	0c1b      	lsrs	r3, r3, #16
 800c4a0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* FixPoint1616 + FixPoint1616 = FixPoint1616 */
    pwMult += (1 << 16);
 800c4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*
     * At this point the value will be 1.xx, therefore if we square
     * the value this will exceed 32 bits. To address this perform
     * a single shift to the right before the multiplication.
     */
    pwMult >>= 1;
 800c4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ac:	085b      	lsrs	r3, r3, #1
 800c4ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* FixPoint1715 * FixPoint1715 = FixPoint3430 */
    pwMult = pwMult * pwMult;
 800c4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b2:	fb03 f303 	mul.w	r3, r3, r3
 800c4b6:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* (FixPoint3430 >> 14) = Fix1616 */
    pwMult >>= 14;
 800c4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ba:	0b9b      	lsrs	r3, r3, #14
 800c4bc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* FixPoint1616 * uint32 = FixPoint1616 */
    sqr1 = pwMult * sigmaEstimateP1;
 800c4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4c2:	fb02 f303 	mul.w	r3, r2, r3
 800c4c6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* (FixPoint1616 >> 16) = FixPoint3200 */
    sqr1 = (sqr1 + 0x8000) >> 16;
 800c4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c4ce:	0c1b      	lsrs	r3, r3, #16
 800c4d0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* FixPoint3200 * FixPoint3200 = FixPoint6400 */
    sqr1 *= sqr1;
 800c4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d4:	fb03 f303 	mul.w	r3, r3, r3
 800c4d8:	62bb      	str	r3, [r7, #40]	; 0x28

    sqr2 = sigmaEstimateP2;
 800c4da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c4de:	627b      	str	r3, [r7, #36]	; 0x24

    /* (FixPoint1616 >> 16) = FixPoint3200 */
    sqr2 = (sqr2 + 0x8000) >> 16;
 800c4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c4e6:	0c1b      	lsrs	r3, r3, #16
 800c4e8:	627b      	str	r3, [r7, #36]	; 0x24

    /* FixPoint3200 * FixPoint3200 = FixPoint6400 */
    sqr2 *= sqr2;
 800c4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ec:	fb03 f303 	mul.w	r3, r3, r3
 800c4f0:	627b      	str	r3, [r7, #36]	; 0x24

    /* FixPoint64000 + FixPoint6400 = FixPoint6400 */
    sqrSum = sqr1 + sqr2;
 800c4f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f6:	4413      	add	r3, r2
 800c4f8:	623b      	str	r3, [r7, #32]

    /* SQRT(FixPoin6400) = FixPoint3200 */
    sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800c4fa:	6a38      	ldr	r0, [r7, #32]
 800c4fc:	f7fe fa96 	bl	800aa2c <VL53L0X_isqrt>
 800c500:	61f8      	str	r0, [r7, #28]

    /* (FixPoint3200 << 16) = FixPoint1616 */
    sqrtResult_centi_ns <<= 16;
 800c502:	69fb      	ldr	r3, [r7, #28]
 800c504:	041b      	lsls	r3, r3, #16
 800c506:	61fb      	str	r3, [r7, #28]
    /*
     * Note that the Speed Of Light is expressed in um per 1E-10
     * seconds (2997) Therefore to get mm/ns we have to divide by
     * 10000
     */
    sigmaEstRtn = (((sqrtResult_centi_ns + 50) / 100) / sigmaEstimateP3);
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	3332      	adds	r3, #50	; 0x32
 800c50c:	4a3b      	ldr	r2, [pc, #236]	; (800c5fc <VL53L0X_calc_sigma_estimate+0x424>)
 800c50e:	fba2 2303 	umull	r2, r3, r2, r3
 800c512:	095a      	lsrs	r2, r3, #5
 800c514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c516:	fbb2 f3f3 	udiv	r3, r2, r3
 800c51a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    sigmaEstRtn *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800c51e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c522:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800c526:	fb02 f303 	mul.w	r3, r2, r3
 800c52a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Add 5000 before dividing by 10000 to ensure rounding. */
    sigmaEstRtn += 5000;
 800c52e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c532:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800c536:	3308      	adds	r3, #8
 800c538:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    sigmaEstRtn /= 10000;
 800c53c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c540:	4a2f      	ldr	r2, [pc, #188]	; (800c600 <VL53L0X_calc_sigma_estimate+0x428>)
 800c542:	fba2 2303 	umull	r2, r3, r2, r3
 800c546:	0b5b      	lsrs	r3, r3, #13
 800c548:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    if (sigmaEstRtn > cSigmaEstRtnMax) {
 800c54c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c550:	f5b3 4f70 	cmp.w	r3, #61440	; 0xf000
 800c554:	d903      	bls.n	800c55e <VL53L0X_calc_sigma_estimate+0x386>
      /* Clip to prevent overflow. Will ensure safe
       * max result. */
      sigmaEstRtn = cSigmaEstRtnMax;
 800c556:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800c55a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    }

    /* FixPoint1616 * FixPoint1616 = FixPoint3232 */
    sqr1 = sigmaEstRtn * sigmaEstRtn;
 800c55e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c562:	fb03 f303 	mul.w	r3, r3, r3
 800c566:	62bb      	str	r3, [r7, #40]	; 0x28
    /* FixPoint1616 * FixPoint1616 = FixPoint3232 */
    sqr2 = cSigmaEstRef * cSigmaEstRef;
 800c568:	f241 1304 	movw	r3, #4356	; 0x1104
 800c56c:	627b      	str	r3, [r7, #36]	; 0x24

    /* sqrt(FixPoint3232) = FixPoint1616 */
    sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800c56e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c572:	4413      	add	r3, r2
 800c574:	4618      	mov	r0, r3
 800c576:	f7fe fa59 	bl	800aa2c <VL53L0X_isqrt>
 800c57a:	61b8      	str	r0, [r7, #24]
     * Note that the Shift by 4 bits increases resolution prior to
     * the sqrt, therefore the result must be shifted by 2 bits to
     * the right to revert back to the FixPoint1616 format.
     */

    sigmaEstimate = 1000 * sqrtResult;
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c582:	fb02 f303 	mul.w	r3, r2, r3
 800c586:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800c58a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d008      	beq.n	800c5a2 <VL53L0X_calc_sigma_estimate+0x3ca>
 800c590:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c594:	2b00      	cmp	r3, #0
 800c596:	d004      	beq.n	800c5a2 <VL53L0X_calc_sigma_estimate+0x3ca>
 800c598:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c59c:	4a19      	ldr	r2, [pc, #100]	; (800c604 <VL53L0X_calc_sigma_estimate+0x42c>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d902      	bls.n	800c5a8 <VL53L0X_calc_sigma_estimate+0x3d0>
        (sigmaEstimate > cSigmaEstMax)) {
      sigmaEstimate = cSigmaEstMax;
 800c5a2:	4b18      	ldr	r3, [pc, #96]	; (800c604 <VL53L0X_calc_sigma_estimate+0x42c>)
 800c5a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    }

    *pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c5ae:	601a      	str	r2, [r3, #0]
    PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681a      	ldr	r2, [r3, #0]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    Status = VL53L0X_calc_dmax(
 800c5ba:	6939      	ldr	r1, [r7, #16]
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	9303      	str	r3, [sp, #12]
 800c5c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c5c4:	9302      	str	r3, [sp, #8]
 800c5c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c5ca:	9301      	str	r3, [sp, #4]
 800c5cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5ce:	9300      	str	r3, [sp, #0]
 800c5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c5d4:	68f8      	ldr	r0, [r7, #12]
 800c5d6:	f7ff fced 	bl	800bfb4 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        Dev, totalSignalRate_mcps, correctedSignalRate_mcps, pwMult,
        sigmaEstimateP1, sigmaEstimateP2, peakVcselDuration_us, pDmax_mm);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800c5e0:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	37b8      	adds	r7, #184	; 0xb8
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bdb0      	pop	{r4, r5, r7, pc}
 800c5ec:	00666666 	.word	0x00666666
 800c5f0:	0006999a 	.word	0x0006999a
 800c5f4:	10624dd3 	.word	0x10624dd3
 800c5f8:	37c67b51 	.word	0x37c67b51
 800c5fc:	51eb851f 	.word	0x51eb851f
 800c600:	d1b71759 	.word	0xd1b71759
 800c604:	028f87ae 	.word	0x028f87ae

0800c608 <VL53L0X_get_pal_range_status>:

VL53L0X_Error VL53L0X_get_pal_range_status(
    VL53L0X_DEV Dev, uint8_t DeviceRangeStatus, FixPoint1616_t SignalRate,
    uint16_t EffectiveSpadRtnCount,
    VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
    uint8_t *pPalRangeStatus) {
 800c608:	b580      	push	{r7, lr}
 800c60a:	b090      	sub	sp, #64	; 0x40
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	607a      	str	r2, [r7, #4]
 800c612:	461a      	mov	r2, r3
 800c614:	460b      	mov	r3, r1
 800c616:	72fb      	strb	r3, [r7, #11]
 800c618:	4613      	mov	r3, r2
 800c61a:	813b      	strh	r3, [r7, #8]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c61c:	2300      	movs	r3, #0
 800c61e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint8_t NoneFlag;
  uint8_t SigmaLimitflag = 0;
 800c622:	2300      	movs	r3, #0
 800c624:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  uint8_t SignalRefClipflag = 0;
 800c628:	2300      	movs	r3, #0
 800c62a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  uint8_t RangeIgnoreThresholdflag = 0;
 800c62e:	2300      	movs	r3, #0
 800c630:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  uint8_t SigmaLimitCheckEnable = 0;
 800c634:	2300      	movs	r3, #0
 800c636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800c63a:	2300      	movs	r3, #0
 800c63c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t SignalRefClipLimitCheckEnable = 0;
 800c640:	2300      	movs	r3, #0
 800c642:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800c646:	2300      	movs	r3, #0
 800c648:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  FixPoint1616_t SigmaEstimate;
  FixPoint1616_t SigmaLimitValue;
  FixPoint1616_t SignalRefClipValue;
  FixPoint1616_t RangeIgnoreThresholdValue;
  FixPoint1616_t SignalRatePerSpad;
  uint8_t DeviceRangeStatusInternal = 0;
 800c64c:	2300      	movs	r3, #0
 800c64e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  uint16_t tmpWord = 0;
 800c652:	2300      	movs	r3, #0
 800c654:	82fb      	strh	r3, [r7, #22]
  uint8_t Temp8;
  uint32_t Dmax_mm = 0;
 800c656:	2300      	movs	r3, #0
 800c658:	613b      	str	r3, [r7, #16]
   * the value 11 in the DeviceRangeStatus.
   * In addition, the SigmaEstimator is not included in the VL53L0X
   * DeviceRangeStatus, this will be added in the PalRangeStatus.
   */

  DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800c65a:	7afb      	ldrb	r3, [r7, #11]
 800c65c:	08db      	lsrs	r3, r3, #3
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	f003 030f 	and.w	r3, r3, #15
 800c664:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

  if (DeviceRangeStatusInternal == 0 || DeviceRangeStatusInternal == 5 ||
 800c668:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d017      	beq.n	800c6a0 <VL53L0X_get_pal_range_status+0x98>
 800c670:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c674:	2b05      	cmp	r3, #5
 800c676:	d013      	beq.n	800c6a0 <VL53L0X_get_pal_range_status+0x98>
 800c678:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c67c:	2b07      	cmp	r3, #7
 800c67e:	d00f      	beq.n	800c6a0 <VL53L0X_get_pal_range_status+0x98>
      DeviceRangeStatusInternal == 7 || DeviceRangeStatusInternal == 12 ||
 800c680:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c684:	2b0c      	cmp	r3, #12
 800c686:	d00b      	beq.n	800c6a0 <VL53L0X_get_pal_range_status+0x98>
 800c688:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c68c:	2b0d      	cmp	r3, #13
 800c68e:	d007      	beq.n	800c6a0 <VL53L0X_get_pal_range_status+0x98>
      DeviceRangeStatusInternal == 13 || DeviceRangeStatusInternal == 14 ||
 800c690:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c694:	2b0e      	cmp	r3, #14
 800c696:	d003      	beq.n	800c6a0 <VL53L0X_get_pal_range_status+0x98>
 800c698:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c69c:	2b0f      	cmp	r3, #15
 800c69e:	d103      	bne.n	800c6a8 <VL53L0X_get_pal_range_status+0xa0>
      DeviceRangeStatusInternal == 15) {
    NoneFlag = 1;
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800c6a6:	e002      	b.n	800c6ae <VL53L0X_get_pal_range_status+0xa6>
  } else {
    NoneFlag = 0;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  }

  /* LastSignalRefMcps */
  if (Status == VL53L0X_ERROR_NONE)
 800c6ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d107      	bne.n	800c6c6 <VL53L0X_get_pal_range_status+0xbe>
    Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	21ff      	movs	r1, #255	; 0xff
 800c6ba:	68f8      	ldr	r0, [r7, #12]
 800c6bc:	f000 fbe7 	bl	800ce8e <VL53L0X_WrByte>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (Status == VL53L0X_ERROR_NONE)
 800c6c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d109      	bne.n	800c6e2 <VL53L0X_get_pal_range_status+0xda>
    Status =
        VL53L0X_RdWord(Dev, VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF, &tmpWord);
 800c6ce:	f107 0316 	add.w	r3, r7, #22
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	21b6      	movs	r1, #182	; 0xb6
 800c6d6:	68f8      	ldr	r0, [r7, #12]
 800c6d8:	f000 fc80 	bl	800cfdc <VL53L0X_RdWord>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800c6e2:	8afb      	ldrh	r3, [r7, #22]
 800c6e4:	025b      	lsls	r3, r3, #9
 800c6e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (Status == VL53L0X_ERROR_NONE)
 800c6e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d107      	bne.n	800c700 <VL53L0X_get_pal_range_status+0xf8>
    Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	21ff      	movs	r1, #255	; 0xff
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	f000 fbca 	bl	800ce8e <VL53L0X_WrByte>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c704:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

  /*
   * Check if Sigma limit is enabled, if yes then do comparison with limit
   * value and put the result back into pPalRangeStatus.
   */
  if (Status == VL53L0X_ERROR_NONE)
 800c708:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d109      	bne.n	800c724 <VL53L0X_get_pal_range_status+0x11c>
    Status = VL53L0X_GetLimitCheckEnable(
 800c710:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800c714:	461a      	mov	r2, r3
 800c716:	2100      	movs	r1, #0
 800c718:	68f8      	ldr	r0, [r7, #12]
 800c71a:	f7fc fd21 	bl	8009160 <VL53L0X_GetLimitCheckEnable>
 800c71e:	4603      	mov	r3, r0
 800c720:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, &SigmaLimitCheckEnable);

  if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800c724:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d02e      	beq.n	800c78a <VL53L0X_get_pal_range_status+0x182>
 800c72c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c730:	2b00      	cmp	r3, #0
 800c732:	d12a      	bne.n	800c78a <VL53L0X_get_pal_range_status+0x182>
    /*
     * compute the Sigma and check with limit
     */
    Status = VL53L0X_calc_sigma_estimate(Dev, pRangingMeasurementData,
 800c734:	f107 0310 	add.w	r3, r7, #16
 800c738:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c73c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c73e:	68f8      	ldr	r0, [r7, #12]
 800c740:	f7ff fd4a 	bl	800c1d8 <VL53L0X_calc_sigma_estimate>
 800c744:	4603      	mov	r3, r0
 800c746:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                         &SigmaEstimate, &Dmax_mm);
    if (Status == VL53L0X_ERROR_NONE)
 800c74a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d103      	bne.n	800c75a <VL53L0X_get_pal_range_status+0x152>
      pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	b29a      	uxth	r2, r3
 800c756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c758:	815a      	strh	r2, [r3, #10]

    if (Status == VL53L0X_ERROR_NONE) {
 800c75a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d113      	bne.n	800c78a <VL53L0X_get_pal_range_status+0x182>
      Status = VL53L0X_GetLimitCheckValue(
 800c762:	f107 0320 	add.w	r3, r7, #32
 800c766:	461a      	mov	r2, r3
 800c768:	2100      	movs	r1, #0
 800c76a:	68f8      	ldr	r0, [r7, #12]
 800c76c:	f7fc fd7e 	bl	800926c <VL53L0X_GetLimitCheckValue>
 800c770:	4603      	mov	r3, r0
 800c772:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
          Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, &SigmaLimitValue);

      if ((SigmaLimitValue > 0) && (SigmaEstimate > SigmaLimitValue))
 800c776:	6a3b      	ldr	r3, [r7, #32]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d006      	beq.n	800c78a <VL53L0X_get_pal_range_status+0x182>
 800c77c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c77e:	6a3b      	ldr	r3, [r7, #32]
 800c780:	429a      	cmp	r2, r3
 800c782:	d902      	bls.n	800c78a <VL53L0X_get_pal_range_status+0x182>
        /* Limit Fail */
        SigmaLimitflag = 1;
 800c784:	2301      	movs	r3, #1
 800c786:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

  /*
   * Check if Signal ref clip limit is enabled, if yes then do comparison
   * with limit value and put the result back into pPalRangeStatus.
   */
  if (Status == VL53L0X_ERROR_NONE)
 800c78a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d109      	bne.n	800c7a6 <VL53L0X_get_pal_range_status+0x19e>
    Status =
        VL53L0X_GetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
 800c792:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800c796:	461a      	mov	r2, r3
 800c798:	2102      	movs	r1, #2
 800c79a:	68f8      	ldr	r0, [r7, #12]
 800c79c:	f7fc fce0 	bl	8009160 <VL53L0X_GetLimitCheckEnable>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                    &SignalRefClipLimitCheckEnable);

  if ((SignalRefClipLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800c7a6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d017      	beq.n	800c7de <VL53L0X_get_pal_range_status+0x1d6>
 800c7ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d113      	bne.n	800c7de <VL53L0X_get_pal_range_status+0x1d6>

    Status = VL53L0X_GetLimitCheckValue(
 800c7b6:	f107 031c 	add.w	r3, r7, #28
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	2102      	movs	r1, #2
 800c7be:	68f8      	ldr	r0, [r7, #12]
 800c7c0:	f7fc fd54 	bl	800926c <VL53L0X_GetLimitCheckValue>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        Dev, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, &SignalRefClipValue);

    if ((SignalRefClipValue > 0) && (LastSignalRefMcps > SignalRefClipValue)) {
 800c7ca:	69fb      	ldr	r3, [r7, #28]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d006      	beq.n	800c7de <VL53L0X_get_pal_range_status+0x1d6>
 800c7d0:	69fb      	ldr	r3, [r7, #28]
 800c7d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d902      	bls.n	800c7de <VL53L0X_get_pal_range_status+0x1d6>
      /* Limit Fail */
      SignalRefClipflag = 1;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
   * Check if Signal ref clip limit is enabled, if yes then do comparison
   * with limit value and put the result back into pPalRangeStatus.
   * EffectiveSpadRtnCount has a format 8.8
   * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
   */
  if (Status == VL53L0X_ERROR_NONE)
 800c7de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d109      	bne.n	800c7fa <VL53L0X_get_pal_range_status+0x1f2>
    Status = VL53L0X_GetLimitCheckEnable(
 800c7e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c7ea:	461a      	mov	r2, r3
 800c7ec:	2103      	movs	r1, #3
 800c7ee:	68f8      	ldr	r0, [r7, #12]
 800c7f0:	f7fc fcb6 	bl	8009160 <VL53L0X_GetLimitCheckEnable>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        Dev, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
        &RangeIgnoreThresholdLimitCheckEnable);

  if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800c7fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d023      	beq.n	800c84a <VL53L0X_get_pal_range_status+0x242>
 800c802:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c806:	2b00      	cmp	r3, #0
 800c808:	d11f      	bne.n	800c84a <VL53L0X_get_pal_range_status+0x242>
      (Status == VL53L0X_ERROR_NONE)) {

    /* Compute the signal rate per spad */
    if (EffectiveSpadRtnCount == 0) {
 800c80a:	893b      	ldrh	r3, [r7, #8]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d102      	bne.n	800c816 <VL53L0X_get_pal_range_status+0x20e>
      SignalRatePerSpad = 0;
 800c810:	2300      	movs	r3, #0
 800c812:	637b      	str	r3, [r7, #52]	; 0x34
 800c814:	e005      	b.n	800c822 <VL53L0X_get_pal_range_status+0x21a>
    } else {
      SignalRatePerSpad =
          (FixPoint1616_t)((256 * SignalRate) / EffectiveSpadRtnCount);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	021a      	lsls	r2, r3, #8
 800c81a:	893b      	ldrh	r3, [r7, #8]
      SignalRatePerSpad =
 800c81c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c820:	637b      	str	r3, [r7, #52]	; 0x34
    }

    Status = VL53L0X_GetLimitCheckValue(
 800c822:	f107 0318 	add.w	r3, r7, #24
 800c826:	461a      	mov	r2, r3
 800c828:	2103      	movs	r1, #3
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f7fc fd1e 	bl	800926c <VL53L0X_GetLimitCheckValue>
 800c830:	4603      	mov	r3, r0
 800c832:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        Dev, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
        &RangeIgnoreThresholdValue);

    if ((RangeIgnoreThresholdValue > 0) &&
 800c836:	69bb      	ldr	r3, [r7, #24]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d006      	beq.n	800c84a <VL53L0X_get_pal_range_status+0x242>
        (SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800c83c:	69bb      	ldr	r3, [r7, #24]
    if ((RangeIgnoreThresholdValue > 0) &&
 800c83e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c840:	429a      	cmp	r2, r3
 800c842:	d202      	bcs.n	800c84a <VL53L0X_get_pal_range_status+0x242>
      /* Limit Fail add 2^6 to range status */
      RangeIgnoreThresholdflag = 1;
 800c844:	2301      	movs	r3, #1
 800c846:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    }
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800c84a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d14a      	bne.n	800c8e8 <VL53L0X_get_pal_range_status+0x2e0>
    if (NoneFlag == 1) {
 800c852:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800c856:	2b01      	cmp	r3, #1
 800c858:	d103      	bne.n	800c862 <VL53L0X_get_pal_range_status+0x25a>
      *pPalRangeStatus = 255; /* NONE */
 800c85a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c85c:	22ff      	movs	r2, #255	; 0xff
 800c85e:	701a      	strb	r2, [r3, #0]
 800c860:	e042      	b.n	800c8e8 <VL53L0X_get_pal_range_status+0x2e0>
    } else if (DeviceRangeStatusInternal == 1 ||
 800c862:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c866:	2b01      	cmp	r3, #1
 800c868:	d007      	beq.n	800c87a <VL53L0X_get_pal_range_status+0x272>
 800c86a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c86e:	2b02      	cmp	r3, #2
 800c870:	d003      	beq.n	800c87a <VL53L0X_get_pal_range_status+0x272>
               DeviceRangeStatusInternal == 2 ||
 800c872:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c876:	2b03      	cmp	r3, #3
 800c878:	d103      	bne.n	800c882 <VL53L0X_get_pal_range_status+0x27a>
               DeviceRangeStatusInternal == 3) {
      *pPalRangeStatus = 5; /* HW fail */
 800c87a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c87c:	2205      	movs	r2, #5
 800c87e:	701a      	strb	r2, [r3, #0]
 800c880:	e032      	b.n	800c8e8 <VL53L0X_get_pal_range_status+0x2e0>
    } else if (DeviceRangeStatusInternal == 6 ||
 800c882:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c886:	2b06      	cmp	r3, #6
 800c888:	d003      	beq.n	800c892 <VL53L0X_get_pal_range_status+0x28a>
 800c88a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c88e:	2b09      	cmp	r3, #9
 800c890:	d103      	bne.n	800c89a <VL53L0X_get_pal_range_status+0x292>
               DeviceRangeStatusInternal == 9) {
      *pPalRangeStatus = 4; /* Phase fail */
 800c892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c894:	2204      	movs	r2, #4
 800c896:	701a      	strb	r2, [r3, #0]
 800c898:	e026      	b.n	800c8e8 <VL53L0X_get_pal_range_status+0x2e0>
    } else if (DeviceRangeStatusInternal == 8 ||
 800c89a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c89e:	2b08      	cmp	r3, #8
 800c8a0:	d007      	beq.n	800c8b2 <VL53L0X_get_pal_range_status+0x2aa>
 800c8a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c8a6:	2b0a      	cmp	r3, #10
 800c8a8:	d003      	beq.n	800c8b2 <VL53L0X_get_pal_range_status+0x2aa>
               DeviceRangeStatusInternal == 10 || SignalRefClipflag == 1) {
 800c8aa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d103      	bne.n	800c8ba <VL53L0X_get_pal_range_status+0x2b2>
      *pPalRangeStatus = 3; /* Min range */
 800c8b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8b4:	2203      	movs	r2, #3
 800c8b6:	701a      	strb	r2, [r3, #0]
 800c8b8:	e016      	b.n	800c8e8 <VL53L0X_get_pal_range_status+0x2e0>
    } else if (DeviceRangeStatusInternal == 4 ||
 800c8ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c8be:	2b04      	cmp	r3, #4
 800c8c0:	d003      	beq.n	800c8ca <VL53L0X_get_pal_range_status+0x2c2>
 800c8c2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d103      	bne.n	800c8d2 <VL53L0X_get_pal_range_status+0x2ca>
               RangeIgnoreThresholdflag == 1) {
      *pPalRangeStatus = 2; /* Signal Fail */
 800c8ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8cc:	2202      	movs	r2, #2
 800c8ce:	701a      	strb	r2, [r3, #0]
 800c8d0:	e00a      	b.n	800c8e8 <VL53L0X_get_pal_range_status+0x2e0>
    } else if (SigmaLimitflag == 1) {
 800c8d2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d103      	bne.n	800c8e2 <VL53L0X_get_pal_range_status+0x2da>
      *pPalRangeStatus = 1; /* Sigma	 Fail */
 800c8da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8dc:	2201      	movs	r2, #1
 800c8de:	701a      	strb	r2, [r3, #0]
 800c8e0:	e002      	b.n	800c8e8 <VL53L0X_get_pal_range_status+0x2e0>
    } else {
      *pPalRangeStatus = 0; /* Range Valid */
 800c8e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	701a      	strb	r2, [r3, #0]
    }
  }

  /* DMAX only relevant during range error */
  if (*pPalRangeStatus == 0)
 800c8e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d102      	bne.n	800c8f6 <VL53L0X_get_pal_range_status+0x2ee>
    pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800c8f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	815a      	strh	r2, [r3, #10]

  /* fill the Limit Check Status */

  Status = VL53L0X_GetLimitCheckEnable(
 800c8f6:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	2101      	movs	r1, #1
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	f7fc fc2e 	bl	8009160 <VL53L0X_GetLimitCheckEnable>
 800c904:	4603      	mov	r3, r0
 800c906:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
      &SignalRateFinalRangeLimitCheckEnable);

  if (Status == VL53L0X_ERROR_NONE) {
 800c90a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d14f      	bne.n	800c9b2 <VL53L0X_get_pal_range_status+0x3aa>
    if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800c912:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c916:	2b00      	cmp	r3, #0
 800c918:	d003      	beq.n	800c922 <VL53L0X_get_pal_range_status+0x31a>
 800c91a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d103      	bne.n	800c92a <VL53L0X_get_pal_range_status+0x322>
      Temp8 = 1;
 800c922:	2301      	movs	r3, #1
 800c924:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c928:	e002      	b.n	800c930 <VL53L0X_get_pal_range_status+0x328>
    else
      Temp8 = 0;
 800c92a:	2300      	movs	r3, #0
 800c92c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    VL53L0X_SETARRAYPARAMETERFIELD(
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c936:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        Dev, LimitChecksStatus, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

    if ((DeviceRangeStatusInternal == 4) ||
 800c93a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c93e:	2b04      	cmp	r3, #4
 800c940:	d003      	beq.n	800c94a <VL53L0X_get_pal_range_status+0x342>
        (SignalRateFinalRangeLimitCheckEnable == 0))
 800c942:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    if ((DeviceRangeStatusInternal == 4) ||
 800c946:	2b00      	cmp	r3, #0
 800c948:	d103      	bne.n	800c952 <VL53L0X_get_pal_range_status+0x34a>
      Temp8 = 1;
 800c94a:	2301      	movs	r3, #1
 800c94c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c950:	e002      	b.n	800c958 <VL53L0X_get_pal_range_status+0x350>
    else
      Temp8 = 0;
 800c952:	2300      	movs	r3, #0
 800c954:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c95e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                   VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
                                   Temp8);

    if ((SignalRefClipLimitCheckEnable == 0) || (SignalRefClipflag == 1))
 800c962:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800c966:	2b00      	cmp	r3, #0
 800c968:	d003      	beq.n	800c972 <VL53L0X_get_pal_range_status+0x36a>
 800c96a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d103      	bne.n	800c97a <VL53L0X_get_pal_range_status+0x372>
      Temp8 = 1;
 800c972:	2301      	movs	r3, #1
 800c974:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c978:	e002      	b.n	800c980 <VL53L0X_get_pal_range_status+0x378>
    else
      Temp8 = 0;
 800c97a:	2300      	movs	r3, #0
 800c97c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c986:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                                   VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

    if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800c98a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d003      	beq.n	800c99a <VL53L0X_get_pal_range_status+0x392>
 800c992:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c996:	2b01      	cmp	r3, #1
 800c998:	d103      	bne.n	800c9a2 <VL53L0X_get_pal_range_status+0x39a>
        (RangeIgnoreThresholdflag == 1))
      Temp8 = 1;
 800c99a:	2301      	movs	r3, #1
 800c99c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9a0:	e002      	b.n	800c9a8 <VL53L0X_get_pal_range_status+0x3a0>
    else
      Temp8 = 0;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c9ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                                   VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
                                   Temp8);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800c9b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3740      	adds	r7, #64	; 0x40
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}

0800c9be <_Z23VL53L0X_check_part_usedP13VL53L0X_Dev_tPhP20VL53L0X_DeviceInfo_t>:
#define LOG_FUNCTION_END_FMT(status, fmt, ...)                                 \
  _LOG_FUNCTION_END_FMT(TRACE_MODULE_API, status, fmt, ##__VA_ARGS__)

VL53L0X_Error
VL53L0X_check_part_used(VL53L0X_DEV Dev, uint8_t *Revision,
                        VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo) {
 800c9be:	b580      	push	{r7, lr}
 800c9c0:	b086      	sub	sp, #24
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	60f8      	str	r0, [r7, #12]
 800c9c6:	60b9      	str	r1, [r7, #8]
 800c9c8:	607a      	str	r2, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	75fb      	strb	r3, [r7, #23]
  uint8_t ModuleIdInt;
  char *ProductId_tmp;

  LOG_FUNCTION_START("");

  Status = VL53L0X_get_info_from_device(Dev, 2);
 800c9ce:	2102      	movs	r1, #2
 800c9d0:	68f8      	ldr	r0, [r7, #12]
 800c9d2:	f7fe f8a1 	bl	800ab18 <VL53L0X_get_info_from_device>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	75fb      	strb	r3, [r7, #23]

  if (Status == VL53L0X_ERROR_NONE) {
 800c9da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d11c      	bne.n	800ca1c <_Z23VL53L0X_check_part_usedP13VL53L0X_Dev_tPhP20VL53L0X_DeviceInfo_t+0x5e>
    ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 800c9e8:	75bb      	strb	r3, [r7, #22]

    if (ModuleIdInt == 0) {
 800c9ea:	7dbb      	ldrb	r3, [r7, #22]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d107      	bne.n	800ca00 <_Z23VL53L0X_check_part_usedP13VL53L0X_Dev_tPhP20VL53L0X_DeviceInfo_t+0x42>
      *Revision = 0;
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	701a      	strb	r2, [r3, #0]
      VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	3340      	adds	r3, #64	; 0x40
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	701a      	strb	r2, [r3, #0]
 800c9fe:	e00d      	b.n	800ca1c <_Z23VL53L0X_check_part_usedP13VL53L0X_Dev_tPhP20VL53L0X_DeviceInfo_t+0x5e>
    } else {
      *Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	701a      	strb	r2, [r3, #0]
      ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ProductId);
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	33f3      	adds	r3, #243	; 0xf3
 800ca0e:	613b      	str	r3, [r7, #16]
      VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	3340      	adds	r3, #64	; 0x40
 800ca14:	6939      	ldr	r1, [r7, #16]
 800ca16:	4618      	mov	r0, r3
 800ca18:	f001 fa20 	bl	800de5c <strcpy>
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800ca1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3718      	adds	r7, #24
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <VL53L0X_get_device_info>:

VL53L0X_Error
VL53L0X_get_device_info(VL53L0X_DEV Dev,
                        VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo) {
 800ca28:	b5b0      	push	{r4, r5, r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ca32:	2300      	movs	r3, #0
 800ca34:	73fb      	strb	r3, [r7, #15]
  uint8_t revision_id;
  uint8_t Revision;

  Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 800ca36:	f107 030d 	add.w	r3, r7, #13
 800ca3a:	683a      	ldr	r2, [r7, #0]
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f7ff ffbd 	bl	800c9be <_Z23VL53L0X_check_part_usedP13VL53L0X_Dev_tPhP20VL53L0X_DeviceInfo_t>
 800ca44:	4603      	mov	r3, r0
 800ca46:	73fb      	strb	r3, [r7, #15]
  if (Status == VL53L0X_ERROR_NONE) {
 800ca48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d13b      	bne.n	800cac8 <VL53L0X_get_device_info+0xa0>
    if (Revision == 0) {
 800ca50:	7b7b      	ldrb	r3, [r7, #13]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d108      	bne.n	800ca68 <VL53L0X_get_device_info+0x40>
      VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	4a30      	ldr	r2, [pc, #192]	; (800cb1c <VL53L0X_get_device_info+0xf4>)
 800ca5a:	461c      	mov	r4, r3
 800ca5c:	4613      	mov	r3, r2
 800ca5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ca60:	6020      	str	r0, [r4, #0]
 800ca62:	6061      	str	r1, [r4, #4]
 800ca64:	60a2      	str	r2, [r4, #8]
 800ca66:	e027      	b.n	800cab8 <VL53L0X_get_device_info+0x90>
                         VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
    } else if ((Revision <= 34) && (Revision != 32)) {
 800ca68:	7b7b      	ldrb	r3, [r7, #13]
 800ca6a:	2b22      	cmp	r3, #34	; 0x22
 800ca6c:	d80b      	bhi.n	800ca86 <VL53L0X_get_device_info+0x5e>
 800ca6e:	7b7b      	ldrb	r3, [r7, #13]
 800ca70:	2b20      	cmp	r3, #32
 800ca72:	d008      	beq.n	800ca86 <VL53L0X_get_device_info+0x5e>
      VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	4a2a      	ldr	r2, [pc, #168]	; (800cb20 <VL53L0X_get_device_info+0xf8>)
 800ca78:	461c      	mov	r4, r3
 800ca7a:	4613      	mov	r3, r2
 800ca7c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ca7e:	6020      	str	r0, [r4, #0]
 800ca80:	6061      	str	r1, [r4, #4]
 800ca82:	60a2      	str	r2, [r4, #8]
 800ca84:	e018      	b.n	800cab8 <VL53L0X_get_device_info+0x90>
                         VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
    } else if (Revision < 39) {
 800ca86:	7b7b      	ldrb	r3, [r7, #13]
 800ca88:	2b26      	cmp	r3, #38	; 0x26
 800ca8a:	d808      	bhi.n	800ca9e <VL53L0X_get_device_info+0x76>
      VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	4a25      	ldr	r2, [pc, #148]	; (800cb24 <VL53L0X_get_device_info+0xfc>)
 800ca90:	461c      	mov	r4, r3
 800ca92:	4613      	mov	r3, r2
 800ca94:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ca96:	6020      	str	r0, [r4, #0]
 800ca98:	6061      	str	r1, [r4, #4]
 800ca9a:	60a2      	str	r2, [r4, #8]
 800ca9c:	e00c      	b.n	800cab8 <VL53L0X_get_device_info+0x90>
                         VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
    } else {
      VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	4a21      	ldr	r2, [pc, #132]	; (800cb28 <VL53L0X_get_device_info+0x100>)
 800caa2:	461d      	mov	r5, r3
 800caa4:	4614      	mov	r4, r2
 800caa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800caa8:	6028      	str	r0, [r5, #0]
 800caaa:	6069      	str	r1, [r5, #4]
 800caac:	60aa      	str	r2, [r5, #8]
 800caae:	60eb      	str	r3, [r5, #12]
 800cab0:	6820      	ldr	r0, [r4, #0]
 800cab2:	6128      	str	r0, [r5, #16]
 800cab4:	7923      	ldrb	r3, [r4, #4]
 800cab6:	752b      	strb	r3, [r5, #20]
                         VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
    }

    VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	3320      	adds	r3, #32
 800cabc:	491b      	ldr	r1, [pc, #108]	; (800cb2c <VL53L0X_get_device_info+0x104>)
 800cabe:	461a      	mov	r2, r3
 800cac0:	460b      	mov	r3, r1
 800cac2:	cb03      	ldmia	r3!, {r0, r1}
 800cac4:	6010      	str	r0, [r2, #0]
 800cac6:	6051      	str	r1, [r2, #4]
                       VL53L0X_STRING_DEVICE_INFO_TYPE);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800cac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d108      	bne.n	800cae2 <VL53L0X_get_device_info+0xba>
    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	3360      	adds	r3, #96	; 0x60
 800cad4:	461a      	mov	r2, r3
 800cad6:	21c0      	movs	r1, #192	; 0xc0
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 fa5e 	bl	800cf9a <VL53L0X_RdByte>
 800cade:	4603      	mov	r3, r0
 800cae0:	73fb      	strb	r3, [r7, #15]
                            &pVL53L0X_DeviceInfo->ProductType);
  }
  if (Status == VL53L0X_ERROR_NONE) {
 800cae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d112      	bne.n	800cb10 <VL53L0X_get_device_info+0xe8>
    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_REVISION_ID,
 800caea:	f107 030e 	add.w	r3, r7, #14
 800caee:	461a      	mov	r2, r3
 800caf0:	21c2      	movs	r1, #194	; 0xc2
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f000 fa51 	bl	800cf9a <VL53L0X_RdByte>
 800caf8:	4603      	mov	r3, r0
 800cafa:	73fb      	strb	r3, [r7, #15]
                            &revision_id);
    pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	2201      	movs	r2, #1
 800cb00:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    pVL53L0X_DeviceInfo->ProductRevisionMinor = (revision_id & 0xF0) >> 4;
 800cb04:	7bbb      	ldrb	r3, [r7, #14]
 800cb06:	091b      	lsrs	r3, r3, #4
 800cb08:	b2da      	uxtb	r2, r3
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  return Status;
 800cb10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3710      	adds	r7, #16
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bdb0      	pop	{r4, r5, r7, pc}
 800cb1c:	08011ad8 	.word	0x08011ad8
 800cb20:	08011ae4 	.word	0x08011ae4
 800cb24:	08011af0 	.word	0x08011af0
 800cb28:	08011afc 	.word	0x08011afc
 800cb2c:	08011b14 	.word	0x08011b14

0800cb30 <_Z19VL53L0X_write_multihhPhmP17I2C_HandleTypeDef>:

#define MY_I2C_TIMEOUT HAL_MAX_DELAY // probably change delay

int VL53L0X_write_multi(uint8_t deviceAddress, uint8_t index, uint8_t *pdata,
                        uint32_t count, I2C_HandleTypeDef *i2c)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b098      	sub	sp, #96	; 0x60
 800cb34:	af02      	add	r7, sp, #8
 800cb36:	60ba      	str	r2, [r7, #8]
 800cb38:	607b      	str	r3, [r7, #4]
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	73fb      	strb	r3, [r7, #15]
 800cb3e:	460b      	mov	r3, r1
 800cb40:	73bb      	strb	r3, [r7, #14]
	uint8_t buff[65]; // 1 more than VL53L0X_MAX_I2C_XFER_SIZE for address
	buff[0] = index; // write peripheral address first
 800cb42:	7bbb      	ldrb	r3, [r7, #14]
 800cb44:	753b      	strb	r3, [r7, #20]
	memcpy(buff + 1, pdata, count); // copy rest of data
 800cb46:	f107 0314 	add.w	r3, r7, #20
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	687a      	ldr	r2, [r7, #4]
 800cb4e:	68b9      	ldr	r1, [r7, #8]
 800cb50:	4618      	mov	r0, r3
 800cb52:	f000 facd 	bl	800d0f0 <memcpy>
	return HAL_I2C_Master_Transmit(i2c, deviceAddress, buff, count + 1, HAL_MAX_DELAY);
 800cb56:	7bfb      	ldrb	r3, [r7, #15]
 800cb58:	b299      	uxth	r1, r3
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	b29b      	uxth	r3, r3
 800cb5e:	3301      	adds	r3, #1
 800cb60:	b29b      	uxth	r3, r3
 800cb62:	f107 0214 	add.w	r2, r7, #20
 800cb66:	f04f 30ff 	mov.w	r0, #4294967295
 800cb6a:	9000      	str	r0, [sp, #0]
 800cb6c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800cb6e:	f7f7 f9a5 	bl	8003ebc <HAL_I2C_Master_Transmit>
 800cb72:	4603      	mov	r3, r0
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3758      	adds	r7, #88	; 0x58
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <_Z18VL53L0X_read_multihhPhmP17I2C_HandleTypeDef>:

int VL53L0X_read_multi(uint8_t deviceAddress, uint8_t index, uint8_t *pdata,
                       uint32_t count, I2C_HandleTypeDef *i2c)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b088      	sub	sp, #32
 800cb80:	af02      	add	r7, sp, #8
 800cb82:	60ba      	str	r2, [r7, #8]
 800cb84:	607b      	str	r3, [r7, #4]
 800cb86:	4603      	mov	r3, r0
 800cb88:	73fb      	strb	r3, [r7, #15]
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	73bb      	strb	r3, [r7, #14]
	int32_t status;
	// write index to read from to peripheral
	status = HAL_I2C_Master_Transmit(i2c, deviceAddress, &index, 1, MY_I2C_TIMEOUT);
 800cb8e:	7bfb      	ldrb	r3, [r7, #15]
 800cb90:	b299      	uxth	r1, r3
 800cb92:	f107 020e 	add.w	r2, r7, #14
 800cb96:	f04f 33ff 	mov.w	r3, #4294967295
 800cb9a:	9300      	str	r3, [sp, #0]
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	6a38      	ldr	r0, [r7, #32]
 800cba0:	f7f7 f98c 	bl	8003ebc <HAL_I2C_Master_Transmit>
 800cba4:	4603      	mov	r3, r0
 800cba6:	617b      	str	r3, [r7, #20]
	if (status != HAL_OK) {
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d001      	beq.n	800cbb2 <_Z18VL53L0X_read_multihhPhmP17I2C_HandleTypeDef+0x36>
		return status;
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	e010      	b.n	800cbd4 <_Z18VL53L0X_read_multihhPhmP17I2C_HandleTypeDef+0x58>
	}
	else
	{
		// send device address with read bit set, then receive data
		status = HAL_I2C_Master_Receive(i2c, deviceAddress | 1, pdata, count, MY_I2C_TIMEOUT);
 800cbb2:	7bfb      	ldrb	r3, [r7, #15]
 800cbb4:	f043 0301 	orr.w	r3, r3, #1
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	b299      	uxth	r1, r3
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	f04f 32ff 	mov.w	r2, #4294967295
 800cbc4:	9200      	str	r2, [sp, #0]
 800cbc6:	68ba      	ldr	r2, [r7, #8]
 800cbc8:	6a38      	ldr	r0, [r7, #32]
 800cbca:	f7f7 fa75 	bl	80040b8 <HAL_I2C_Master_Receive>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	617b      	str	r3, [r7, #20]
		return status;
 800cbd2:	697b      	ldr	r3, [r7, #20]
	}
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3718      	adds	r7, #24
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <_Z18VL53L0X_write_bytehhhP17I2C_HandleTypeDef>:

int VL53L0X_write_byte(uint8_t deviceAddress, uint8_t index, uint8_t data,
					   I2C_HandleTypeDef *i2c)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b086      	sub	sp, #24
 800cbe0:	af02      	add	r7, sp, #8
 800cbe2:	603b      	str	r3, [r7, #0]
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	71fb      	strb	r3, [r7, #7]
 800cbe8:	460b      	mov	r3, r1
 800cbea:	71bb      	strb	r3, [r7, #6]
 800cbec:	4613      	mov	r3, r2
 800cbee:	717b      	strb	r3, [r7, #5]
	uint8_t buff[2];
	buff[0] = index;
 800cbf0:	79bb      	ldrb	r3, [r7, #6]
 800cbf2:	733b      	strb	r3, [r7, #12]
	buff[1] = data;
 800cbf4:	797b      	ldrb	r3, [r7, #5]
 800cbf6:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(i2c, deviceAddress, buff, 2, MY_I2C_TIMEOUT);
 800cbf8:	79fb      	ldrb	r3, [r7, #7]
 800cbfa:	b299      	uxth	r1, r3
 800cbfc:	f107 020c 	add.w	r2, r7, #12
 800cc00:	f04f 33ff 	mov.w	r3, #4294967295
 800cc04:	9300      	str	r3, [sp, #0]
 800cc06:	2302      	movs	r3, #2
 800cc08:	6838      	ldr	r0, [r7, #0]
 800cc0a:	f7f7 f957 	bl	8003ebc <HAL_I2C_Master_Transmit>
 800cc0e:	4603      	mov	r3, r0
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3710      	adds	r7, #16
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <_Z18VL53L0X_write_wordhhtP17I2C_HandleTypeDef>:

int VL53L0X_write_word(uint8_t deviceAddress, uint8_t index, uint16_t data,
		               I2C_HandleTypeDef *i2c) {
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b086      	sub	sp, #24
 800cc1c:	af02      	add	r7, sp, #8
 800cc1e:	603b      	str	r3, [r7, #0]
 800cc20:	4603      	mov	r3, r0
 800cc22:	71fb      	strb	r3, [r7, #7]
 800cc24:	460b      	mov	r3, r1
 800cc26:	71bb      	strb	r3, [r7, #6]
 800cc28:	4613      	mov	r3, r2
 800cc2a:	80bb      	strh	r3, [r7, #4]
	uint8_t buff[3];
	buff[0] = index;
 800cc2c:	79bb      	ldrb	r3, [r7, #6]
 800cc2e:	733b      	strb	r3, [r7, #12]
	buff[1] = (data & 0xFF00) >> 8;
 800cc30:	88bb      	ldrh	r3, [r7, #4]
 800cc32:	0a1b      	lsrs	r3, r3, #8
 800cc34:	b29b      	uxth	r3, r3
 800cc36:	b2db      	uxtb	r3, r3
 800cc38:	737b      	strb	r3, [r7, #13]
	buff[2] = (data & 0x00FF);
 800cc3a:	88bb      	ldrh	r3, [r7, #4]
 800cc3c:	b2db      	uxtb	r3, r3
 800cc3e:	73bb      	strb	r3, [r7, #14]
	return HAL_I2C_Master_Transmit(i2c, deviceAddress, buff, 3, MY_I2C_TIMEOUT);
 800cc40:	79fb      	ldrb	r3, [r7, #7]
 800cc42:	b299      	uxth	r1, r3
 800cc44:	f107 020c 	add.w	r2, r7, #12
 800cc48:	f04f 33ff 	mov.w	r3, #4294967295
 800cc4c:	9300      	str	r3, [sp, #0]
 800cc4e:	2303      	movs	r3, #3
 800cc50:	6838      	ldr	r0, [r7, #0]
 800cc52:	f7f7 f933 	bl	8003ebc <HAL_I2C_Master_Transmit>
 800cc56:	4603      	mov	r3, r0
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3710      	adds	r7, #16
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <_Z17VL53L0X_read_bytehhPhP17I2C_HandleTypeDef>:

	return HAL_I2C_Master_Transmit(i2c, deviceAddress, buff, 5, MY_I2C_TIMEOUT);
}

int VL53L0X_read_byte(uint8_t deviceAddress, uint8_t index, uint8_t *data,
					  I2C_HandleTypeDef *i2c) {
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b088      	sub	sp, #32
 800cc64:	af02      	add	r7, sp, #8
 800cc66:	60ba      	str	r2, [r7, #8]
 800cc68:	607b      	str	r3, [r7, #4]
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	73fb      	strb	r3, [r7, #15]
 800cc6e:	460b      	mov	r3, r1
 800cc70:	73bb      	strb	r3, [r7, #14]
	int32_t status;
	// write index to read from to peripheral
	status = HAL_I2C_Master_Transmit(i2c, deviceAddress, &index, 1, MY_I2C_TIMEOUT);
 800cc72:	7bfb      	ldrb	r3, [r7, #15]
 800cc74:	b299      	uxth	r1, r3
 800cc76:	f107 020e 	add.w	r2, r7, #14
 800cc7a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc7e:	9300      	str	r3, [sp, #0]
 800cc80:	2301      	movs	r3, #1
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f7f7 f91a 	bl	8003ebc <HAL_I2C_Master_Transmit>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	617b      	str	r3, [r7, #20]
	if (status != HAL_OK) {
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d001      	beq.n	800cc96 <_Z17VL53L0X_read_bytehhPhP17I2C_HandleTypeDef+0x36>
		return status;
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	e00f      	b.n	800ccb6 <_Z17VL53L0X_read_bytehhPhP17I2C_HandleTypeDef+0x56>
	}
	else
	{
		// send device address with read bit set, then receive data
		status = HAL_I2C_Master_Receive(i2c, deviceAddress | 1, data, 1, MY_I2C_TIMEOUT);
 800cc96:	7bfb      	ldrb	r3, [r7, #15]
 800cc98:	f043 0301 	orr.w	r3, r3, #1
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	b299      	uxth	r1, r3
 800cca0:	f04f 33ff 	mov.w	r3, #4294967295
 800cca4:	9300      	str	r3, [sp, #0]
 800cca6:	2301      	movs	r3, #1
 800cca8:	68ba      	ldr	r2, [r7, #8]
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f7f7 fa04 	bl	80040b8 <HAL_I2C_Master_Receive>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	617b      	str	r3, [r7, #20]
		return status;
 800ccb4:	697b      	ldr	r3, [r7, #20]
	}
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3718      	adds	r7, #24
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}

0800ccbe <_Z17VL53L0X_read_wordhhPtP17I2C_HandleTypeDef>:

int VL53L0X_read_word(uint8_t deviceAddress, uint8_t index, uint16_t *data,
					  I2C_HandleTypeDef *i2c) {
 800ccbe:	b580      	push	{r7, lr}
 800ccc0:	b088      	sub	sp, #32
 800ccc2:	af02      	add	r7, sp, #8
 800ccc4:	60ba      	str	r2, [r7, #8]
 800ccc6:	607b      	str	r3, [r7, #4]
 800ccc8:	4603      	mov	r3, r0
 800ccca:	73fb      	strb	r3, [r7, #15]
 800cccc:	460b      	mov	r3, r1
 800ccce:	73bb      	strb	r3, [r7, #14]
	uint16_t word;
	uint8_t buff[2];
	int32_t status;
	// write index to read from to peripheral
	status = HAL_I2C_Master_Transmit(i2c, deviceAddress, &index, 1, MY_I2C_TIMEOUT);
 800ccd0:	7bfb      	ldrb	r3, [r7, #15]
 800ccd2:	b299      	uxth	r1, r3
 800ccd4:	f107 020e 	add.w	r2, r7, #14
 800ccd8:	f04f 33ff 	mov.w	r3, #4294967295
 800ccdc:	9300      	str	r3, [sp, #0]
 800ccde:	2301      	movs	r3, #1
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f7f7 f8eb 	bl	8003ebc <HAL_I2C_Master_Transmit>
 800cce6:	4603      	mov	r3, r0
 800cce8:	617b      	str	r3, [r7, #20]
	if (status != HAL_OK) {
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d001      	beq.n	800ccf4 <_Z17VL53L0X_read_wordhhPtP17I2C_HandleTypeDef+0x36>
		return status;
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	e022      	b.n	800cd3a <_Z17VL53L0X_read_wordhhPtP17I2C_HandleTypeDef+0x7c>
	}
	// send device address with read bit set, then receive data
	status = HAL_I2C_Master_Receive(i2c, deviceAddress | 1, buff, 2, MY_I2C_TIMEOUT);
 800ccf4:	7bfb      	ldrb	r3, [r7, #15]
 800ccf6:	f043 0301 	orr.w	r3, r3, #1
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	b299      	uxth	r1, r3
 800ccfe:	f107 0210 	add.w	r2, r7, #16
 800cd02:	f04f 33ff 	mov.w	r3, #4294967295
 800cd06:	9300      	str	r3, [sp, #0]
 800cd08:	2302      	movs	r3, #2
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f7f7 f9d4 	bl	80040b8 <HAL_I2C_Master_Receive>
 800cd10:	4603      	mov	r3, r0
 800cd12:	617b      	str	r3, [r7, #20]
	if (status != HAL_OK) {
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d001      	beq.n	800cd1e <_Z17VL53L0X_read_wordhhPtP17I2C_HandleTypeDef+0x60>
		return status;
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	e00d      	b.n	800cd3a <_Z17VL53L0X_read_wordhhPtP17I2C_HandleTypeDef+0x7c>
	}
	word = buff[0];
 800cd1e:	7c3b      	ldrb	r3, [r7, #16]
 800cd20:	827b      	strh	r3, [r7, #18]
	word <<= 8;
 800cd22:	8a7b      	ldrh	r3, [r7, #18]
 800cd24:	021b      	lsls	r3, r3, #8
 800cd26:	827b      	strh	r3, [r7, #18]
	word |= buff[1];
 800cd28:	7c7b      	ldrb	r3, [r7, #17]
 800cd2a:	b29a      	uxth	r2, r3
 800cd2c:	8a7b      	ldrh	r3, [r7, #18]
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	827b      	strh	r3, [r7, #18]
	*data = word;
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	8a7a      	ldrh	r2, [r7, #18]
 800cd36:	801a      	strh	r2, [r3, #0]
	return status;
 800cd38:	697b      	ldr	r3, [r7, #20]
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3718      	adds	r7, #24
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}

0800cd42 <_Z18VL53L0X_read_dwordhhPmP17I2C_HandleTypeDef>:

int VL53L0X_read_dword(uint8_t deviceAddress, uint8_t index, uint32_t *data,
					   I2C_HandleTypeDef *i2c) {
 800cd42:	b580      	push	{r7, lr}
 800cd44:	b08a      	sub	sp, #40	; 0x28
 800cd46:	af02      	add	r7, sp, #8
 800cd48:	60ba      	str	r2, [r7, #8]
 800cd4a:	607b      	str	r3, [r7, #4]
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	73fb      	strb	r3, [r7, #15]
 800cd50:	460b      	mov	r3, r1
 800cd52:	73bb      	strb	r3, [r7, #14]
	uint32_t dword;
	uint8_t buff[4];
	int32_t status;
	// write index to read from to peripheral
	status = HAL_I2C_Master_Transmit(i2c, deviceAddress, &index, 1, MY_I2C_TIMEOUT);
 800cd54:	7bfb      	ldrb	r3, [r7, #15]
 800cd56:	b299      	uxth	r1, r3
 800cd58:	f107 020e 	add.w	r2, r7, #14
 800cd5c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd60:	9300      	str	r3, [sp, #0]
 800cd62:	2301      	movs	r3, #1
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f7f7 f8a9 	bl	8003ebc <HAL_I2C_Master_Transmit>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	61fb      	str	r3, [r7, #28]
	if (status != HAL_OK) {
 800cd6e:	69fb      	ldr	r3, [r7, #28]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d001      	beq.n	800cd78 <_Z18VL53L0X_read_dwordhhPmP17I2C_HandleTypeDef+0x36>
		return status;
 800cd74:	69fb      	ldr	r3, [r7, #28]
 800cd76:	e032      	b.n	800cdde <_Z18VL53L0X_read_dwordhhPmP17I2C_HandleTypeDef+0x9c>
	}
	// send device address with read bit set, then receive data
	status = HAL_I2C_Master_Receive(i2c, deviceAddress | 1, buff, 2, MY_I2C_TIMEOUT);
 800cd78:	7bfb      	ldrb	r3, [r7, #15]
 800cd7a:	f043 0301 	orr.w	r3, r3, #1
 800cd7e:	b2db      	uxtb	r3, r3
 800cd80:	b299      	uxth	r1, r3
 800cd82:	f107 0214 	add.w	r2, r7, #20
 800cd86:	f04f 33ff 	mov.w	r3, #4294967295
 800cd8a:	9300      	str	r3, [sp, #0]
 800cd8c:	2302      	movs	r3, #2
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f7f7 f992 	bl	80040b8 <HAL_I2C_Master_Receive>
 800cd94:	4603      	mov	r3, r0
 800cd96:	61fb      	str	r3, [r7, #28]
	if (status != HAL_OK) {
 800cd98:	69fb      	ldr	r3, [r7, #28]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d001      	beq.n	800cda2 <_Z18VL53L0X_read_dwordhhPmP17I2C_HandleTypeDef+0x60>
		return status;
 800cd9e:	69fb      	ldr	r3, [r7, #28]
 800cda0:	e01d      	b.n	800cdde <_Z18VL53L0X_read_dwordhhPmP17I2C_HandleTypeDef+0x9c>
	}
	dword = buff[0];
 800cda2:	7d3b      	ldrb	r3, [r7, #20]
 800cda4:	61bb      	str	r3, [r7, #24]
	dword <<= 8;
 800cda6:	69bb      	ldr	r3, [r7, #24]
 800cda8:	021b      	lsls	r3, r3, #8
 800cdaa:	61bb      	str	r3, [r7, #24]
	dword |= buff[1];
 800cdac:	7d7b      	ldrb	r3, [r7, #21]
 800cdae:	461a      	mov	r2, r3
 800cdb0:	69bb      	ldr	r3, [r7, #24]
 800cdb2:	4313      	orrs	r3, r2
 800cdb4:	61bb      	str	r3, [r7, #24]
	dword <<= 8;
 800cdb6:	69bb      	ldr	r3, [r7, #24]
 800cdb8:	021b      	lsls	r3, r3, #8
 800cdba:	61bb      	str	r3, [r7, #24]
	dword |= buff[2];
 800cdbc:	7dbb      	ldrb	r3, [r7, #22]
 800cdbe:	461a      	mov	r2, r3
 800cdc0:	69bb      	ldr	r3, [r7, #24]
 800cdc2:	4313      	orrs	r3, r2
 800cdc4:	61bb      	str	r3, [r7, #24]
	dword <<= 8;
 800cdc6:	69bb      	ldr	r3, [r7, #24]
 800cdc8:	021b      	lsls	r3, r3, #8
 800cdca:	61bb      	str	r3, [r7, #24]
	dword |= buff[3];
 800cdcc:	7dfb      	ldrb	r3, [r7, #23]
 800cdce:	461a      	mov	r2, r3
 800cdd0:	69bb      	ldr	r3, [r7, #24]
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	61bb      	str	r3, [r7, #24]
	*data = dword;
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	69ba      	ldr	r2, [r7, #24]
 800cdda:	601a      	str	r2, [r3, #0]
	return status;
 800cddc:	69fb      	ldr	r3, [r7, #28]
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3720      	adds	r7, #32
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}

0800cde6 <VL53L0X_WriteMulti>:
  return Status;
}

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata,
                                 uint32_t count) {
 800cde6:	b580      	push	{r7, lr}
 800cde8:	b08a      	sub	sp, #40	; 0x28
 800cdea:	af02      	add	r7, sp, #8
 800cdec:	60f8      	str	r0, [r7, #12]
 800cdee:	607a      	str	r2, [r7, #4]
 800cdf0:	603b      	str	r3, [r7, #0]
 800cdf2:	460b      	mov	r3, r1
 800cdf4:	72fb      	strb	r3, [r7, #11]

  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	77fb      	strb	r3, [r7, #31]
  int32_t status_int = 0;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	61bb      	str	r3, [r7, #24]
  uint8_t deviceAddress;

  if (count >= VL53L0X_MAX_I2C_XFER_SIZE) {
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	2b3f      	cmp	r3, #63	; 0x3f
 800ce02:	d901      	bls.n	800ce08 <VL53L0X_WriteMulti+0x22>
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ce04:	23fc      	movs	r3, #252	; 0xfc
 800ce06:	77fb      	strb	r3, [r7, #31]
  }

  deviceAddress = Dev->I2cDevAddr;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800ce0e:	75fb      	strb	r3, [r7, #23]

  status_int =
      VL53L0X_write_multi(deviceAddress, index, pdata, count, Dev->i2c);
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800ce16:	7af9      	ldrb	r1, [r7, #11]
 800ce18:	7df8      	ldrb	r0, [r7, #23]
 800ce1a:	9300      	str	r3, [sp, #0]
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	f7ff fe86 	bl	800cb30 <_Z19VL53L0X_write_multihhPhmP17I2C_HandleTypeDef>
 800ce24:	61b8      	str	r0, [r7, #24]

  if (status_int != 0)
 800ce26:	69bb      	ldr	r3, [r7, #24]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d001      	beq.n	800ce30 <VL53L0X_WriteMulti+0x4a>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ce2c:	23ec      	movs	r3, #236	; 0xec
 800ce2e:	77fb      	strb	r3, [r7, #31]

  return Status;
 800ce30:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3720      	adds	r7, #32
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata,
                                uint32_t count) {
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b088      	sub	sp, #32
 800ce40:	af02      	add	r7, sp, #8
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	607a      	str	r2, [r7, #4]
 800ce46:	603b      	str	r3, [r7, #0]
 800ce48:	460b      	mov	r3, r1
 800ce4a:	72fb      	strb	r3, [r7, #11]
  VL53L0X_I2C_USER_VAR
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	75fb      	strb	r3, [r7, #23]
  int32_t status_int;
  uint8_t deviceAddress;

  if (count >= VL53L0X_MAX_I2C_XFER_SIZE) {
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	2b3f      	cmp	r3, #63	; 0x3f
 800ce54:	d901      	bls.n	800ce5a <VL53L0X_ReadMulti+0x1e>
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ce56:	23fc      	movs	r3, #252	; 0xfc
 800ce58:	75fb      	strb	r3, [r7, #23]
  }

  deviceAddress = Dev->I2cDevAddr;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800ce60:	75bb      	strb	r3, [r7, #22]

  status_int = VL53L0X_read_multi(deviceAddress, index, pdata, count, Dev->i2c);
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800ce68:	7af9      	ldrb	r1, [r7, #11]
 800ce6a:	7db8      	ldrb	r0, [r7, #22]
 800ce6c:	9300      	str	r3, [sp, #0]
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	687a      	ldr	r2, [r7, #4]
 800ce72:	f7ff fe83 	bl	800cb7c <_Z18VL53L0X_read_multihhPhmP17I2C_HandleTypeDef>
 800ce76:	6138      	str	r0, [r7, #16]

  if (status_int != 0)
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d001      	beq.n	800ce82 <VL53L0X_ReadMulti+0x46>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ce7e:	23ec      	movs	r3, #236	; 0xec
 800ce80:	75fb      	strb	r3, [r7, #23]

  return Status;
 800ce82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3718      	adds	r7, #24
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}

0800ce8e <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800ce8e:	b580      	push	{r7, lr}
 800ce90:	b084      	sub	sp, #16
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	6078      	str	r0, [r7, #4]
 800ce96:	460b      	mov	r3, r1
 800ce98:	70fb      	strb	r3, [r7, #3]
 800ce9a:	4613      	mov	r3, r2
 800ce9c:	70bb      	strb	r3, [r7, #2]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	73fb      	strb	r3, [r7, #15]
  int32_t status_int;
  uint8_t deviceAddress;

  deviceAddress = Dev->I2cDevAddr;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800cea8:	73bb      	strb	r3, [r7, #14]

  status_int = VL53L0X_write_byte(deviceAddress, index, data, Dev->i2c);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800ceb0:	78ba      	ldrb	r2, [r7, #2]
 800ceb2:	78f9      	ldrb	r1, [r7, #3]
 800ceb4:	7bb8      	ldrb	r0, [r7, #14]
 800ceb6:	f7ff fe91 	bl	800cbdc <_Z18VL53L0X_write_bytehhhP17I2C_HandleTypeDef>
 800ceba:	60b8      	str	r0, [r7, #8]

  if (status_int != 0)
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d001      	beq.n	800cec6 <VL53L0X_WrByte+0x38>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cec2:	23ec      	movs	r3, #236	; 0xec
 800cec4:	73fb      	strb	r3, [r7, #15]

  return Status;
 800cec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3710      	adds	r7, #16
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}

0800ced2 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800ced2:	b580      	push	{r7, lr}
 800ced4:	b084      	sub	sp, #16
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6078      	str	r0, [r7, #4]
 800ceda:	460b      	mov	r3, r1
 800cedc:	70fb      	strb	r3, [r7, #3]
 800cede:	4613      	mov	r3, r2
 800cee0:	803b      	strh	r3, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cee2:	2300      	movs	r3, #0
 800cee4:	73fb      	strb	r3, [r7, #15]
  int32_t status_int;
  uint8_t deviceAddress;

  deviceAddress = Dev->I2cDevAddr;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800ceec:	73bb      	strb	r3, [r7, #14]

  status_int = VL53L0X_write_word(deviceAddress, index, data, Dev->i2c);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800cef4:	883a      	ldrh	r2, [r7, #0]
 800cef6:	78f9      	ldrb	r1, [r7, #3]
 800cef8:	7bb8      	ldrb	r0, [r7, #14]
 800cefa:	f7ff fe8d 	bl	800cc18 <_Z18VL53L0X_write_wordhhtP17I2C_HandleTypeDef>
 800cefe:	60b8      	str	r0, [r7, #8]

  if (status_int != 0)
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d001      	beq.n	800cf0a <VL53L0X_WrWord+0x38>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cf06:	23ec      	movs	r3, #236	; 0xec
 800cf08:	73fb      	strb	r3, [r7, #15]

  return Status;
 800cf0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3710      	adds	r7, #16
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}

0800cf16 <VL53L0X_UpdateByte>:

  return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index,
                                 uint8_t AndData, uint8_t OrData) {
 800cf16:	b580      	push	{r7, lr}
 800cf18:	b086      	sub	sp, #24
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
 800cf1e:	4608      	mov	r0, r1
 800cf20:	4611      	mov	r1, r2
 800cf22:	461a      	mov	r2, r3
 800cf24:	4603      	mov	r3, r0
 800cf26:	70fb      	strb	r3, [r7, #3]
 800cf28:	460b      	mov	r3, r1
 800cf2a:	70bb      	strb	r3, [r7, #2]
 800cf2c:	4613      	mov	r3, r2
 800cf2e:	707b      	strb	r3, [r7, #1]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cf30:	2300      	movs	r3, #0
 800cf32:	75fb      	strb	r3, [r7, #23]
  int32_t status_int;
  uint8_t deviceAddress;
  uint8_t data;

  deviceAddress = Dev->I2cDevAddr;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800cf3a:	75bb      	strb	r3, [r7, #22]

  status_int = VL53L0X_read_byte(deviceAddress, index, &data, Dev->i2c);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800cf42:	f107 020f 	add.w	r2, r7, #15
 800cf46:	78f9      	ldrb	r1, [r7, #3]
 800cf48:	7db8      	ldrb	r0, [r7, #22]
 800cf4a:	f7ff fe89 	bl	800cc60 <_Z17VL53L0X_read_bytehhPhP17I2C_HandleTypeDef>
 800cf4e:	6138      	str	r0, [r7, #16]

  if (status_int != 0)
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d001      	beq.n	800cf5a <VL53L0X_UpdateByte+0x44>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cf56:	23ec      	movs	r3, #236	; 0xec
 800cf58:	75fb      	strb	r3, [r7, #23]

  if (Status == VL53L0X_ERROR_NONE) {
 800cf5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d115      	bne.n	800cf8e <VL53L0X_UpdateByte+0x78>
    data = (data & AndData) | OrData;
 800cf62:	7bfa      	ldrb	r2, [r7, #15]
 800cf64:	78bb      	ldrb	r3, [r7, #2]
 800cf66:	4013      	ands	r3, r2
 800cf68:	b2da      	uxtb	r2, r3
 800cf6a:	787b      	ldrb	r3, [r7, #1]
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	b2db      	uxtb	r3, r3
 800cf70:	73fb      	strb	r3, [r7, #15]
    status_int = VL53L0X_write_byte(deviceAddress, index, data, Dev->i2c);
 800cf72:	7bfa      	ldrb	r2, [r7, #15]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800cf7a:	78f9      	ldrb	r1, [r7, #3]
 800cf7c:	7db8      	ldrb	r0, [r7, #22]
 800cf7e:	f7ff fe2d 	bl	800cbdc <_Z18VL53L0X_write_bytehhhP17I2C_HandleTypeDef>
 800cf82:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d001      	beq.n	800cf8e <VL53L0X_UpdateByte+0x78>
      Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cf8a:	23ec      	movs	r3, #236	; 0xec
 800cf8c:	75fb      	strb	r3, [r7, #23]
  }

  return Status;
 800cf8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3718      	adds	r7, #24
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}

0800cf9a <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800cf9a:	b580      	push	{r7, lr}
 800cf9c:	b086      	sub	sp, #24
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	60f8      	str	r0, [r7, #12]
 800cfa2:	460b      	mov	r3, r1
 800cfa4:	607a      	str	r2, [r7, #4]
 800cfa6:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	75fb      	strb	r3, [r7, #23]
  int32_t status_int;
  uint8_t deviceAddress;

  deviceAddress = Dev->I2cDevAddr;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800cfb2:	75bb      	strb	r3, [r7, #22]

  status_int = VL53L0X_read_byte(deviceAddress, index, data, Dev->i2c);
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800cfba:	7af9      	ldrb	r1, [r7, #11]
 800cfbc:	7db8      	ldrb	r0, [r7, #22]
 800cfbe:	687a      	ldr	r2, [r7, #4]
 800cfc0:	f7ff fe4e 	bl	800cc60 <_Z17VL53L0X_read_bytehhPhP17I2C_HandleTypeDef>
 800cfc4:	6138      	str	r0, [r7, #16]

  if (status_int != 0)
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d001      	beq.n	800cfd0 <VL53L0X_RdByte+0x36>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cfcc:	23ec      	movs	r3, #236	; 0xec
 800cfce:	75fb      	strb	r3, [r7, #23]

  return Status;
 800cfd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3718      	adds	r7, #24
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b086      	sub	sp, #24
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	607a      	str	r2, [r7, #4]
 800cfe8:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cfea:	2300      	movs	r3, #0
 800cfec:	75fb      	strb	r3, [r7, #23]
  int32_t status_int;
  uint8_t deviceAddress;

  deviceAddress = Dev->I2cDevAddr;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800cff4:	75bb      	strb	r3, [r7, #22]

  status_int = VL53L0X_read_word(deviceAddress, index, data, Dev->i2c);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800cffc:	7af9      	ldrb	r1, [r7, #11]
 800cffe:	7db8      	ldrb	r0, [r7, #22]
 800d000:	687a      	ldr	r2, [r7, #4]
 800d002:	f7ff fe5c 	bl	800ccbe <_Z17VL53L0X_read_wordhhPtP17I2C_HandleTypeDef>
 800d006:	6138      	str	r0, [r7, #16]

  if (status_int != 0)
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d001      	beq.n	800d012 <VL53L0X_RdWord+0x36>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d00e:	23ec      	movs	r3, #236	; 0xec
 800d010:	75fb      	strb	r3, [r7, #23]

  return Status;
 800d012:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d016:	4618      	mov	r0, r3
 800d018:	3718      	adds	r7, #24
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}

0800d01e <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800d01e:	b580      	push	{r7, lr}
 800d020:	b086      	sub	sp, #24
 800d022:	af00      	add	r7, sp, #0
 800d024:	60f8      	str	r0, [r7, #12]
 800d026:	460b      	mov	r3, r1
 800d028:	607a      	str	r2, [r7, #4]
 800d02a:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d02c:	2300      	movs	r3, #0
 800d02e:	75fb      	strb	r3, [r7, #23]
  int32_t status_int;
  uint8_t deviceAddress;

  deviceAddress = Dev->I2cDevAddr;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800d036:	75bb      	strb	r3, [r7, #22]

  status_int = VL53L0X_read_dword(deviceAddress, index, data, Dev->i2c);
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800d03e:	7af9      	ldrb	r1, [r7, #11]
 800d040:	7db8      	ldrb	r0, [r7, #22]
 800d042:	687a      	ldr	r2, [r7, #4]
 800d044:	f7ff fe7d 	bl	800cd42 <_Z18VL53L0X_read_dwordhhPmP17I2C_HandleTypeDef>
 800d048:	6138      	str	r0, [r7, #16]

  if (status_int != 0)
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d001      	beq.n	800d054 <VL53L0X_RdDWord+0x36>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d050:	23ec      	movs	r3, #236	; 0xec
 800d052:	75fb      	strb	r3, [r7, #23]

  return Status;
 800d054:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d058:	4618      	mov	r0, r3
 800d05a:	3718      	adds	r7, #24
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <VL53L0X_PollingDelay>:

#define VL53L0X_POLLINGDELAY_LOOPNB 250
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800d060:	b480      	push	{r7}
 800d062:	b085      	sub	sp, #20
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800d068:	2300      	movs	r3, #0
 800d06a:	73fb      	strb	r3, [r7, #15]
  volatile uint32_t i;
  LOG_FUNCTION_START("");

  for (i = 0; i < VL53L0X_POLLINGDELAY_LOOPNB; i++) {
 800d06c:	2300      	movs	r3, #0
 800d06e:	60bb      	str	r3, [r7, #8]
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	2bf9      	cmp	r3, #249	; 0xf9
 800d074:	bf94      	ite	ls
 800d076:	2301      	movls	r3, #1
 800d078:	2300      	movhi	r3, #0
 800d07a:	b2db      	uxtb	r3, r3
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d004      	beq.n	800d08a <VL53L0X_PollingDelay+0x2a>
    // Do nothing
    asm("nop");
 800d080:	bf00      	nop
  for (i = 0; i < VL53L0X_POLLINGDELAY_LOOPNB; i++) {
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	3301      	adds	r3, #1
 800d086:	60bb      	str	r3, [r7, #8]
 800d088:	e7f2      	b.n	800d070 <VL53L0X_PollingDelay+0x10>
  }

  LOG_FUNCTION_END(status);
  return status;
 800d08a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d08e:	4618      	mov	r0, r3
 800d090:	3714      	adds	r7, #20
 800d092:	46bd      	mov	sp, r7
 800d094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d098:	4770      	bx	lr
	...

0800d09c <__errno>:
 800d09c:	4b01      	ldr	r3, [pc, #4]	; (800d0a4 <__errno+0x8>)
 800d09e:	6818      	ldr	r0, [r3, #0]
 800d0a0:	4770      	bx	lr
 800d0a2:	bf00      	nop
 800d0a4:	200002d4 	.word	0x200002d4

0800d0a8 <__libc_init_array>:
 800d0a8:	b570      	push	{r4, r5, r6, lr}
 800d0aa:	4d0d      	ldr	r5, [pc, #52]	; (800d0e0 <__libc_init_array+0x38>)
 800d0ac:	4c0d      	ldr	r4, [pc, #52]	; (800d0e4 <__libc_init_array+0x3c>)
 800d0ae:	1b64      	subs	r4, r4, r5
 800d0b0:	10a4      	asrs	r4, r4, #2
 800d0b2:	2600      	movs	r6, #0
 800d0b4:	42a6      	cmp	r6, r4
 800d0b6:	d109      	bne.n	800d0cc <__libc_init_array+0x24>
 800d0b8:	4d0b      	ldr	r5, [pc, #44]	; (800d0e8 <__libc_init_array+0x40>)
 800d0ba:	4c0c      	ldr	r4, [pc, #48]	; (800d0ec <__libc_init_array+0x44>)
 800d0bc:	f004 fc98 	bl	80119f0 <_init>
 800d0c0:	1b64      	subs	r4, r4, r5
 800d0c2:	10a4      	asrs	r4, r4, #2
 800d0c4:	2600      	movs	r6, #0
 800d0c6:	42a6      	cmp	r6, r4
 800d0c8:	d105      	bne.n	800d0d6 <__libc_init_array+0x2e>
 800d0ca:	bd70      	pop	{r4, r5, r6, pc}
 800d0cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0d0:	4798      	blx	r3
 800d0d2:	3601      	adds	r6, #1
 800d0d4:	e7ee      	b.n	800d0b4 <__libc_init_array+0xc>
 800d0d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0da:	4798      	blx	r3
 800d0dc:	3601      	adds	r6, #1
 800d0de:	e7f2      	b.n	800d0c6 <__libc_init_array+0x1e>
 800d0e0:	08012444 	.word	0x08012444
 800d0e4:	08012444 	.word	0x08012444
 800d0e8:	08012444 	.word	0x08012444
 800d0ec:	08012448 	.word	0x08012448

0800d0f0 <memcpy>:
 800d0f0:	440a      	add	r2, r1
 800d0f2:	4291      	cmp	r1, r2
 800d0f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d0f8:	d100      	bne.n	800d0fc <memcpy+0xc>
 800d0fa:	4770      	bx	lr
 800d0fc:	b510      	push	{r4, lr}
 800d0fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d102:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d106:	4291      	cmp	r1, r2
 800d108:	d1f9      	bne.n	800d0fe <memcpy+0xe>
 800d10a:	bd10      	pop	{r4, pc}

0800d10c <memset>:
 800d10c:	4402      	add	r2, r0
 800d10e:	4603      	mov	r3, r0
 800d110:	4293      	cmp	r3, r2
 800d112:	d100      	bne.n	800d116 <memset+0xa>
 800d114:	4770      	bx	lr
 800d116:	f803 1b01 	strb.w	r1, [r3], #1
 800d11a:	e7f9      	b.n	800d110 <memset+0x4>

0800d11c <__cvt>:
 800d11c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d120:	ec55 4b10 	vmov	r4, r5, d0
 800d124:	2d00      	cmp	r5, #0
 800d126:	460e      	mov	r6, r1
 800d128:	4619      	mov	r1, r3
 800d12a:	462b      	mov	r3, r5
 800d12c:	bfbb      	ittet	lt
 800d12e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d132:	461d      	movlt	r5, r3
 800d134:	2300      	movge	r3, #0
 800d136:	232d      	movlt	r3, #45	; 0x2d
 800d138:	700b      	strb	r3, [r1, #0]
 800d13a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d13c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d140:	4691      	mov	r9, r2
 800d142:	f023 0820 	bic.w	r8, r3, #32
 800d146:	bfbc      	itt	lt
 800d148:	4622      	movlt	r2, r4
 800d14a:	4614      	movlt	r4, r2
 800d14c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d150:	d005      	beq.n	800d15e <__cvt+0x42>
 800d152:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d156:	d100      	bne.n	800d15a <__cvt+0x3e>
 800d158:	3601      	adds	r6, #1
 800d15a:	2102      	movs	r1, #2
 800d15c:	e000      	b.n	800d160 <__cvt+0x44>
 800d15e:	2103      	movs	r1, #3
 800d160:	ab03      	add	r3, sp, #12
 800d162:	9301      	str	r3, [sp, #4]
 800d164:	ab02      	add	r3, sp, #8
 800d166:	9300      	str	r3, [sp, #0]
 800d168:	ec45 4b10 	vmov	d0, r4, r5
 800d16c:	4653      	mov	r3, sl
 800d16e:	4632      	mov	r2, r6
 800d170:	f001 fdb6 	bl	800ece0 <_dtoa_r>
 800d174:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d178:	4607      	mov	r7, r0
 800d17a:	d102      	bne.n	800d182 <__cvt+0x66>
 800d17c:	f019 0f01 	tst.w	r9, #1
 800d180:	d022      	beq.n	800d1c8 <__cvt+0xac>
 800d182:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d186:	eb07 0906 	add.w	r9, r7, r6
 800d18a:	d110      	bne.n	800d1ae <__cvt+0x92>
 800d18c:	783b      	ldrb	r3, [r7, #0]
 800d18e:	2b30      	cmp	r3, #48	; 0x30
 800d190:	d10a      	bne.n	800d1a8 <__cvt+0x8c>
 800d192:	2200      	movs	r2, #0
 800d194:	2300      	movs	r3, #0
 800d196:	4620      	mov	r0, r4
 800d198:	4629      	mov	r1, r5
 800d19a:	f7f3 fc9d 	bl	8000ad8 <__aeabi_dcmpeq>
 800d19e:	b918      	cbnz	r0, 800d1a8 <__cvt+0x8c>
 800d1a0:	f1c6 0601 	rsb	r6, r6, #1
 800d1a4:	f8ca 6000 	str.w	r6, [sl]
 800d1a8:	f8da 3000 	ldr.w	r3, [sl]
 800d1ac:	4499      	add	r9, r3
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	4620      	mov	r0, r4
 800d1b4:	4629      	mov	r1, r5
 800d1b6:	f7f3 fc8f 	bl	8000ad8 <__aeabi_dcmpeq>
 800d1ba:	b108      	cbz	r0, 800d1c0 <__cvt+0xa4>
 800d1bc:	f8cd 900c 	str.w	r9, [sp, #12]
 800d1c0:	2230      	movs	r2, #48	; 0x30
 800d1c2:	9b03      	ldr	r3, [sp, #12]
 800d1c4:	454b      	cmp	r3, r9
 800d1c6:	d307      	bcc.n	800d1d8 <__cvt+0xbc>
 800d1c8:	9b03      	ldr	r3, [sp, #12]
 800d1ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d1cc:	1bdb      	subs	r3, r3, r7
 800d1ce:	4638      	mov	r0, r7
 800d1d0:	6013      	str	r3, [r2, #0]
 800d1d2:	b004      	add	sp, #16
 800d1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1d8:	1c59      	adds	r1, r3, #1
 800d1da:	9103      	str	r1, [sp, #12]
 800d1dc:	701a      	strb	r2, [r3, #0]
 800d1de:	e7f0      	b.n	800d1c2 <__cvt+0xa6>

0800d1e0 <__exponent>:
 800d1e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	2900      	cmp	r1, #0
 800d1e6:	bfb8      	it	lt
 800d1e8:	4249      	neglt	r1, r1
 800d1ea:	f803 2b02 	strb.w	r2, [r3], #2
 800d1ee:	bfb4      	ite	lt
 800d1f0:	222d      	movlt	r2, #45	; 0x2d
 800d1f2:	222b      	movge	r2, #43	; 0x2b
 800d1f4:	2909      	cmp	r1, #9
 800d1f6:	7042      	strb	r2, [r0, #1]
 800d1f8:	dd2a      	ble.n	800d250 <__exponent+0x70>
 800d1fa:	f10d 0407 	add.w	r4, sp, #7
 800d1fe:	46a4      	mov	ip, r4
 800d200:	270a      	movs	r7, #10
 800d202:	46a6      	mov	lr, r4
 800d204:	460a      	mov	r2, r1
 800d206:	fb91 f6f7 	sdiv	r6, r1, r7
 800d20a:	fb07 1516 	mls	r5, r7, r6, r1
 800d20e:	3530      	adds	r5, #48	; 0x30
 800d210:	2a63      	cmp	r2, #99	; 0x63
 800d212:	f104 34ff 	add.w	r4, r4, #4294967295
 800d216:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d21a:	4631      	mov	r1, r6
 800d21c:	dcf1      	bgt.n	800d202 <__exponent+0x22>
 800d21e:	3130      	adds	r1, #48	; 0x30
 800d220:	f1ae 0502 	sub.w	r5, lr, #2
 800d224:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d228:	1c44      	adds	r4, r0, #1
 800d22a:	4629      	mov	r1, r5
 800d22c:	4561      	cmp	r1, ip
 800d22e:	d30a      	bcc.n	800d246 <__exponent+0x66>
 800d230:	f10d 0209 	add.w	r2, sp, #9
 800d234:	eba2 020e 	sub.w	r2, r2, lr
 800d238:	4565      	cmp	r5, ip
 800d23a:	bf88      	it	hi
 800d23c:	2200      	movhi	r2, #0
 800d23e:	4413      	add	r3, r2
 800d240:	1a18      	subs	r0, r3, r0
 800d242:	b003      	add	sp, #12
 800d244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d246:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d24a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d24e:	e7ed      	b.n	800d22c <__exponent+0x4c>
 800d250:	2330      	movs	r3, #48	; 0x30
 800d252:	3130      	adds	r1, #48	; 0x30
 800d254:	7083      	strb	r3, [r0, #2]
 800d256:	70c1      	strb	r1, [r0, #3]
 800d258:	1d03      	adds	r3, r0, #4
 800d25a:	e7f1      	b.n	800d240 <__exponent+0x60>

0800d25c <_printf_float>:
 800d25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d260:	ed2d 8b02 	vpush	{d8}
 800d264:	b08d      	sub	sp, #52	; 0x34
 800d266:	460c      	mov	r4, r1
 800d268:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d26c:	4616      	mov	r6, r2
 800d26e:	461f      	mov	r7, r3
 800d270:	4605      	mov	r5, r0
 800d272:	f002 fe93 	bl	800ff9c <_localeconv_r>
 800d276:	f8d0 a000 	ldr.w	sl, [r0]
 800d27a:	4650      	mov	r0, sl
 800d27c:	f7f2 ffb0 	bl	80001e0 <strlen>
 800d280:	2300      	movs	r3, #0
 800d282:	930a      	str	r3, [sp, #40]	; 0x28
 800d284:	6823      	ldr	r3, [r4, #0]
 800d286:	9305      	str	r3, [sp, #20]
 800d288:	f8d8 3000 	ldr.w	r3, [r8]
 800d28c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d290:	3307      	adds	r3, #7
 800d292:	f023 0307 	bic.w	r3, r3, #7
 800d296:	f103 0208 	add.w	r2, r3, #8
 800d29a:	f8c8 2000 	str.w	r2, [r8]
 800d29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d2a6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d2aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d2ae:	9307      	str	r3, [sp, #28]
 800d2b0:	f8cd 8018 	str.w	r8, [sp, #24]
 800d2b4:	ee08 0a10 	vmov	s16, r0
 800d2b8:	4b9f      	ldr	r3, [pc, #636]	; (800d538 <_printf_float+0x2dc>)
 800d2ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d2be:	f04f 32ff 	mov.w	r2, #4294967295
 800d2c2:	f7f3 fc3b 	bl	8000b3c <__aeabi_dcmpun>
 800d2c6:	bb88      	cbnz	r0, 800d32c <_printf_float+0xd0>
 800d2c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d2cc:	4b9a      	ldr	r3, [pc, #616]	; (800d538 <_printf_float+0x2dc>)
 800d2ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d2d2:	f7f3 fc15 	bl	8000b00 <__aeabi_dcmple>
 800d2d6:	bb48      	cbnz	r0, 800d32c <_printf_float+0xd0>
 800d2d8:	2200      	movs	r2, #0
 800d2da:	2300      	movs	r3, #0
 800d2dc:	4640      	mov	r0, r8
 800d2de:	4649      	mov	r1, r9
 800d2e0:	f7f3 fc04 	bl	8000aec <__aeabi_dcmplt>
 800d2e4:	b110      	cbz	r0, 800d2ec <_printf_float+0x90>
 800d2e6:	232d      	movs	r3, #45	; 0x2d
 800d2e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2ec:	4b93      	ldr	r3, [pc, #588]	; (800d53c <_printf_float+0x2e0>)
 800d2ee:	4894      	ldr	r0, [pc, #592]	; (800d540 <_printf_float+0x2e4>)
 800d2f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d2f4:	bf94      	ite	ls
 800d2f6:	4698      	movls	r8, r3
 800d2f8:	4680      	movhi	r8, r0
 800d2fa:	2303      	movs	r3, #3
 800d2fc:	6123      	str	r3, [r4, #16]
 800d2fe:	9b05      	ldr	r3, [sp, #20]
 800d300:	f023 0204 	bic.w	r2, r3, #4
 800d304:	6022      	str	r2, [r4, #0]
 800d306:	f04f 0900 	mov.w	r9, #0
 800d30a:	9700      	str	r7, [sp, #0]
 800d30c:	4633      	mov	r3, r6
 800d30e:	aa0b      	add	r2, sp, #44	; 0x2c
 800d310:	4621      	mov	r1, r4
 800d312:	4628      	mov	r0, r5
 800d314:	f000 f9d8 	bl	800d6c8 <_printf_common>
 800d318:	3001      	adds	r0, #1
 800d31a:	f040 8090 	bne.w	800d43e <_printf_float+0x1e2>
 800d31e:	f04f 30ff 	mov.w	r0, #4294967295
 800d322:	b00d      	add	sp, #52	; 0x34
 800d324:	ecbd 8b02 	vpop	{d8}
 800d328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d32c:	4642      	mov	r2, r8
 800d32e:	464b      	mov	r3, r9
 800d330:	4640      	mov	r0, r8
 800d332:	4649      	mov	r1, r9
 800d334:	f7f3 fc02 	bl	8000b3c <__aeabi_dcmpun>
 800d338:	b140      	cbz	r0, 800d34c <_printf_float+0xf0>
 800d33a:	464b      	mov	r3, r9
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	bfbc      	itt	lt
 800d340:	232d      	movlt	r3, #45	; 0x2d
 800d342:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d346:	487f      	ldr	r0, [pc, #508]	; (800d544 <_printf_float+0x2e8>)
 800d348:	4b7f      	ldr	r3, [pc, #508]	; (800d548 <_printf_float+0x2ec>)
 800d34a:	e7d1      	b.n	800d2f0 <_printf_float+0x94>
 800d34c:	6863      	ldr	r3, [r4, #4]
 800d34e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d352:	9206      	str	r2, [sp, #24]
 800d354:	1c5a      	adds	r2, r3, #1
 800d356:	d13f      	bne.n	800d3d8 <_printf_float+0x17c>
 800d358:	2306      	movs	r3, #6
 800d35a:	6063      	str	r3, [r4, #4]
 800d35c:	9b05      	ldr	r3, [sp, #20]
 800d35e:	6861      	ldr	r1, [r4, #4]
 800d360:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d364:	2300      	movs	r3, #0
 800d366:	9303      	str	r3, [sp, #12]
 800d368:	ab0a      	add	r3, sp, #40	; 0x28
 800d36a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d36e:	ab09      	add	r3, sp, #36	; 0x24
 800d370:	ec49 8b10 	vmov	d0, r8, r9
 800d374:	9300      	str	r3, [sp, #0]
 800d376:	6022      	str	r2, [r4, #0]
 800d378:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d37c:	4628      	mov	r0, r5
 800d37e:	f7ff fecd 	bl	800d11c <__cvt>
 800d382:	9b06      	ldr	r3, [sp, #24]
 800d384:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d386:	2b47      	cmp	r3, #71	; 0x47
 800d388:	4680      	mov	r8, r0
 800d38a:	d108      	bne.n	800d39e <_printf_float+0x142>
 800d38c:	1cc8      	adds	r0, r1, #3
 800d38e:	db02      	blt.n	800d396 <_printf_float+0x13a>
 800d390:	6863      	ldr	r3, [r4, #4]
 800d392:	4299      	cmp	r1, r3
 800d394:	dd41      	ble.n	800d41a <_printf_float+0x1be>
 800d396:	f1ab 0b02 	sub.w	fp, fp, #2
 800d39a:	fa5f fb8b 	uxtb.w	fp, fp
 800d39e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d3a2:	d820      	bhi.n	800d3e6 <_printf_float+0x18a>
 800d3a4:	3901      	subs	r1, #1
 800d3a6:	465a      	mov	r2, fp
 800d3a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d3ac:	9109      	str	r1, [sp, #36]	; 0x24
 800d3ae:	f7ff ff17 	bl	800d1e0 <__exponent>
 800d3b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3b4:	1813      	adds	r3, r2, r0
 800d3b6:	2a01      	cmp	r2, #1
 800d3b8:	4681      	mov	r9, r0
 800d3ba:	6123      	str	r3, [r4, #16]
 800d3bc:	dc02      	bgt.n	800d3c4 <_printf_float+0x168>
 800d3be:	6822      	ldr	r2, [r4, #0]
 800d3c0:	07d2      	lsls	r2, r2, #31
 800d3c2:	d501      	bpl.n	800d3c8 <_printf_float+0x16c>
 800d3c4:	3301      	adds	r3, #1
 800d3c6:	6123      	str	r3, [r4, #16]
 800d3c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d09c      	beq.n	800d30a <_printf_float+0xae>
 800d3d0:	232d      	movs	r3, #45	; 0x2d
 800d3d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3d6:	e798      	b.n	800d30a <_printf_float+0xae>
 800d3d8:	9a06      	ldr	r2, [sp, #24]
 800d3da:	2a47      	cmp	r2, #71	; 0x47
 800d3dc:	d1be      	bne.n	800d35c <_printf_float+0x100>
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d1bc      	bne.n	800d35c <_printf_float+0x100>
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	e7b9      	b.n	800d35a <_printf_float+0xfe>
 800d3e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d3ea:	d118      	bne.n	800d41e <_printf_float+0x1c2>
 800d3ec:	2900      	cmp	r1, #0
 800d3ee:	6863      	ldr	r3, [r4, #4]
 800d3f0:	dd0b      	ble.n	800d40a <_printf_float+0x1ae>
 800d3f2:	6121      	str	r1, [r4, #16]
 800d3f4:	b913      	cbnz	r3, 800d3fc <_printf_float+0x1a0>
 800d3f6:	6822      	ldr	r2, [r4, #0]
 800d3f8:	07d0      	lsls	r0, r2, #31
 800d3fa:	d502      	bpl.n	800d402 <_printf_float+0x1a6>
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	440b      	add	r3, r1
 800d400:	6123      	str	r3, [r4, #16]
 800d402:	65a1      	str	r1, [r4, #88]	; 0x58
 800d404:	f04f 0900 	mov.w	r9, #0
 800d408:	e7de      	b.n	800d3c8 <_printf_float+0x16c>
 800d40a:	b913      	cbnz	r3, 800d412 <_printf_float+0x1b6>
 800d40c:	6822      	ldr	r2, [r4, #0]
 800d40e:	07d2      	lsls	r2, r2, #31
 800d410:	d501      	bpl.n	800d416 <_printf_float+0x1ba>
 800d412:	3302      	adds	r3, #2
 800d414:	e7f4      	b.n	800d400 <_printf_float+0x1a4>
 800d416:	2301      	movs	r3, #1
 800d418:	e7f2      	b.n	800d400 <_printf_float+0x1a4>
 800d41a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d41e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d420:	4299      	cmp	r1, r3
 800d422:	db05      	blt.n	800d430 <_printf_float+0x1d4>
 800d424:	6823      	ldr	r3, [r4, #0]
 800d426:	6121      	str	r1, [r4, #16]
 800d428:	07d8      	lsls	r0, r3, #31
 800d42a:	d5ea      	bpl.n	800d402 <_printf_float+0x1a6>
 800d42c:	1c4b      	adds	r3, r1, #1
 800d42e:	e7e7      	b.n	800d400 <_printf_float+0x1a4>
 800d430:	2900      	cmp	r1, #0
 800d432:	bfd4      	ite	le
 800d434:	f1c1 0202 	rsble	r2, r1, #2
 800d438:	2201      	movgt	r2, #1
 800d43a:	4413      	add	r3, r2
 800d43c:	e7e0      	b.n	800d400 <_printf_float+0x1a4>
 800d43e:	6823      	ldr	r3, [r4, #0]
 800d440:	055a      	lsls	r2, r3, #21
 800d442:	d407      	bmi.n	800d454 <_printf_float+0x1f8>
 800d444:	6923      	ldr	r3, [r4, #16]
 800d446:	4642      	mov	r2, r8
 800d448:	4631      	mov	r1, r6
 800d44a:	4628      	mov	r0, r5
 800d44c:	47b8      	blx	r7
 800d44e:	3001      	adds	r0, #1
 800d450:	d12c      	bne.n	800d4ac <_printf_float+0x250>
 800d452:	e764      	b.n	800d31e <_printf_float+0xc2>
 800d454:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d458:	f240 80e0 	bls.w	800d61c <_printf_float+0x3c0>
 800d45c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d460:	2200      	movs	r2, #0
 800d462:	2300      	movs	r3, #0
 800d464:	f7f3 fb38 	bl	8000ad8 <__aeabi_dcmpeq>
 800d468:	2800      	cmp	r0, #0
 800d46a:	d034      	beq.n	800d4d6 <_printf_float+0x27a>
 800d46c:	4a37      	ldr	r2, [pc, #220]	; (800d54c <_printf_float+0x2f0>)
 800d46e:	2301      	movs	r3, #1
 800d470:	4631      	mov	r1, r6
 800d472:	4628      	mov	r0, r5
 800d474:	47b8      	blx	r7
 800d476:	3001      	adds	r0, #1
 800d478:	f43f af51 	beq.w	800d31e <_printf_float+0xc2>
 800d47c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d480:	429a      	cmp	r2, r3
 800d482:	db02      	blt.n	800d48a <_printf_float+0x22e>
 800d484:	6823      	ldr	r3, [r4, #0]
 800d486:	07d8      	lsls	r0, r3, #31
 800d488:	d510      	bpl.n	800d4ac <_printf_float+0x250>
 800d48a:	ee18 3a10 	vmov	r3, s16
 800d48e:	4652      	mov	r2, sl
 800d490:	4631      	mov	r1, r6
 800d492:	4628      	mov	r0, r5
 800d494:	47b8      	blx	r7
 800d496:	3001      	adds	r0, #1
 800d498:	f43f af41 	beq.w	800d31e <_printf_float+0xc2>
 800d49c:	f04f 0800 	mov.w	r8, #0
 800d4a0:	f104 091a 	add.w	r9, r4, #26
 800d4a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4a6:	3b01      	subs	r3, #1
 800d4a8:	4543      	cmp	r3, r8
 800d4aa:	dc09      	bgt.n	800d4c0 <_printf_float+0x264>
 800d4ac:	6823      	ldr	r3, [r4, #0]
 800d4ae:	079b      	lsls	r3, r3, #30
 800d4b0:	f100 8105 	bmi.w	800d6be <_printf_float+0x462>
 800d4b4:	68e0      	ldr	r0, [r4, #12]
 800d4b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4b8:	4298      	cmp	r0, r3
 800d4ba:	bfb8      	it	lt
 800d4bc:	4618      	movlt	r0, r3
 800d4be:	e730      	b.n	800d322 <_printf_float+0xc6>
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	464a      	mov	r2, r9
 800d4c4:	4631      	mov	r1, r6
 800d4c6:	4628      	mov	r0, r5
 800d4c8:	47b8      	blx	r7
 800d4ca:	3001      	adds	r0, #1
 800d4cc:	f43f af27 	beq.w	800d31e <_printf_float+0xc2>
 800d4d0:	f108 0801 	add.w	r8, r8, #1
 800d4d4:	e7e6      	b.n	800d4a4 <_printf_float+0x248>
 800d4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	dc39      	bgt.n	800d550 <_printf_float+0x2f4>
 800d4dc:	4a1b      	ldr	r2, [pc, #108]	; (800d54c <_printf_float+0x2f0>)
 800d4de:	2301      	movs	r3, #1
 800d4e0:	4631      	mov	r1, r6
 800d4e2:	4628      	mov	r0, r5
 800d4e4:	47b8      	blx	r7
 800d4e6:	3001      	adds	r0, #1
 800d4e8:	f43f af19 	beq.w	800d31e <_printf_float+0xc2>
 800d4ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d4f0:	4313      	orrs	r3, r2
 800d4f2:	d102      	bne.n	800d4fa <_printf_float+0x29e>
 800d4f4:	6823      	ldr	r3, [r4, #0]
 800d4f6:	07d9      	lsls	r1, r3, #31
 800d4f8:	d5d8      	bpl.n	800d4ac <_printf_float+0x250>
 800d4fa:	ee18 3a10 	vmov	r3, s16
 800d4fe:	4652      	mov	r2, sl
 800d500:	4631      	mov	r1, r6
 800d502:	4628      	mov	r0, r5
 800d504:	47b8      	blx	r7
 800d506:	3001      	adds	r0, #1
 800d508:	f43f af09 	beq.w	800d31e <_printf_float+0xc2>
 800d50c:	f04f 0900 	mov.w	r9, #0
 800d510:	f104 0a1a 	add.w	sl, r4, #26
 800d514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d516:	425b      	negs	r3, r3
 800d518:	454b      	cmp	r3, r9
 800d51a:	dc01      	bgt.n	800d520 <_printf_float+0x2c4>
 800d51c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d51e:	e792      	b.n	800d446 <_printf_float+0x1ea>
 800d520:	2301      	movs	r3, #1
 800d522:	4652      	mov	r2, sl
 800d524:	4631      	mov	r1, r6
 800d526:	4628      	mov	r0, r5
 800d528:	47b8      	blx	r7
 800d52a:	3001      	adds	r0, #1
 800d52c:	f43f aef7 	beq.w	800d31e <_printf_float+0xc2>
 800d530:	f109 0901 	add.w	r9, r9, #1
 800d534:	e7ee      	b.n	800d514 <_printf_float+0x2b8>
 800d536:	bf00      	nop
 800d538:	7fefffff 	.word	0x7fefffff
 800d53c:	08011f98 	.word	0x08011f98
 800d540:	08011f9c 	.word	0x08011f9c
 800d544:	08011fa4 	.word	0x08011fa4
 800d548:	08011fa0 	.word	0x08011fa0
 800d54c:	08011fa8 	.word	0x08011fa8
 800d550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d552:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d554:	429a      	cmp	r2, r3
 800d556:	bfa8      	it	ge
 800d558:	461a      	movge	r2, r3
 800d55a:	2a00      	cmp	r2, #0
 800d55c:	4691      	mov	r9, r2
 800d55e:	dc37      	bgt.n	800d5d0 <_printf_float+0x374>
 800d560:	f04f 0b00 	mov.w	fp, #0
 800d564:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d568:	f104 021a 	add.w	r2, r4, #26
 800d56c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d56e:	9305      	str	r3, [sp, #20]
 800d570:	eba3 0309 	sub.w	r3, r3, r9
 800d574:	455b      	cmp	r3, fp
 800d576:	dc33      	bgt.n	800d5e0 <_printf_float+0x384>
 800d578:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d57c:	429a      	cmp	r2, r3
 800d57e:	db3b      	blt.n	800d5f8 <_printf_float+0x39c>
 800d580:	6823      	ldr	r3, [r4, #0]
 800d582:	07da      	lsls	r2, r3, #31
 800d584:	d438      	bmi.n	800d5f8 <_printf_float+0x39c>
 800d586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d588:	9a05      	ldr	r2, [sp, #20]
 800d58a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d58c:	1a9a      	subs	r2, r3, r2
 800d58e:	eba3 0901 	sub.w	r9, r3, r1
 800d592:	4591      	cmp	r9, r2
 800d594:	bfa8      	it	ge
 800d596:	4691      	movge	r9, r2
 800d598:	f1b9 0f00 	cmp.w	r9, #0
 800d59c:	dc35      	bgt.n	800d60a <_printf_float+0x3ae>
 800d59e:	f04f 0800 	mov.w	r8, #0
 800d5a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d5a6:	f104 0a1a 	add.w	sl, r4, #26
 800d5aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d5ae:	1a9b      	subs	r3, r3, r2
 800d5b0:	eba3 0309 	sub.w	r3, r3, r9
 800d5b4:	4543      	cmp	r3, r8
 800d5b6:	f77f af79 	ble.w	800d4ac <_printf_float+0x250>
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	4652      	mov	r2, sl
 800d5be:	4631      	mov	r1, r6
 800d5c0:	4628      	mov	r0, r5
 800d5c2:	47b8      	blx	r7
 800d5c4:	3001      	adds	r0, #1
 800d5c6:	f43f aeaa 	beq.w	800d31e <_printf_float+0xc2>
 800d5ca:	f108 0801 	add.w	r8, r8, #1
 800d5ce:	e7ec      	b.n	800d5aa <_printf_float+0x34e>
 800d5d0:	4613      	mov	r3, r2
 800d5d2:	4631      	mov	r1, r6
 800d5d4:	4642      	mov	r2, r8
 800d5d6:	4628      	mov	r0, r5
 800d5d8:	47b8      	blx	r7
 800d5da:	3001      	adds	r0, #1
 800d5dc:	d1c0      	bne.n	800d560 <_printf_float+0x304>
 800d5de:	e69e      	b.n	800d31e <_printf_float+0xc2>
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	4631      	mov	r1, r6
 800d5e4:	4628      	mov	r0, r5
 800d5e6:	9205      	str	r2, [sp, #20]
 800d5e8:	47b8      	blx	r7
 800d5ea:	3001      	adds	r0, #1
 800d5ec:	f43f ae97 	beq.w	800d31e <_printf_float+0xc2>
 800d5f0:	9a05      	ldr	r2, [sp, #20]
 800d5f2:	f10b 0b01 	add.w	fp, fp, #1
 800d5f6:	e7b9      	b.n	800d56c <_printf_float+0x310>
 800d5f8:	ee18 3a10 	vmov	r3, s16
 800d5fc:	4652      	mov	r2, sl
 800d5fe:	4631      	mov	r1, r6
 800d600:	4628      	mov	r0, r5
 800d602:	47b8      	blx	r7
 800d604:	3001      	adds	r0, #1
 800d606:	d1be      	bne.n	800d586 <_printf_float+0x32a>
 800d608:	e689      	b.n	800d31e <_printf_float+0xc2>
 800d60a:	9a05      	ldr	r2, [sp, #20]
 800d60c:	464b      	mov	r3, r9
 800d60e:	4442      	add	r2, r8
 800d610:	4631      	mov	r1, r6
 800d612:	4628      	mov	r0, r5
 800d614:	47b8      	blx	r7
 800d616:	3001      	adds	r0, #1
 800d618:	d1c1      	bne.n	800d59e <_printf_float+0x342>
 800d61a:	e680      	b.n	800d31e <_printf_float+0xc2>
 800d61c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d61e:	2a01      	cmp	r2, #1
 800d620:	dc01      	bgt.n	800d626 <_printf_float+0x3ca>
 800d622:	07db      	lsls	r3, r3, #31
 800d624:	d538      	bpl.n	800d698 <_printf_float+0x43c>
 800d626:	2301      	movs	r3, #1
 800d628:	4642      	mov	r2, r8
 800d62a:	4631      	mov	r1, r6
 800d62c:	4628      	mov	r0, r5
 800d62e:	47b8      	blx	r7
 800d630:	3001      	adds	r0, #1
 800d632:	f43f ae74 	beq.w	800d31e <_printf_float+0xc2>
 800d636:	ee18 3a10 	vmov	r3, s16
 800d63a:	4652      	mov	r2, sl
 800d63c:	4631      	mov	r1, r6
 800d63e:	4628      	mov	r0, r5
 800d640:	47b8      	blx	r7
 800d642:	3001      	adds	r0, #1
 800d644:	f43f ae6b 	beq.w	800d31e <_printf_float+0xc2>
 800d648:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d64c:	2200      	movs	r2, #0
 800d64e:	2300      	movs	r3, #0
 800d650:	f7f3 fa42 	bl	8000ad8 <__aeabi_dcmpeq>
 800d654:	b9d8      	cbnz	r0, 800d68e <_printf_float+0x432>
 800d656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d658:	f108 0201 	add.w	r2, r8, #1
 800d65c:	3b01      	subs	r3, #1
 800d65e:	4631      	mov	r1, r6
 800d660:	4628      	mov	r0, r5
 800d662:	47b8      	blx	r7
 800d664:	3001      	adds	r0, #1
 800d666:	d10e      	bne.n	800d686 <_printf_float+0x42a>
 800d668:	e659      	b.n	800d31e <_printf_float+0xc2>
 800d66a:	2301      	movs	r3, #1
 800d66c:	4652      	mov	r2, sl
 800d66e:	4631      	mov	r1, r6
 800d670:	4628      	mov	r0, r5
 800d672:	47b8      	blx	r7
 800d674:	3001      	adds	r0, #1
 800d676:	f43f ae52 	beq.w	800d31e <_printf_float+0xc2>
 800d67a:	f108 0801 	add.w	r8, r8, #1
 800d67e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d680:	3b01      	subs	r3, #1
 800d682:	4543      	cmp	r3, r8
 800d684:	dcf1      	bgt.n	800d66a <_printf_float+0x40e>
 800d686:	464b      	mov	r3, r9
 800d688:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d68c:	e6dc      	b.n	800d448 <_printf_float+0x1ec>
 800d68e:	f04f 0800 	mov.w	r8, #0
 800d692:	f104 0a1a 	add.w	sl, r4, #26
 800d696:	e7f2      	b.n	800d67e <_printf_float+0x422>
 800d698:	2301      	movs	r3, #1
 800d69a:	4642      	mov	r2, r8
 800d69c:	e7df      	b.n	800d65e <_printf_float+0x402>
 800d69e:	2301      	movs	r3, #1
 800d6a0:	464a      	mov	r2, r9
 800d6a2:	4631      	mov	r1, r6
 800d6a4:	4628      	mov	r0, r5
 800d6a6:	47b8      	blx	r7
 800d6a8:	3001      	adds	r0, #1
 800d6aa:	f43f ae38 	beq.w	800d31e <_printf_float+0xc2>
 800d6ae:	f108 0801 	add.w	r8, r8, #1
 800d6b2:	68e3      	ldr	r3, [r4, #12]
 800d6b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d6b6:	1a5b      	subs	r3, r3, r1
 800d6b8:	4543      	cmp	r3, r8
 800d6ba:	dcf0      	bgt.n	800d69e <_printf_float+0x442>
 800d6bc:	e6fa      	b.n	800d4b4 <_printf_float+0x258>
 800d6be:	f04f 0800 	mov.w	r8, #0
 800d6c2:	f104 0919 	add.w	r9, r4, #25
 800d6c6:	e7f4      	b.n	800d6b2 <_printf_float+0x456>

0800d6c8 <_printf_common>:
 800d6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6cc:	4616      	mov	r6, r2
 800d6ce:	4699      	mov	r9, r3
 800d6d0:	688a      	ldr	r2, [r1, #8]
 800d6d2:	690b      	ldr	r3, [r1, #16]
 800d6d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	bfb8      	it	lt
 800d6dc:	4613      	movlt	r3, r2
 800d6de:	6033      	str	r3, [r6, #0]
 800d6e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d6e4:	4607      	mov	r7, r0
 800d6e6:	460c      	mov	r4, r1
 800d6e8:	b10a      	cbz	r2, 800d6ee <_printf_common+0x26>
 800d6ea:	3301      	adds	r3, #1
 800d6ec:	6033      	str	r3, [r6, #0]
 800d6ee:	6823      	ldr	r3, [r4, #0]
 800d6f0:	0699      	lsls	r1, r3, #26
 800d6f2:	bf42      	ittt	mi
 800d6f4:	6833      	ldrmi	r3, [r6, #0]
 800d6f6:	3302      	addmi	r3, #2
 800d6f8:	6033      	strmi	r3, [r6, #0]
 800d6fa:	6825      	ldr	r5, [r4, #0]
 800d6fc:	f015 0506 	ands.w	r5, r5, #6
 800d700:	d106      	bne.n	800d710 <_printf_common+0x48>
 800d702:	f104 0a19 	add.w	sl, r4, #25
 800d706:	68e3      	ldr	r3, [r4, #12]
 800d708:	6832      	ldr	r2, [r6, #0]
 800d70a:	1a9b      	subs	r3, r3, r2
 800d70c:	42ab      	cmp	r3, r5
 800d70e:	dc26      	bgt.n	800d75e <_printf_common+0x96>
 800d710:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d714:	1e13      	subs	r3, r2, #0
 800d716:	6822      	ldr	r2, [r4, #0]
 800d718:	bf18      	it	ne
 800d71a:	2301      	movne	r3, #1
 800d71c:	0692      	lsls	r2, r2, #26
 800d71e:	d42b      	bmi.n	800d778 <_printf_common+0xb0>
 800d720:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d724:	4649      	mov	r1, r9
 800d726:	4638      	mov	r0, r7
 800d728:	47c0      	blx	r8
 800d72a:	3001      	adds	r0, #1
 800d72c:	d01e      	beq.n	800d76c <_printf_common+0xa4>
 800d72e:	6823      	ldr	r3, [r4, #0]
 800d730:	68e5      	ldr	r5, [r4, #12]
 800d732:	6832      	ldr	r2, [r6, #0]
 800d734:	f003 0306 	and.w	r3, r3, #6
 800d738:	2b04      	cmp	r3, #4
 800d73a:	bf08      	it	eq
 800d73c:	1aad      	subeq	r5, r5, r2
 800d73e:	68a3      	ldr	r3, [r4, #8]
 800d740:	6922      	ldr	r2, [r4, #16]
 800d742:	bf0c      	ite	eq
 800d744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d748:	2500      	movne	r5, #0
 800d74a:	4293      	cmp	r3, r2
 800d74c:	bfc4      	itt	gt
 800d74e:	1a9b      	subgt	r3, r3, r2
 800d750:	18ed      	addgt	r5, r5, r3
 800d752:	2600      	movs	r6, #0
 800d754:	341a      	adds	r4, #26
 800d756:	42b5      	cmp	r5, r6
 800d758:	d11a      	bne.n	800d790 <_printf_common+0xc8>
 800d75a:	2000      	movs	r0, #0
 800d75c:	e008      	b.n	800d770 <_printf_common+0xa8>
 800d75e:	2301      	movs	r3, #1
 800d760:	4652      	mov	r2, sl
 800d762:	4649      	mov	r1, r9
 800d764:	4638      	mov	r0, r7
 800d766:	47c0      	blx	r8
 800d768:	3001      	adds	r0, #1
 800d76a:	d103      	bne.n	800d774 <_printf_common+0xac>
 800d76c:	f04f 30ff 	mov.w	r0, #4294967295
 800d770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d774:	3501      	adds	r5, #1
 800d776:	e7c6      	b.n	800d706 <_printf_common+0x3e>
 800d778:	18e1      	adds	r1, r4, r3
 800d77a:	1c5a      	adds	r2, r3, #1
 800d77c:	2030      	movs	r0, #48	; 0x30
 800d77e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d782:	4422      	add	r2, r4
 800d784:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d788:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d78c:	3302      	adds	r3, #2
 800d78e:	e7c7      	b.n	800d720 <_printf_common+0x58>
 800d790:	2301      	movs	r3, #1
 800d792:	4622      	mov	r2, r4
 800d794:	4649      	mov	r1, r9
 800d796:	4638      	mov	r0, r7
 800d798:	47c0      	blx	r8
 800d79a:	3001      	adds	r0, #1
 800d79c:	d0e6      	beq.n	800d76c <_printf_common+0xa4>
 800d79e:	3601      	adds	r6, #1
 800d7a0:	e7d9      	b.n	800d756 <_printf_common+0x8e>
	...

0800d7a4 <_printf_i>:
 800d7a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7a8:	7e0f      	ldrb	r7, [r1, #24]
 800d7aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d7ac:	2f78      	cmp	r7, #120	; 0x78
 800d7ae:	4691      	mov	r9, r2
 800d7b0:	4680      	mov	r8, r0
 800d7b2:	460c      	mov	r4, r1
 800d7b4:	469a      	mov	sl, r3
 800d7b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d7ba:	d807      	bhi.n	800d7cc <_printf_i+0x28>
 800d7bc:	2f62      	cmp	r7, #98	; 0x62
 800d7be:	d80a      	bhi.n	800d7d6 <_printf_i+0x32>
 800d7c0:	2f00      	cmp	r7, #0
 800d7c2:	f000 80d8 	beq.w	800d976 <_printf_i+0x1d2>
 800d7c6:	2f58      	cmp	r7, #88	; 0x58
 800d7c8:	f000 80a3 	beq.w	800d912 <_printf_i+0x16e>
 800d7cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d7d4:	e03a      	b.n	800d84c <_printf_i+0xa8>
 800d7d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d7da:	2b15      	cmp	r3, #21
 800d7dc:	d8f6      	bhi.n	800d7cc <_printf_i+0x28>
 800d7de:	a101      	add	r1, pc, #4	; (adr r1, 800d7e4 <_printf_i+0x40>)
 800d7e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d7e4:	0800d83d 	.word	0x0800d83d
 800d7e8:	0800d851 	.word	0x0800d851
 800d7ec:	0800d7cd 	.word	0x0800d7cd
 800d7f0:	0800d7cd 	.word	0x0800d7cd
 800d7f4:	0800d7cd 	.word	0x0800d7cd
 800d7f8:	0800d7cd 	.word	0x0800d7cd
 800d7fc:	0800d851 	.word	0x0800d851
 800d800:	0800d7cd 	.word	0x0800d7cd
 800d804:	0800d7cd 	.word	0x0800d7cd
 800d808:	0800d7cd 	.word	0x0800d7cd
 800d80c:	0800d7cd 	.word	0x0800d7cd
 800d810:	0800d95d 	.word	0x0800d95d
 800d814:	0800d881 	.word	0x0800d881
 800d818:	0800d93f 	.word	0x0800d93f
 800d81c:	0800d7cd 	.word	0x0800d7cd
 800d820:	0800d7cd 	.word	0x0800d7cd
 800d824:	0800d97f 	.word	0x0800d97f
 800d828:	0800d7cd 	.word	0x0800d7cd
 800d82c:	0800d881 	.word	0x0800d881
 800d830:	0800d7cd 	.word	0x0800d7cd
 800d834:	0800d7cd 	.word	0x0800d7cd
 800d838:	0800d947 	.word	0x0800d947
 800d83c:	682b      	ldr	r3, [r5, #0]
 800d83e:	1d1a      	adds	r2, r3, #4
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	602a      	str	r2, [r5, #0]
 800d844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d848:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d84c:	2301      	movs	r3, #1
 800d84e:	e0a3      	b.n	800d998 <_printf_i+0x1f4>
 800d850:	6820      	ldr	r0, [r4, #0]
 800d852:	6829      	ldr	r1, [r5, #0]
 800d854:	0606      	lsls	r6, r0, #24
 800d856:	f101 0304 	add.w	r3, r1, #4
 800d85a:	d50a      	bpl.n	800d872 <_printf_i+0xce>
 800d85c:	680e      	ldr	r6, [r1, #0]
 800d85e:	602b      	str	r3, [r5, #0]
 800d860:	2e00      	cmp	r6, #0
 800d862:	da03      	bge.n	800d86c <_printf_i+0xc8>
 800d864:	232d      	movs	r3, #45	; 0x2d
 800d866:	4276      	negs	r6, r6
 800d868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d86c:	485e      	ldr	r0, [pc, #376]	; (800d9e8 <_printf_i+0x244>)
 800d86e:	230a      	movs	r3, #10
 800d870:	e019      	b.n	800d8a6 <_printf_i+0x102>
 800d872:	680e      	ldr	r6, [r1, #0]
 800d874:	602b      	str	r3, [r5, #0]
 800d876:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d87a:	bf18      	it	ne
 800d87c:	b236      	sxthne	r6, r6
 800d87e:	e7ef      	b.n	800d860 <_printf_i+0xbc>
 800d880:	682b      	ldr	r3, [r5, #0]
 800d882:	6820      	ldr	r0, [r4, #0]
 800d884:	1d19      	adds	r1, r3, #4
 800d886:	6029      	str	r1, [r5, #0]
 800d888:	0601      	lsls	r1, r0, #24
 800d88a:	d501      	bpl.n	800d890 <_printf_i+0xec>
 800d88c:	681e      	ldr	r6, [r3, #0]
 800d88e:	e002      	b.n	800d896 <_printf_i+0xf2>
 800d890:	0646      	lsls	r6, r0, #25
 800d892:	d5fb      	bpl.n	800d88c <_printf_i+0xe8>
 800d894:	881e      	ldrh	r6, [r3, #0]
 800d896:	4854      	ldr	r0, [pc, #336]	; (800d9e8 <_printf_i+0x244>)
 800d898:	2f6f      	cmp	r7, #111	; 0x6f
 800d89a:	bf0c      	ite	eq
 800d89c:	2308      	moveq	r3, #8
 800d89e:	230a      	movne	r3, #10
 800d8a0:	2100      	movs	r1, #0
 800d8a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d8a6:	6865      	ldr	r5, [r4, #4]
 800d8a8:	60a5      	str	r5, [r4, #8]
 800d8aa:	2d00      	cmp	r5, #0
 800d8ac:	bfa2      	ittt	ge
 800d8ae:	6821      	ldrge	r1, [r4, #0]
 800d8b0:	f021 0104 	bicge.w	r1, r1, #4
 800d8b4:	6021      	strge	r1, [r4, #0]
 800d8b6:	b90e      	cbnz	r6, 800d8bc <_printf_i+0x118>
 800d8b8:	2d00      	cmp	r5, #0
 800d8ba:	d04d      	beq.n	800d958 <_printf_i+0x1b4>
 800d8bc:	4615      	mov	r5, r2
 800d8be:	fbb6 f1f3 	udiv	r1, r6, r3
 800d8c2:	fb03 6711 	mls	r7, r3, r1, r6
 800d8c6:	5dc7      	ldrb	r7, [r0, r7]
 800d8c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d8cc:	4637      	mov	r7, r6
 800d8ce:	42bb      	cmp	r3, r7
 800d8d0:	460e      	mov	r6, r1
 800d8d2:	d9f4      	bls.n	800d8be <_printf_i+0x11a>
 800d8d4:	2b08      	cmp	r3, #8
 800d8d6:	d10b      	bne.n	800d8f0 <_printf_i+0x14c>
 800d8d8:	6823      	ldr	r3, [r4, #0]
 800d8da:	07de      	lsls	r6, r3, #31
 800d8dc:	d508      	bpl.n	800d8f0 <_printf_i+0x14c>
 800d8de:	6923      	ldr	r3, [r4, #16]
 800d8e0:	6861      	ldr	r1, [r4, #4]
 800d8e2:	4299      	cmp	r1, r3
 800d8e4:	bfde      	ittt	le
 800d8e6:	2330      	movle	r3, #48	; 0x30
 800d8e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d8ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d8f0:	1b52      	subs	r2, r2, r5
 800d8f2:	6122      	str	r2, [r4, #16]
 800d8f4:	f8cd a000 	str.w	sl, [sp]
 800d8f8:	464b      	mov	r3, r9
 800d8fa:	aa03      	add	r2, sp, #12
 800d8fc:	4621      	mov	r1, r4
 800d8fe:	4640      	mov	r0, r8
 800d900:	f7ff fee2 	bl	800d6c8 <_printf_common>
 800d904:	3001      	adds	r0, #1
 800d906:	d14c      	bne.n	800d9a2 <_printf_i+0x1fe>
 800d908:	f04f 30ff 	mov.w	r0, #4294967295
 800d90c:	b004      	add	sp, #16
 800d90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d912:	4835      	ldr	r0, [pc, #212]	; (800d9e8 <_printf_i+0x244>)
 800d914:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d918:	6829      	ldr	r1, [r5, #0]
 800d91a:	6823      	ldr	r3, [r4, #0]
 800d91c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d920:	6029      	str	r1, [r5, #0]
 800d922:	061d      	lsls	r5, r3, #24
 800d924:	d514      	bpl.n	800d950 <_printf_i+0x1ac>
 800d926:	07df      	lsls	r7, r3, #31
 800d928:	bf44      	itt	mi
 800d92a:	f043 0320 	orrmi.w	r3, r3, #32
 800d92e:	6023      	strmi	r3, [r4, #0]
 800d930:	b91e      	cbnz	r6, 800d93a <_printf_i+0x196>
 800d932:	6823      	ldr	r3, [r4, #0]
 800d934:	f023 0320 	bic.w	r3, r3, #32
 800d938:	6023      	str	r3, [r4, #0]
 800d93a:	2310      	movs	r3, #16
 800d93c:	e7b0      	b.n	800d8a0 <_printf_i+0xfc>
 800d93e:	6823      	ldr	r3, [r4, #0]
 800d940:	f043 0320 	orr.w	r3, r3, #32
 800d944:	6023      	str	r3, [r4, #0]
 800d946:	2378      	movs	r3, #120	; 0x78
 800d948:	4828      	ldr	r0, [pc, #160]	; (800d9ec <_printf_i+0x248>)
 800d94a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d94e:	e7e3      	b.n	800d918 <_printf_i+0x174>
 800d950:	0659      	lsls	r1, r3, #25
 800d952:	bf48      	it	mi
 800d954:	b2b6      	uxthmi	r6, r6
 800d956:	e7e6      	b.n	800d926 <_printf_i+0x182>
 800d958:	4615      	mov	r5, r2
 800d95a:	e7bb      	b.n	800d8d4 <_printf_i+0x130>
 800d95c:	682b      	ldr	r3, [r5, #0]
 800d95e:	6826      	ldr	r6, [r4, #0]
 800d960:	6961      	ldr	r1, [r4, #20]
 800d962:	1d18      	adds	r0, r3, #4
 800d964:	6028      	str	r0, [r5, #0]
 800d966:	0635      	lsls	r5, r6, #24
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	d501      	bpl.n	800d970 <_printf_i+0x1cc>
 800d96c:	6019      	str	r1, [r3, #0]
 800d96e:	e002      	b.n	800d976 <_printf_i+0x1d2>
 800d970:	0670      	lsls	r0, r6, #25
 800d972:	d5fb      	bpl.n	800d96c <_printf_i+0x1c8>
 800d974:	8019      	strh	r1, [r3, #0]
 800d976:	2300      	movs	r3, #0
 800d978:	6123      	str	r3, [r4, #16]
 800d97a:	4615      	mov	r5, r2
 800d97c:	e7ba      	b.n	800d8f4 <_printf_i+0x150>
 800d97e:	682b      	ldr	r3, [r5, #0]
 800d980:	1d1a      	adds	r2, r3, #4
 800d982:	602a      	str	r2, [r5, #0]
 800d984:	681d      	ldr	r5, [r3, #0]
 800d986:	6862      	ldr	r2, [r4, #4]
 800d988:	2100      	movs	r1, #0
 800d98a:	4628      	mov	r0, r5
 800d98c:	f7f2 fc30 	bl	80001f0 <memchr>
 800d990:	b108      	cbz	r0, 800d996 <_printf_i+0x1f2>
 800d992:	1b40      	subs	r0, r0, r5
 800d994:	6060      	str	r0, [r4, #4]
 800d996:	6863      	ldr	r3, [r4, #4]
 800d998:	6123      	str	r3, [r4, #16]
 800d99a:	2300      	movs	r3, #0
 800d99c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9a0:	e7a8      	b.n	800d8f4 <_printf_i+0x150>
 800d9a2:	6923      	ldr	r3, [r4, #16]
 800d9a4:	462a      	mov	r2, r5
 800d9a6:	4649      	mov	r1, r9
 800d9a8:	4640      	mov	r0, r8
 800d9aa:	47d0      	blx	sl
 800d9ac:	3001      	adds	r0, #1
 800d9ae:	d0ab      	beq.n	800d908 <_printf_i+0x164>
 800d9b0:	6823      	ldr	r3, [r4, #0]
 800d9b2:	079b      	lsls	r3, r3, #30
 800d9b4:	d413      	bmi.n	800d9de <_printf_i+0x23a>
 800d9b6:	68e0      	ldr	r0, [r4, #12]
 800d9b8:	9b03      	ldr	r3, [sp, #12]
 800d9ba:	4298      	cmp	r0, r3
 800d9bc:	bfb8      	it	lt
 800d9be:	4618      	movlt	r0, r3
 800d9c0:	e7a4      	b.n	800d90c <_printf_i+0x168>
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	4632      	mov	r2, r6
 800d9c6:	4649      	mov	r1, r9
 800d9c8:	4640      	mov	r0, r8
 800d9ca:	47d0      	blx	sl
 800d9cc:	3001      	adds	r0, #1
 800d9ce:	d09b      	beq.n	800d908 <_printf_i+0x164>
 800d9d0:	3501      	adds	r5, #1
 800d9d2:	68e3      	ldr	r3, [r4, #12]
 800d9d4:	9903      	ldr	r1, [sp, #12]
 800d9d6:	1a5b      	subs	r3, r3, r1
 800d9d8:	42ab      	cmp	r3, r5
 800d9da:	dcf2      	bgt.n	800d9c2 <_printf_i+0x21e>
 800d9dc:	e7eb      	b.n	800d9b6 <_printf_i+0x212>
 800d9de:	2500      	movs	r5, #0
 800d9e0:	f104 0619 	add.w	r6, r4, #25
 800d9e4:	e7f5      	b.n	800d9d2 <_printf_i+0x22e>
 800d9e6:	bf00      	nop
 800d9e8:	08011faa 	.word	0x08011faa
 800d9ec:	08011fbb 	.word	0x08011fbb

0800d9f0 <_scanf_float>:
 800d9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f4:	b087      	sub	sp, #28
 800d9f6:	4617      	mov	r7, r2
 800d9f8:	9303      	str	r3, [sp, #12]
 800d9fa:	688b      	ldr	r3, [r1, #8]
 800d9fc:	1e5a      	subs	r2, r3, #1
 800d9fe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800da02:	bf83      	ittte	hi
 800da04:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800da08:	195b      	addhi	r3, r3, r5
 800da0a:	9302      	strhi	r3, [sp, #8]
 800da0c:	2300      	movls	r3, #0
 800da0e:	bf86      	itte	hi
 800da10:	f240 135d 	movwhi	r3, #349	; 0x15d
 800da14:	608b      	strhi	r3, [r1, #8]
 800da16:	9302      	strls	r3, [sp, #8]
 800da18:	680b      	ldr	r3, [r1, #0]
 800da1a:	468b      	mov	fp, r1
 800da1c:	2500      	movs	r5, #0
 800da1e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800da22:	f84b 3b1c 	str.w	r3, [fp], #28
 800da26:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800da2a:	4680      	mov	r8, r0
 800da2c:	460c      	mov	r4, r1
 800da2e:	465e      	mov	r6, fp
 800da30:	46aa      	mov	sl, r5
 800da32:	46a9      	mov	r9, r5
 800da34:	9501      	str	r5, [sp, #4]
 800da36:	68a2      	ldr	r2, [r4, #8]
 800da38:	b152      	cbz	r2, 800da50 <_scanf_float+0x60>
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	2b4e      	cmp	r3, #78	; 0x4e
 800da40:	d864      	bhi.n	800db0c <_scanf_float+0x11c>
 800da42:	2b40      	cmp	r3, #64	; 0x40
 800da44:	d83c      	bhi.n	800dac0 <_scanf_float+0xd0>
 800da46:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800da4a:	b2c8      	uxtb	r0, r1
 800da4c:	280e      	cmp	r0, #14
 800da4e:	d93a      	bls.n	800dac6 <_scanf_float+0xd6>
 800da50:	f1b9 0f00 	cmp.w	r9, #0
 800da54:	d003      	beq.n	800da5e <_scanf_float+0x6e>
 800da56:	6823      	ldr	r3, [r4, #0]
 800da58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da5c:	6023      	str	r3, [r4, #0]
 800da5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da62:	f1ba 0f01 	cmp.w	sl, #1
 800da66:	f200 8113 	bhi.w	800dc90 <_scanf_float+0x2a0>
 800da6a:	455e      	cmp	r6, fp
 800da6c:	f200 8105 	bhi.w	800dc7a <_scanf_float+0x28a>
 800da70:	2501      	movs	r5, #1
 800da72:	4628      	mov	r0, r5
 800da74:	b007      	add	sp, #28
 800da76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da7a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800da7e:	2a0d      	cmp	r2, #13
 800da80:	d8e6      	bhi.n	800da50 <_scanf_float+0x60>
 800da82:	a101      	add	r1, pc, #4	; (adr r1, 800da88 <_scanf_float+0x98>)
 800da84:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800da88:	0800dbc7 	.word	0x0800dbc7
 800da8c:	0800da51 	.word	0x0800da51
 800da90:	0800da51 	.word	0x0800da51
 800da94:	0800da51 	.word	0x0800da51
 800da98:	0800dc27 	.word	0x0800dc27
 800da9c:	0800dbff 	.word	0x0800dbff
 800daa0:	0800da51 	.word	0x0800da51
 800daa4:	0800da51 	.word	0x0800da51
 800daa8:	0800dbd5 	.word	0x0800dbd5
 800daac:	0800da51 	.word	0x0800da51
 800dab0:	0800da51 	.word	0x0800da51
 800dab4:	0800da51 	.word	0x0800da51
 800dab8:	0800da51 	.word	0x0800da51
 800dabc:	0800db8d 	.word	0x0800db8d
 800dac0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800dac4:	e7db      	b.n	800da7e <_scanf_float+0x8e>
 800dac6:	290e      	cmp	r1, #14
 800dac8:	d8c2      	bhi.n	800da50 <_scanf_float+0x60>
 800daca:	a001      	add	r0, pc, #4	; (adr r0, 800dad0 <_scanf_float+0xe0>)
 800dacc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800dad0:	0800db7f 	.word	0x0800db7f
 800dad4:	0800da51 	.word	0x0800da51
 800dad8:	0800db7f 	.word	0x0800db7f
 800dadc:	0800dc13 	.word	0x0800dc13
 800dae0:	0800da51 	.word	0x0800da51
 800dae4:	0800db2d 	.word	0x0800db2d
 800dae8:	0800db69 	.word	0x0800db69
 800daec:	0800db69 	.word	0x0800db69
 800daf0:	0800db69 	.word	0x0800db69
 800daf4:	0800db69 	.word	0x0800db69
 800daf8:	0800db69 	.word	0x0800db69
 800dafc:	0800db69 	.word	0x0800db69
 800db00:	0800db69 	.word	0x0800db69
 800db04:	0800db69 	.word	0x0800db69
 800db08:	0800db69 	.word	0x0800db69
 800db0c:	2b6e      	cmp	r3, #110	; 0x6e
 800db0e:	d809      	bhi.n	800db24 <_scanf_float+0x134>
 800db10:	2b60      	cmp	r3, #96	; 0x60
 800db12:	d8b2      	bhi.n	800da7a <_scanf_float+0x8a>
 800db14:	2b54      	cmp	r3, #84	; 0x54
 800db16:	d077      	beq.n	800dc08 <_scanf_float+0x218>
 800db18:	2b59      	cmp	r3, #89	; 0x59
 800db1a:	d199      	bne.n	800da50 <_scanf_float+0x60>
 800db1c:	2d07      	cmp	r5, #7
 800db1e:	d197      	bne.n	800da50 <_scanf_float+0x60>
 800db20:	2508      	movs	r5, #8
 800db22:	e029      	b.n	800db78 <_scanf_float+0x188>
 800db24:	2b74      	cmp	r3, #116	; 0x74
 800db26:	d06f      	beq.n	800dc08 <_scanf_float+0x218>
 800db28:	2b79      	cmp	r3, #121	; 0x79
 800db2a:	e7f6      	b.n	800db1a <_scanf_float+0x12a>
 800db2c:	6821      	ldr	r1, [r4, #0]
 800db2e:	05c8      	lsls	r0, r1, #23
 800db30:	d51a      	bpl.n	800db68 <_scanf_float+0x178>
 800db32:	9b02      	ldr	r3, [sp, #8]
 800db34:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800db38:	6021      	str	r1, [r4, #0]
 800db3a:	f109 0901 	add.w	r9, r9, #1
 800db3e:	b11b      	cbz	r3, 800db48 <_scanf_float+0x158>
 800db40:	3b01      	subs	r3, #1
 800db42:	3201      	adds	r2, #1
 800db44:	9302      	str	r3, [sp, #8]
 800db46:	60a2      	str	r2, [r4, #8]
 800db48:	68a3      	ldr	r3, [r4, #8]
 800db4a:	3b01      	subs	r3, #1
 800db4c:	60a3      	str	r3, [r4, #8]
 800db4e:	6923      	ldr	r3, [r4, #16]
 800db50:	3301      	adds	r3, #1
 800db52:	6123      	str	r3, [r4, #16]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	3b01      	subs	r3, #1
 800db58:	2b00      	cmp	r3, #0
 800db5a:	607b      	str	r3, [r7, #4]
 800db5c:	f340 8084 	ble.w	800dc68 <_scanf_float+0x278>
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	3301      	adds	r3, #1
 800db64:	603b      	str	r3, [r7, #0]
 800db66:	e766      	b.n	800da36 <_scanf_float+0x46>
 800db68:	eb1a 0f05 	cmn.w	sl, r5
 800db6c:	f47f af70 	bne.w	800da50 <_scanf_float+0x60>
 800db70:	6822      	ldr	r2, [r4, #0]
 800db72:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800db76:	6022      	str	r2, [r4, #0]
 800db78:	f806 3b01 	strb.w	r3, [r6], #1
 800db7c:	e7e4      	b.n	800db48 <_scanf_float+0x158>
 800db7e:	6822      	ldr	r2, [r4, #0]
 800db80:	0610      	lsls	r0, r2, #24
 800db82:	f57f af65 	bpl.w	800da50 <_scanf_float+0x60>
 800db86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800db8a:	e7f4      	b.n	800db76 <_scanf_float+0x186>
 800db8c:	f1ba 0f00 	cmp.w	sl, #0
 800db90:	d10e      	bne.n	800dbb0 <_scanf_float+0x1c0>
 800db92:	f1b9 0f00 	cmp.w	r9, #0
 800db96:	d10e      	bne.n	800dbb6 <_scanf_float+0x1c6>
 800db98:	6822      	ldr	r2, [r4, #0]
 800db9a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800db9e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dba2:	d108      	bne.n	800dbb6 <_scanf_float+0x1c6>
 800dba4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dba8:	6022      	str	r2, [r4, #0]
 800dbaa:	f04f 0a01 	mov.w	sl, #1
 800dbae:	e7e3      	b.n	800db78 <_scanf_float+0x188>
 800dbb0:	f1ba 0f02 	cmp.w	sl, #2
 800dbb4:	d055      	beq.n	800dc62 <_scanf_float+0x272>
 800dbb6:	2d01      	cmp	r5, #1
 800dbb8:	d002      	beq.n	800dbc0 <_scanf_float+0x1d0>
 800dbba:	2d04      	cmp	r5, #4
 800dbbc:	f47f af48 	bne.w	800da50 <_scanf_float+0x60>
 800dbc0:	3501      	adds	r5, #1
 800dbc2:	b2ed      	uxtb	r5, r5
 800dbc4:	e7d8      	b.n	800db78 <_scanf_float+0x188>
 800dbc6:	f1ba 0f01 	cmp.w	sl, #1
 800dbca:	f47f af41 	bne.w	800da50 <_scanf_float+0x60>
 800dbce:	f04f 0a02 	mov.w	sl, #2
 800dbd2:	e7d1      	b.n	800db78 <_scanf_float+0x188>
 800dbd4:	b97d      	cbnz	r5, 800dbf6 <_scanf_float+0x206>
 800dbd6:	f1b9 0f00 	cmp.w	r9, #0
 800dbda:	f47f af3c 	bne.w	800da56 <_scanf_float+0x66>
 800dbde:	6822      	ldr	r2, [r4, #0]
 800dbe0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dbe4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dbe8:	f47f af39 	bne.w	800da5e <_scanf_float+0x6e>
 800dbec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dbf0:	6022      	str	r2, [r4, #0]
 800dbf2:	2501      	movs	r5, #1
 800dbf4:	e7c0      	b.n	800db78 <_scanf_float+0x188>
 800dbf6:	2d03      	cmp	r5, #3
 800dbf8:	d0e2      	beq.n	800dbc0 <_scanf_float+0x1d0>
 800dbfa:	2d05      	cmp	r5, #5
 800dbfc:	e7de      	b.n	800dbbc <_scanf_float+0x1cc>
 800dbfe:	2d02      	cmp	r5, #2
 800dc00:	f47f af26 	bne.w	800da50 <_scanf_float+0x60>
 800dc04:	2503      	movs	r5, #3
 800dc06:	e7b7      	b.n	800db78 <_scanf_float+0x188>
 800dc08:	2d06      	cmp	r5, #6
 800dc0a:	f47f af21 	bne.w	800da50 <_scanf_float+0x60>
 800dc0e:	2507      	movs	r5, #7
 800dc10:	e7b2      	b.n	800db78 <_scanf_float+0x188>
 800dc12:	6822      	ldr	r2, [r4, #0]
 800dc14:	0591      	lsls	r1, r2, #22
 800dc16:	f57f af1b 	bpl.w	800da50 <_scanf_float+0x60>
 800dc1a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800dc1e:	6022      	str	r2, [r4, #0]
 800dc20:	f8cd 9004 	str.w	r9, [sp, #4]
 800dc24:	e7a8      	b.n	800db78 <_scanf_float+0x188>
 800dc26:	6822      	ldr	r2, [r4, #0]
 800dc28:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800dc2c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800dc30:	d006      	beq.n	800dc40 <_scanf_float+0x250>
 800dc32:	0550      	lsls	r0, r2, #21
 800dc34:	f57f af0c 	bpl.w	800da50 <_scanf_float+0x60>
 800dc38:	f1b9 0f00 	cmp.w	r9, #0
 800dc3c:	f43f af0f 	beq.w	800da5e <_scanf_float+0x6e>
 800dc40:	0591      	lsls	r1, r2, #22
 800dc42:	bf58      	it	pl
 800dc44:	9901      	ldrpl	r1, [sp, #4]
 800dc46:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dc4a:	bf58      	it	pl
 800dc4c:	eba9 0101 	subpl.w	r1, r9, r1
 800dc50:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800dc54:	bf58      	it	pl
 800dc56:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800dc5a:	6022      	str	r2, [r4, #0]
 800dc5c:	f04f 0900 	mov.w	r9, #0
 800dc60:	e78a      	b.n	800db78 <_scanf_float+0x188>
 800dc62:	f04f 0a03 	mov.w	sl, #3
 800dc66:	e787      	b.n	800db78 <_scanf_float+0x188>
 800dc68:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dc6c:	4639      	mov	r1, r7
 800dc6e:	4640      	mov	r0, r8
 800dc70:	4798      	blx	r3
 800dc72:	2800      	cmp	r0, #0
 800dc74:	f43f aedf 	beq.w	800da36 <_scanf_float+0x46>
 800dc78:	e6ea      	b.n	800da50 <_scanf_float+0x60>
 800dc7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dc7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dc82:	463a      	mov	r2, r7
 800dc84:	4640      	mov	r0, r8
 800dc86:	4798      	blx	r3
 800dc88:	6923      	ldr	r3, [r4, #16]
 800dc8a:	3b01      	subs	r3, #1
 800dc8c:	6123      	str	r3, [r4, #16]
 800dc8e:	e6ec      	b.n	800da6a <_scanf_float+0x7a>
 800dc90:	1e6b      	subs	r3, r5, #1
 800dc92:	2b06      	cmp	r3, #6
 800dc94:	d825      	bhi.n	800dce2 <_scanf_float+0x2f2>
 800dc96:	2d02      	cmp	r5, #2
 800dc98:	d836      	bhi.n	800dd08 <_scanf_float+0x318>
 800dc9a:	455e      	cmp	r6, fp
 800dc9c:	f67f aee8 	bls.w	800da70 <_scanf_float+0x80>
 800dca0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dca4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dca8:	463a      	mov	r2, r7
 800dcaa:	4640      	mov	r0, r8
 800dcac:	4798      	blx	r3
 800dcae:	6923      	ldr	r3, [r4, #16]
 800dcb0:	3b01      	subs	r3, #1
 800dcb2:	6123      	str	r3, [r4, #16]
 800dcb4:	e7f1      	b.n	800dc9a <_scanf_float+0x2aa>
 800dcb6:	9802      	ldr	r0, [sp, #8]
 800dcb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dcbc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800dcc0:	9002      	str	r0, [sp, #8]
 800dcc2:	463a      	mov	r2, r7
 800dcc4:	4640      	mov	r0, r8
 800dcc6:	4798      	blx	r3
 800dcc8:	6923      	ldr	r3, [r4, #16]
 800dcca:	3b01      	subs	r3, #1
 800dccc:	6123      	str	r3, [r4, #16]
 800dcce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dcd2:	fa5f fa8a 	uxtb.w	sl, sl
 800dcd6:	f1ba 0f02 	cmp.w	sl, #2
 800dcda:	d1ec      	bne.n	800dcb6 <_scanf_float+0x2c6>
 800dcdc:	3d03      	subs	r5, #3
 800dcde:	b2ed      	uxtb	r5, r5
 800dce0:	1b76      	subs	r6, r6, r5
 800dce2:	6823      	ldr	r3, [r4, #0]
 800dce4:	05da      	lsls	r2, r3, #23
 800dce6:	d52f      	bpl.n	800dd48 <_scanf_float+0x358>
 800dce8:	055b      	lsls	r3, r3, #21
 800dcea:	d510      	bpl.n	800dd0e <_scanf_float+0x31e>
 800dcec:	455e      	cmp	r6, fp
 800dcee:	f67f aebf 	bls.w	800da70 <_scanf_float+0x80>
 800dcf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dcf6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dcfa:	463a      	mov	r2, r7
 800dcfc:	4640      	mov	r0, r8
 800dcfe:	4798      	blx	r3
 800dd00:	6923      	ldr	r3, [r4, #16]
 800dd02:	3b01      	subs	r3, #1
 800dd04:	6123      	str	r3, [r4, #16]
 800dd06:	e7f1      	b.n	800dcec <_scanf_float+0x2fc>
 800dd08:	46aa      	mov	sl, r5
 800dd0a:	9602      	str	r6, [sp, #8]
 800dd0c:	e7df      	b.n	800dcce <_scanf_float+0x2de>
 800dd0e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800dd12:	6923      	ldr	r3, [r4, #16]
 800dd14:	2965      	cmp	r1, #101	; 0x65
 800dd16:	f103 33ff 	add.w	r3, r3, #4294967295
 800dd1a:	f106 35ff 	add.w	r5, r6, #4294967295
 800dd1e:	6123      	str	r3, [r4, #16]
 800dd20:	d00c      	beq.n	800dd3c <_scanf_float+0x34c>
 800dd22:	2945      	cmp	r1, #69	; 0x45
 800dd24:	d00a      	beq.n	800dd3c <_scanf_float+0x34c>
 800dd26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dd2a:	463a      	mov	r2, r7
 800dd2c:	4640      	mov	r0, r8
 800dd2e:	4798      	blx	r3
 800dd30:	6923      	ldr	r3, [r4, #16]
 800dd32:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800dd36:	3b01      	subs	r3, #1
 800dd38:	1eb5      	subs	r5, r6, #2
 800dd3a:	6123      	str	r3, [r4, #16]
 800dd3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dd40:	463a      	mov	r2, r7
 800dd42:	4640      	mov	r0, r8
 800dd44:	4798      	blx	r3
 800dd46:	462e      	mov	r6, r5
 800dd48:	6825      	ldr	r5, [r4, #0]
 800dd4a:	f015 0510 	ands.w	r5, r5, #16
 800dd4e:	d159      	bne.n	800de04 <_scanf_float+0x414>
 800dd50:	7035      	strb	r5, [r6, #0]
 800dd52:	6823      	ldr	r3, [r4, #0]
 800dd54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800dd58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd5c:	d11b      	bne.n	800dd96 <_scanf_float+0x3a6>
 800dd5e:	9b01      	ldr	r3, [sp, #4]
 800dd60:	454b      	cmp	r3, r9
 800dd62:	eba3 0209 	sub.w	r2, r3, r9
 800dd66:	d123      	bne.n	800ddb0 <_scanf_float+0x3c0>
 800dd68:	2200      	movs	r2, #0
 800dd6a:	4659      	mov	r1, fp
 800dd6c:	4640      	mov	r0, r8
 800dd6e:	f000 fea1 	bl	800eab4 <_strtod_r>
 800dd72:	6822      	ldr	r2, [r4, #0]
 800dd74:	9b03      	ldr	r3, [sp, #12]
 800dd76:	f012 0f02 	tst.w	r2, #2
 800dd7a:	ec57 6b10 	vmov	r6, r7, d0
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	d021      	beq.n	800ddc6 <_scanf_float+0x3d6>
 800dd82:	9903      	ldr	r1, [sp, #12]
 800dd84:	1d1a      	adds	r2, r3, #4
 800dd86:	600a      	str	r2, [r1, #0]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	e9c3 6700 	strd	r6, r7, [r3]
 800dd8e:	68e3      	ldr	r3, [r4, #12]
 800dd90:	3301      	adds	r3, #1
 800dd92:	60e3      	str	r3, [r4, #12]
 800dd94:	e66d      	b.n	800da72 <_scanf_float+0x82>
 800dd96:	9b04      	ldr	r3, [sp, #16]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d0e5      	beq.n	800dd68 <_scanf_float+0x378>
 800dd9c:	9905      	ldr	r1, [sp, #20]
 800dd9e:	230a      	movs	r3, #10
 800dda0:	462a      	mov	r2, r5
 800dda2:	3101      	adds	r1, #1
 800dda4:	4640      	mov	r0, r8
 800dda6:	f000 ff0d 	bl	800ebc4 <_strtol_r>
 800ddaa:	9b04      	ldr	r3, [sp, #16]
 800ddac:	9e05      	ldr	r6, [sp, #20]
 800ddae:	1ac2      	subs	r2, r0, r3
 800ddb0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ddb4:	429e      	cmp	r6, r3
 800ddb6:	bf28      	it	cs
 800ddb8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ddbc:	4912      	ldr	r1, [pc, #72]	; (800de08 <_scanf_float+0x418>)
 800ddbe:	4630      	mov	r0, r6
 800ddc0:	f000 f82c 	bl	800de1c <siprintf>
 800ddc4:	e7d0      	b.n	800dd68 <_scanf_float+0x378>
 800ddc6:	9903      	ldr	r1, [sp, #12]
 800ddc8:	f012 0f04 	tst.w	r2, #4
 800ddcc:	f103 0204 	add.w	r2, r3, #4
 800ddd0:	600a      	str	r2, [r1, #0]
 800ddd2:	d1d9      	bne.n	800dd88 <_scanf_float+0x398>
 800ddd4:	f8d3 8000 	ldr.w	r8, [r3]
 800ddd8:	ee10 2a10 	vmov	r2, s0
 800dddc:	ee10 0a10 	vmov	r0, s0
 800dde0:	463b      	mov	r3, r7
 800dde2:	4639      	mov	r1, r7
 800dde4:	f7f2 feaa 	bl	8000b3c <__aeabi_dcmpun>
 800dde8:	b128      	cbz	r0, 800ddf6 <_scanf_float+0x406>
 800ddea:	4808      	ldr	r0, [pc, #32]	; (800de0c <_scanf_float+0x41c>)
 800ddec:	f000 f810 	bl	800de10 <nanf>
 800ddf0:	ed88 0a00 	vstr	s0, [r8]
 800ddf4:	e7cb      	b.n	800dd8e <_scanf_float+0x39e>
 800ddf6:	4630      	mov	r0, r6
 800ddf8:	4639      	mov	r1, r7
 800ddfa:	f7f2 fefd 	bl	8000bf8 <__aeabi_d2f>
 800ddfe:	f8c8 0000 	str.w	r0, [r8]
 800de02:	e7c4      	b.n	800dd8e <_scanf_float+0x39e>
 800de04:	2500      	movs	r5, #0
 800de06:	e634      	b.n	800da72 <_scanf_float+0x82>
 800de08:	08011fcc 	.word	0x08011fcc
 800de0c:	080123d8 	.word	0x080123d8

0800de10 <nanf>:
 800de10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800de18 <nanf+0x8>
 800de14:	4770      	bx	lr
 800de16:	bf00      	nop
 800de18:	7fc00000 	.word	0x7fc00000

0800de1c <siprintf>:
 800de1c:	b40e      	push	{r1, r2, r3}
 800de1e:	b500      	push	{lr}
 800de20:	b09c      	sub	sp, #112	; 0x70
 800de22:	ab1d      	add	r3, sp, #116	; 0x74
 800de24:	9002      	str	r0, [sp, #8]
 800de26:	9006      	str	r0, [sp, #24]
 800de28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800de2c:	4809      	ldr	r0, [pc, #36]	; (800de54 <siprintf+0x38>)
 800de2e:	9107      	str	r1, [sp, #28]
 800de30:	9104      	str	r1, [sp, #16]
 800de32:	4909      	ldr	r1, [pc, #36]	; (800de58 <siprintf+0x3c>)
 800de34:	f853 2b04 	ldr.w	r2, [r3], #4
 800de38:	9105      	str	r1, [sp, #20]
 800de3a:	6800      	ldr	r0, [r0, #0]
 800de3c:	9301      	str	r3, [sp, #4]
 800de3e:	a902      	add	r1, sp, #8
 800de40:	f002 fede 	bl	8010c00 <_svfiprintf_r>
 800de44:	9b02      	ldr	r3, [sp, #8]
 800de46:	2200      	movs	r2, #0
 800de48:	701a      	strb	r2, [r3, #0]
 800de4a:	b01c      	add	sp, #112	; 0x70
 800de4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800de50:	b003      	add	sp, #12
 800de52:	4770      	bx	lr
 800de54:	200002d4 	.word	0x200002d4
 800de58:	ffff0208 	.word	0xffff0208

0800de5c <strcpy>:
 800de5c:	4603      	mov	r3, r0
 800de5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de62:	f803 2b01 	strb.w	r2, [r3], #1
 800de66:	2a00      	cmp	r2, #0
 800de68:	d1f9      	bne.n	800de5e <strcpy+0x2>
 800de6a:	4770      	bx	lr

0800de6c <sulp>:
 800de6c:	b570      	push	{r4, r5, r6, lr}
 800de6e:	4604      	mov	r4, r0
 800de70:	460d      	mov	r5, r1
 800de72:	ec45 4b10 	vmov	d0, r4, r5
 800de76:	4616      	mov	r6, r2
 800de78:	f002 fc20 	bl	80106bc <__ulp>
 800de7c:	ec51 0b10 	vmov	r0, r1, d0
 800de80:	b17e      	cbz	r6, 800dea2 <sulp+0x36>
 800de82:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800de86:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	dd09      	ble.n	800dea2 <sulp+0x36>
 800de8e:	051b      	lsls	r3, r3, #20
 800de90:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800de94:	2400      	movs	r4, #0
 800de96:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800de9a:	4622      	mov	r2, r4
 800de9c:	462b      	mov	r3, r5
 800de9e:	f7f2 fbb3 	bl	8000608 <__aeabi_dmul>
 800dea2:	bd70      	pop	{r4, r5, r6, pc}
 800dea4:	0000      	movs	r0, r0
	...

0800dea8 <_strtod_l>:
 800dea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deac:	ed2d 8b02 	vpush	{d8}
 800deb0:	b09d      	sub	sp, #116	; 0x74
 800deb2:	461f      	mov	r7, r3
 800deb4:	2300      	movs	r3, #0
 800deb6:	9318      	str	r3, [sp, #96]	; 0x60
 800deb8:	4ba2      	ldr	r3, [pc, #648]	; (800e144 <_strtod_l+0x29c>)
 800deba:	9213      	str	r2, [sp, #76]	; 0x4c
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	9305      	str	r3, [sp, #20]
 800dec0:	4604      	mov	r4, r0
 800dec2:	4618      	mov	r0, r3
 800dec4:	4688      	mov	r8, r1
 800dec6:	f7f2 f98b 	bl	80001e0 <strlen>
 800deca:	f04f 0a00 	mov.w	sl, #0
 800dece:	4605      	mov	r5, r0
 800ded0:	f04f 0b00 	mov.w	fp, #0
 800ded4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ded8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800deda:	781a      	ldrb	r2, [r3, #0]
 800dedc:	2a2b      	cmp	r2, #43	; 0x2b
 800dede:	d04e      	beq.n	800df7e <_strtod_l+0xd6>
 800dee0:	d83b      	bhi.n	800df5a <_strtod_l+0xb2>
 800dee2:	2a0d      	cmp	r2, #13
 800dee4:	d834      	bhi.n	800df50 <_strtod_l+0xa8>
 800dee6:	2a08      	cmp	r2, #8
 800dee8:	d834      	bhi.n	800df54 <_strtod_l+0xac>
 800deea:	2a00      	cmp	r2, #0
 800deec:	d03e      	beq.n	800df6c <_strtod_l+0xc4>
 800deee:	2300      	movs	r3, #0
 800def0:	930a      	str	r3, [sp, #40]	; 0x28
 800def2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800def4:	7833      	ldrb	r3, [r6, #0]
 800def6:	2b30      	cmp	r3, #48	; 0x30
 800def8:	f040 80b0 	bne.w	800e05c <_strtod_l+0x1b4>
 800defc:	7873      	ldrb	r3, [r6, #1]
 800defe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800df02:	2b58      	cmp	r3, #88	; 0x58
 800df04:	d168      	bne.n	800dfd8 <_strtod_l+0x130>
 800df06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df08:	9301      	str	r3, [sp, #4]
 800df0a:	ab18      	add	r3, sp, #96	; 0x60
 800df0c:	9702      	str	r7, [sp, #8]
 800df0e:	9300      	str	r3, [sp, #0]
 800df10:	4a8d      	ldr	r2, [pc, #564]	; (800e148 <_strtod_l+0x2a0>)
 800df12:	ab19      	add	r3, sp, #100	; 0x64
 800df14:	a917      	add	r1, sp, #92	; 0x5c
 800df16:	4620      	mov	r0, r4
 800df18:	f001 fd38 	bl	800f98c <__gethex>
 800df1c:	f010 0707 	ands.w	r7, r0, #7
 800df20:	4605      	mov	r5, r0
 800df22:	d005      	beq.n	800df30 <_strtod_l+0x88>
 800df24:	2f06      	cmp	r7, #6
 800df26:	d12c      	bne.n	800df82 <_strtod_l+0xda>
 800df28:	3601      	adds	r6, #1
 800df2a:	2300      	movs	r3, #0
 800df2c:	9617      	str	r6, [sp, #92]	; 0x5c
 800df2e:	930a      	str	r3, [sp, #40]	; 0x28
 800df30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800df32:	2b00      	cmp	r3, #0
 800df34:	f040 8590 	bne.w	800ea58 <_strtod_l+0xbb0>
 800df38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df3a:	b1eb      	cbz	r3, 800df78 <_strtod_l+0xd0>
 800df3c:	4652      	mov	r2, sl
 800df3e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800df42:	ec43 2b10 	vmov	d0, r2, r3
 800df46:	b01d      	add	sp, #116	; 0x74
 800df48:	ecbd 8b02 	vpop	{d8}
 800df4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df50:	2a20      	cmp	r2, #32
 800df52:	d1cc      	bne.n	800deee <_strtod_l+0x46>
 800df54:	3301      	adds	r3, #1
 800df56:	9317      	str	r3, [sp, #92]	; 0x5c
 800df58:	e7be      	b.n	800ded8 <_strtod_l+0x30>
 800df5a:	2a2d      	cmp	r2, #45	; 0x2d
 800df5c:	d1c7      	bne.n	800deee <_strtod_l+0x46>
 800df5e:	2201      	movs	r2, #1
 800df60:	920a      	str	r2, [sp, #40]	; 0x28
 800df62:	1c5a      	adds	r2, r3, #1
 800df64:	9217      	str	r2, [sp, #92]	; 0x5c
 800df66:	785b      	ldrb	r3, [r3, #1]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d1c2      	bne.n	800def2 <_strtod_l+0x4a>
 800df6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800df6e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800df72:	2b00      	cmp	r3, #0
 800df74:	f040 856e 	bne.w	800ea54 <_strtod_l+0xbac>
 800df78:	4652      	mov	r2, sl
 800df7a:	465b      	mov	r3, fp
 800df7c:	e7e1      	b.n	800df42 <_strtod_l+0x9a>
 800df7e:	2200      	movs	r2, #0
 800df80:	e7ee      	b.n	800df60 <_strtod_l+0xb8>
 800df82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800df84:	b13a      	cbz	r2, 800df96 <_strtod_l+0xee>
 800df86:	2135      	movs	r1, #53	; 0x35
 800df88:	a81a      	add	r0, sp, #104	; 0x68
 800df8a:	f002 fca2 	bl	80108d2 <__copybits>
 800df8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800df90:	4620      	mov	r0, r4
 800df92:	f002 f861 	bl	8010058 <_Bfree>
 800df96:	3f01      	subs	r7, #1
 800df98:	2f04      	cmp	r7, #4
 800df9a:	d806      	bhi.n	800dfaa <_strtod_l+0x102>
 800df9c:	e8df f007 	tbb	[pc, r7]
 800dfa0:	1714030a 	.word	0x1714030a
 800dfa4:	0a          	.byte	0x0a
 800dfa5:	00          	.byte	0x00
 800dfa6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800dfaa:	0728      	lsls	r0, r5, #28
 800dfac:	d5c0      	bpl.n	800df30 <_strtod_l+0x88>
 800dfae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800dfb2:	e7bd      	b.n	800df30 <_strtod_l+0x88>
 800dfb4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800dfb8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800dfba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800dfbe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dfc2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800dfc6:	e7f0      	b.n	800dfaa <_strtod_l+0x102>
 800dfc8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800e14c <_strtod_l+0x2a4>
 800dfcc:	e7ed      	b.n	800dfaa <_strtod_l+0x102>
 800dfce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800dfd2:	f04f 3aff 	mov.w	sl, #4294967295
 800dfd6:	e7e8      	b.n	800dfaa <_strtod_l+0x102>
 800dfd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dfda:	1c5a      	adds	r2, r3, #1
 800dfdc:	9217      	str	r2, [sp, #92]	; 0x5c
 800dfde:	785b      	ldrb	r3, [r3, #1]
 800dfe0:	2b30      	cmp	r3, #48	; 0x30
 800dfe2:	d0f9      	beq.n	800dfd8 <_strtod_l+0x130>
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d0a3      	beq.n	800df30 <_strtod_l+0x88>
 800dfe8:	2301      	movs	r3, #1
 800dfea:	f04f 0900 	mov.w	r9, #0
 800dfee:	9304      	str	r3, [sp, #16]
 800dff0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dff2:	9308      	str	r3, [sp, #32]
 800dff4:	f8cd 901c 	str.w	r9, [sp, #28]
 800dff8:	464f      	mov	r7, r9
 800dffa:	220a      	movs	r2, #10
 800dffc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800dffe:	7806      	ldrb	r6, [r0, #0]
 800e000:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e004:	b2d9      	uxtb	r1, r3
 800e006:	2909      	cmp	r1, #9
 800e008:	d92a      	bls.n	800e060 <_strtod_l+0x1b8>
 800e00a:	9905      	ldr	r1, [sp, #20]
 800e00c:	462a      	mov	r2, r5
 800e00e:	f002 ff0f 	bl	8010e30 <strncmp>
 800e012:	b398      	cbz	r0, 800e07c <_strtod_l+0x1d4>
 800e014:	2000      	movs	r0, #0
 800e016:	4632      	mov	r2, r6
 800e018:	463d      	mov	r5, r7
 800e01a:	9005      	str	r0, [sp, #20]
 800e01c:	4603      	mov	r3, r0
 800e01e:	2a65      	cmp	r2, #101	; 0x65
 800e020:	d001      	beq.n	800e026 <_strtod_l+0x17e>
 800e022:	2a45      	cmp	r2, #69	; 0x45
 800e024:	d118      	bne.n	800e058 <_strtod_l+0x1b0>
 800e026:	b91d      	cbnz	r5, 800e030 <_strtod_l+0x188>
 800e028:	9a04      	ldr	r2, [sp, #16]
 800e02a:	4302      	orrs	r2, r0
 800e02c:	d09e      	beq.n	800df6c <_strtod_l+0xc4>
 800e02e:	2500      	movs	r5, #0
 800e030:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800e034:	f108 0201 	add.w	r2, r8, #1
 800e038:	9217      	str	r2, [sp, #92]	; 0x5c
 800e03a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e03e:	2a2b      	cmp	r2, #43	; 0x2b
 800e040:	d075      	beq.n	800e12e <_strtod_l+0x286>
 800e042:	2a2d      	cmp	r2, #45	; 0x2d
 800e044:	d07b      	beq.n	800e13e <_strtod_l+0x296>
 800e046:	f04f 0c00 	mov.w	ip, #0
 800e04a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e04e:	2909      	cmp	r1, #9
 800e050:	f240 8082 	bls.w	800e158 <_strtod_l+0x2b0>
 800e054:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e058:	2600      	movs	r6, #0
 800e05a:	e09d      	b.n	800e198 <_strtod_l+0x2f0>
 800e05c:	2300      	movs	r3, #0
 800e05e:	e7c4      	b.n	800dfea <_strtod_l+0x142>
 800e060:	2f08      	cmp	r7, #8
 800e062:	bfd8      	it	le
 800e064:	9907      	ldrle	r1, [sp, #28]
 800e066:	f100 0001 	add.w	r0, r0, #1
 800e06a:	bfda      	itte	le
 800e06c:	fb02 3301 	mlale	r3, r2, r1, r3
 800e070:	9307      	strle	r3, [sp, #28]
 800e072:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e076:	3701      	adds	r7, #1
 800e078:	9017      	str	r0, [sp, #92]	; 0x5c
 800e07a:	e7bf      	b.n	800dffc <_strtod_l+0x154>
 800e07c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e07e:	195a      	adds	r2, r3, r5
 800e080:	9217      	str	r2, [sp, #92]	; 0x5c
 800e082:	5d5a      	ldrb	r2, [r3, r5]
 800e084:	2f00      	cmp	r7, #0
 800e086:	d037      	beq.n	800e0f8 <_strtod_l+0x250>
 800e088:	9005      	str	r0, [sp, #20]
 800e08a:	463d      	mov	r5, r7
 800e08c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e090:	2b09      	cmp	r3, #9
 800e092:	d912      	bls.n	800e0ba <_strtod_l+0x212>
 800e094:	2301      	movs	r3, #1
 800e096:	e7c2      	b.n	800e01e <_strtod_l+0x176>
 800e098:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e09a:	1c5a      	adds	r2, r3, #1
 800e09c:	9217      	str	r2, [sp, #92]	; 0x5c
 800e09e:	785a      	ldrb	r2, [r3, #1]
 800e0a0:	3001      	adds	r0, #1
 800e0a2:	2a30      	cmp	r2, #48	; 0x30
 800e0a4:	d0f8      	beq.n	800e098 <_strtod_l+0x1f0>
 800e0a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e0aa:	2b08      	cmp	r3, #8
 800e0ac:	f200 84d9 	bhi.w	800ea62 <_strtod_l+0xbba>
 800e0b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e0b2:	9005      	str	r0, [sp, #20]
 800e0b4:	2000      	movs	r0, #0
 800e0b6:	9308      	str	r3, [sp, #32]
 800e0b8:	4605      	mov	r5, r0
 800e0ba:	3a30      	subs	r2, #48	; 0x30
 800e0bc:	f100 0301 	add.w	r3, r0, #1
 800e0c0:	d014      	beq.n	800e0ec <_strtod_l+0x244>
 800e0c2:	9905      	ldr	r1, [sp, #20]
 800e0c4:	4419      	add	r1, r3
 800e0c6:	9105      	str	r1, [sp, #20]
 800e0c8:	462b      	mov	r3, r5
 800e0ca:	eb00 0e05 	add.w	lr, r0, r5
 800e0ce:	210a      	movs	r1, #10
 800e0d0:	4573      	cmp	r3, lr
 800e0d2:	d113      	bne.n	800e0fc <_strtod_l+0x254>
 800e0d4:	182b      	adds	r3, r5, r0
 800e0d6:	2b08      	cmp	r3, #8
 800e0d8:	f105 0501 	add.w	r5, r5, #1
 800e0dc:	4405      	add	r5, r0
 800e0de:	dc1c      	bgt.n	800e11a <_strtod_l+0x272>
 800e0e0:	9907      	ldr	r1, [sp, #28]
 800e0e2:	230a      	movs	r3, #10
 800e0e4:	fb03 2301 	mla	r3, r3, r1, r2
 800e0e8:	9307      	str	r3, [sp, #28]
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e0ee:	1c51      	adds	r1, r2, #1
 800e0f0:	9117      	str	r1, [sp, #92]	; 0x5c
 800e0f2:	7852      	ldrb	r2, [r2, #1]
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	e7c9      	b.n	800e08c <_strtod_l+0x1e4>
 800e0f8:	4638      	mov	r0, r7
 800e0fa:	e7d2      	b.n	800e0a2 <_strtod_l+0x1fa>
 800e0fc:	2b08      	cmp	r3, #8
 800e0fe:	dc04      	bgt.n	800e10a <_strtod_l+0x262>
 800e100:	9e07      	ldr	r6, [sp, #28]
 800e102:	434e      	muls	r6, r1
 800e104:	9607      	str	r6, [sp, #28]
 800e106:	3301      	adds	r3, #1
 800e108:	e7e2      	b.n	800e0d0 <_strtod_l+0x228>
 800e10a:	f103 0c01 	add.w	ip, r3, #1
 800e10e:	f1bc 0f10 	cmp.w	ip, #16
 800e112:	bfd8      	it	le
 800e114:	fb01 f909 	mulle.w	r9, r1, r9
 800e118:	e7f5      	b.n	800e106 <_strtod_l+0x25e>
 800e11a:	2d10      	cmp	r5, #16
 800e11c:	bfdc      	itt	le
 800e11e:	230a      	movle	r3, #10
 800e120:	fb03 2909 	mlale	r9, r3, r9, r2
 800e124:	e7e1      	b.n	800e0ea <_strtod_l+0x242>
 800e126:	2300      	movs	r3, #0
 800e128:	9305      	str	r3, [sp, #20]
 800e12a:	2301      	movs	r3, #1
 800e12c:	e77c      	b.n	800e028 <_strtod_l+0x180>
 800e12e:	f04f 0c00 	mov.w	ip, #0
 800e132:	f108 0202 	add.w	r2, r8, #2
 800e136:	9217      	str	r2, [sp, #92]	; 0x5c
 800e138:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e13c:	e785      	b.n	800e04a <_strtod_l+0x1a2>
 800e13e:	f04f 0c01 	mov.w	ip, #1
 800e142:	e7f6      	b.n	800e132 <_strtod_l+0x28a>
 800e144:	08012220 	.word	0x08012220
 800e148:	08011fd4 	.word	0x08011fd4
 800e14c:	7ff00000 	.word	0x7ff00000
 800e150:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e152:	1c51      	adds	r1, r2, #1
 800e154:	9117      	str	r1, [sp, #92]	; 0x5c
 800e156:	7852      	ldrb	r2, [r2, #1]
 800e158:	2a30      	cmp	r2, #48	; 0x30
 800e15a:	d0f9      	beq.n	800e150 <_strtod_l+0x2a8>
 800e15c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e160:	2908      	cmp	r1, #8
 800e162:	f63f af79 	bhi.w	800e058 <_strtod_l+0x1b0>
 800e166:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800e16a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e16c:	9206      	str	r2, [sp, #24]
 800e16e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e170:	1c51      	adds	r1, r2, #1
 800e172:	9117      	str	r1, [sp, #92]	; 0x5c
 800e174:	7852      	ldrb	r2, [r2, #1]
 800e176:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800e17a:	2e09      	cmp	r6, #9
 800e17c:	d937      	bls.n	800e1ee <_strtod_l+0x346>
 800e17e:	9e06      	ldr	r6, [sp, #24]
 800e180:	1b89      	subs	r1, r1, r6
 800e182:	2908      	cmp	r1, #8
 800e184:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e188:	dc02      	bgt.n	800e190 <_strtod_l+0x2e8>
 800e18a:	4576      	cmp	r6, lr
 800e18c:	bfa8      	it	ge
 800e18e:	4676      	movge	r6, lr
 800e190:	f1bc 0f00 	cmp.w	ip, #0
 800e194:	d000      	beq.n	800e198 <_strtod_l+0x2f0>
 800e196:	4276      	negs	r6, r6
 800e198:	2d00      	cmp	r5, #0
 800e19a:	d14d      	bne.n	800e238 <_strtod_l+0x390>
 800e19c:	9904      	ldr	r1, [sp, #16]
 800e19e:	4301      	orrs	r1, r0
 800e1a0:	f47f aec6 	bne.w	800df30 <_strtod_l+0x88>
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	f47f aee1 	bne.w	800df6c <_strtod_l+0xc4>
 800e1aa:	2a69      	cmp	r2, #105	; 0x69
 800e1ac:	d027      	beq.n	800e1fe <_strtod_l+0x356>
 800e1ae:	dc24      	bgt.n	800e1fa <_strtod_l+0x352>
 800e1b0:	2a49      	cmp	r2, #73	; 0x49
 800e1b2:	d024      	beq.n	800e1fe <_strtod_l+0x356>
 800e1b4:	2a4e      	cmp	r2, #78	; 0x4e
 800e1b6:	f47f aed9 	bne.w	800df6c <_strtod_l+0xc4>
 800e1ba:	499f      	ldr	r1, [pc, #636]	; (800e438 <_strtod_l+0x590>)
 800e1bc:	a817      	add	r0, sp, #92	; 0x5c
 800e1be:	f001 fe3d 	bl	800fe3c <__match>
 800e1c2:	2800      	cmp	r0, #0
 800e1c4:	f43f aed2 	beq.w	800df6c <_strtod_l+0xc4>
 800e1c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	2b28      	cmp	r3, #40	; 0x28
 800e1ce:	d12d      	bne.n	800e22c <_strtod_l+0x384>
 800e1d0:	499a      	ldr	r1, [pc, #616]	; (800e43c <_strtod_l+0x594>)
 800e1d2:	aa1a      	add	r2, sp, #104	; 0x68
 800e1d4:	a817      	add	r0, sp, #92	; 0x5c
 800e1d6:	f001 fe45 	bl	800fe64 <__hexnan>
 800e1da:	2805      	cmp	r0, #5
 800e1dc:	d126      	bne.n	800e22c <_strtod_l+0x384>
 800e1de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e1e0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800e1e4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e1e8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e1ec:	e6a0      	b.n	800df30 <_strtod_l+0x88>
 800e1ee:	210a      	movs	r1, #10
 800e1f0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800e1f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e1f8:	e7b9      	b.n	800e16e <_strtod_l+0x2c6>
 800e1fa:	2a6e      	cmp	r2, #110	; 0x6e
 800e1fc:	e7db      	b.n	800e1b6 <_strtod_l+0x30e>
 800e1fe:	4990      	ldr	r1, [pc, #576]	; (800e440 <_strtod_l+0x598>)
 800e200:	a817      	add	r0, sp, #92	; 0x5c
 800e202:	f001 fe1b 	bl	800fe3c <__match>
 800e206:	2800      	cmp	r0, #0
 800e208:	f43f aeb0 	beq.w	800df6c <_strtod_l+0xc4>
 800e20c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e20e:	498d      	ldr	r1, [pc, #564]	; (800e444 <_strtod_l+0x59c>)
 800e210:	3b01      	subs	r3, #1
 800e212:	a817      	add	r0, sp, #92	; 0x5c
 800e214:	9317      	str	r3, [sp, #92]	; 0x5c
 800e216:	f001 fe11 	bl	800fe3c <__match>
 800e21a:	b910      	cbnz	r0, 800e222 <_strtod_l+0x37a>
 800e21c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e21e:	3301      	adds	r3, #1
 800e220:	9317      	str	r3, [sp, #92]	; 0x5c
 800e222:	f8df b230 	ldr.w	fp, [pc, #560]	; 800e454 <_strtod_l+0x5ac>
 800e226:	f04f 0a00 	mov.w	sl, #0
 800e22a:	e681      	b.n	800df30 <_strtod_l+0x88>
 800e22c:	4886      	ldr	r0, [pc, #536]	; (800e448 <_strtod_l+0x5a0>)
 800e22e:	f002 fde7 	bl	8010e00 <nan>
 800e232:	ec5b ab10 	vmov	sl, fp, d0
 800e236:	e67b      	b.n	800df30 <_strtod_l+0x88>
 800e238:	9b05      	ldr	r3, [sp, #20]
 800e23a:	9807      	ldr	r0, [sp, #28]
 800e23c:	1af3      	subs	r3, r6, r3
 800e23e:	2f00      	cmp	r7, #0
 800e240:	bf08      	it	eq
 800e242:	462f      	moveq	r7, r5
 800e244:	2d10      	cmp	r5, #16
 800e246:	9306      	str	r3, [sp, #24]
 800e248:	46a8      	mov	r8, r5
 800e24a:	bfa8      	it	ge
 800e24c:	f04f 0810 	movge.w	r8, #16
 800e250:	f7f2 f960 	bl	8000514 <__aeabi_ui2d>
 800e254:	2d09      	cmp	r5, #9
 800e256:	4682      	mov	sl, r0
 800e258:	468b      	mov	fp, r1
 800e25a:	dd13      	ble.n	800e284 <_strtod_l+0x3dc>
 800e25c:	4b7b      	ldr	r3, [pc, #492]	; (800e44c <_strtod_l+0x5a4>)
 800e25e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e262:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e266:	f7f2 f9cf 	bl	8000608 <__aeabi_dmul>
 800e26a:	4682      	mov	sl, r0
 800e26c:	4648      	mov	r0, r9
 800e26e:	468b      	mov	fp, r1
 800e270:	f7f2 f950 	bl	8000514 <__aeabi_ui2d>
 800e274:	4602      	mov	r2, r0
 800e276:	460b      	mov	r3, r1
 800e278:	4650      	mov	r0, sl
 800e27a:	4659      	mov	r1, fp
 800e27c:	f7f2 f80e 	bl	800029c <__adddf3>
 800e280:	4682      	mov	sl, r0
 800e282:	468b      	mov	fp, r1
 800e284:	2d0f      	cmp	r5, #15
 800e286:	dc38      	bgt.n	800e2fa <_strtod_l+0x452>
 800e288:	9b06      	ldr	r3, [sp, #24]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	f43f ae50 	beq.w	800df30 <_strtod_l+0x88>
 800e290:	dd24      	ble.n	800e2dc <_strtod_l+0x434>
 800e292:	2b16      	cmp	r3, #22
 800e294:	dc0b      	bgt.n	800e2ae <_strtod_l+0x406>
 800e296:	496d      	ldr	r1, [pc, #436]	; (800e44c <_strtod_l+0x5a4>)
 800e298:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e29c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2a0:	4652      	mov	r2, sl
 800e2a2:	465b      	mov	r3, fp
 800e2a4:	f7f2 f9b0 	bl	8000608 <__aeabi_dmul>
 800e2a8:	4682      	mov	sl, r0
 800e2aa:	468b      	mov	fp, r1
 800e2ac:	e640      	b.n	800df30 <_strtod_l+0x88>
 800e2ae:	9a06      	ldr	r2, [sp, #24]
 800e2b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	db20      	blt.n	800e2fa <_strtod_l+0x452>
 800e2b8:	4c64      	ldr	r4, [pc, #400]	; (800e44c <_strtod_l+0x5a4>)
 800e2ba:	f1c5 050f 	rsb	r5, r5, #15
 800e2be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e2c2:	4652      	mov	r2, sl
 800e2c4:	465b      	mov	r3, fp
 800e2c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2ca:	f7f2 f99d 	bl	8000608 <__aeabi_dmul>
 800e2ce:	9b06      	ldr	r3, [sp, #24]
 800e2d0:	1b5d      	subs	r5, r3, r5
 800e2d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e2d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e2da:	e7e3      	b.n	800e2a4 <_strtod_l+0x3fc>
 800e2dc:	9b06      	ldr	r3, [sp, #24]
 800e2de:	3316      	adds	r3, #22
 800e2e0:	db0b      	blt.n	800e2fa <_strtod_l+0x452>
 800e2e2:	9b05      	ldr	r3, [sp, #20]
 800e2e4:	1b9e      	subs	r6, r3, r6
 800e2e6:	4b59      	ldr	r3, [pc, #356]	; (800e44c <_strtod_l+0x5a4>)
 800e2e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800e2ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e2f0:	4650      	mov	r0, sl
 800e2f2:	4659      	mov	r1, fp
 800e2f4:	f7f2 fab2 	bl	800085c <__aeabi_ddiv>
 800e2f8:	e7d6      	b.n	800e2a8 <_strtod_l+0x400>
 800e2fa:	9b06      	ldr	r3, [sp, #24]
 800e2fc:	eba5 0808 	sub.w	r8, r5, r8
 800e300:	4498      	add	r8, r3
 800e302:	f1b8 0f00 	cmp.w	r8, #0
 800e306:	dd74      	ble.n	800e3f2 <_strtod_l+0x54a>
 800e308:	f018 030f 	ands.w	r3, r8, #15
 800e30c:	d00a      	beq.n	800e324 <_strtod_l+0x47c>
 800e30e:	494f      	ldr	r1, [pc, #316]	; (800e44c <_strtod_l+0x5a4>)
 800e310:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e314:	4652      	mov	r2, sl
 800e316:	465b      	mov	r3, fp
 800e318:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e31c:	f7f2 f974 	bl	8000608 <__aeabi_dmul>
 800e320:	4682      	mov	sl, r0
 800e322:	468b      	mov	fp, r1
 800e324:	f038 080f 	bics.w	r8, r8, #15
 800e328:	d04f      	beq.n	800e3ca <_strtod_l+0x522>
 800e32a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e32e:	dd22      	ble.n	800e376 <_strtod_l+0x4ce>
 800e330:	2500      	movs	r5, #0
 800e332:	462e      	mov	r6, r5
 800e334:	9507      	str	r5, [sp, #28]
 800e336:	9505      	str	r5, [sp, #20]
 800e338:	2322      	movs	r3, #34	; 0x22
 800e33a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800e454 <_strtod_l+0x5ac>
 800e33e:	6023      	str	r3, [r4, #0]
 800e340:	f04f 0a00 	mov.w	sl, #0
 800e344:	9b07      	ldr	r3, [sp, #28]
 800e346:	2b00      	cmp	r3, #0
 800e348:	f43f adf2 	beq.w	800df30 <_strtod_l+0x88>
 800e34c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e34e:	4620      	mov	r0, r4
 800e350:	f001 fe82 	bl	8010058 <_Bfree>
 800e354:	9905      	ldr	r1, [sp, #20]
 800e356:	4620      	mov	r0, r4
 800e358:	f001 fe7e 	bl	8010058 <_Bfree>
 800e35c:	4631      	mov	r1, r6
 800e35e:	4620      	mov	r0, r4
 800e360:	f001 fe7a 	bl	8010058 <_Bfree>
 800e364:	9907      	ldr	r1, [sp, #28]
 800e366:	4620      	mov	r0, r4
 800e368:	f001 fe76 	bl	8010058 <_Bfree>
 800e36c:	4629      	mov	r1, r5
 800e36e:	4620      	mov	r0, r4
 800e370:	f001 fe72 	bl	8010058 <_Bfree>
 800e374:	e5dc      	b.n	800df30 <_strtod_l+0x88>
 800e376:	4b36      	ldr	r3, [pc, #216]	; (800e450 <_strtod_l+0x5a8>)
 800e378:	9304      	str	r3, [sp, #16]
 800e37a:	2300      	movs	r3, #0
 800e37c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e380:	4650      	mov	r0, sl
 800e382:	4659      	mov	r1, fp
 800e384:	4699      	mov	r9, r3
 800e386:	f1b8 0f01 	cmp.w	r8, #1
 800e38a:	dc21      	bgt.n	800e3d0 <_strtod_l+0x528>
 800e38c:	b10b      	cbz	r3, 800e392 <_strtod_l+0x4ea>
 800e38e:	4682      	mov	sl, r0
 800e390:	468b      	mov	fp, r1
 800e392:	4b2f      	ldr	r3, [pc, #188]	; (800e450 <_strtod_l+0x5a8>)
 800e394:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e398:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e39c:	4652      	mov	r2, sl
 800e39e:	465b      	mov	r3, fp
 800e3a0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e3a4:	f7f2 f930 	bl	8000608 <__aeabi_dmul>
 800e3a8:	4b2a      	ldr	r3, [pc, #168]	; (800e454 <_strtod_l+0x5ac>)
 800e3aa:	460a      	mov	r2, r1
 800e3ac:	400b      	ands	r3, r1
 800e3ae:	492a      	ldr	r1, [pc, #168]	; (800e458 <_strtod_l+0x5b0>)
 800e3b0:	428b      	cmp	r3, r1
 800e3b2:	4682      	mov	sl, r0
 800e3b4:	d8bc      	bhi.n	800e330 <_strtod_l+0x488>
 800e3b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e3ba:	428b      	cmp	r3, r1
 800e3bc:	bf86      	itte	hi
 800e3be:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800e45c <_strtod_l+0x5b4>
 800e3c2:	f04f 3aff 	movhi.w	sl, #4294967295
 800e3c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	9304      	str	r3, [sp, #16]
 800e3ce:	e084      	b.n	800e4da <_strtod_l+0x632>
 800e3d0:	f018 0f01 	tst.w	r8, #1
 800e3d4:	d005      	beq.n	800e3e2 <_strtod_l+0x53a>
 800e3d6:	9b04      	ldr	r3, [sp, #16]
 800e3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3dc:	f7f2 f914 	bl	8000608 <__aeabi_dmul>
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	9a04      	ldr	r2, [sp, #16]
 800e3e4:	3208      	adds	r2, #8
 800e3e6:	f109 0901 	add.w	r9, r9, #1
 800e3ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e3ee:	9204      	str	r2, [sp, #16]
 800e3f0:	e7c9      	b.n	800e386 <_strtod_l+0x4de>
 800e3f2:	d0ea      	beq.n	800e3ca <_strtod_l+0x522>
 800e3f4:	f1c8 0800 	rsb	r8, r8, #0
 800e3f8:	f018 020f 	ands.w	r2, r8, #15
 800e3fc:	d00a      	beq.n	800e414 <_strtod_l+0x56c>
 800e3fe:	4b13      	ldr	r3, [pc, #76]	; (800e44c <_strtod_l+0x5a4>)
 800e400:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e404:	4650      	mov	r0, sl
 800e406:	4659      	mov	r1, fp
 800e408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e40c:	f7f2 fa26 	bl	800085c <__aeabi_ddiv>
 800e410:	4682      	mov	sl, r0
 800e412:	468b      	mov	fp, r1
 800e414:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e418:	d0d7      	beq.n	800e3ca <_strtod_l+0x522>
 800e41a:	f1b8 0f1f 	cmp.w	r8, #31
 800e41e:	dd1f      	ble.n	800e460 <_strtod_l+0x5b8>
 800e420:	2500      	movs	r5, #0
 800e422:	462e      	mov	r6, r5
 800e424:	9507      	str	r5, [sp, #28]
 800e426:	9505      	str	r5, [sp, #20]
 800e428:	2322      	movs	r3, #34	; 0x22
 800e42a:	f04f 0a00 	mov.w	sl, #0
 800e42e:	f04f 0b00 	mov.w	fp, #0
 800e432:	6023      	str	r3, [r4, #0]
 800e434:	e786      	b.n	800e344 <_strtod_l+0x49c>
 800e436:	bf00      	nop
 800e438:	08011fa5 	.word	0x08011fa5
 800e43c:	08011fe8 	.word	0x08011fe8
 800e440:	08011f9d 	.word	0x08011f9d
 800e444:	0801212c 	.word	0x0801212c
 800e448:	080123d8 	.word	0x080123d8
 800e44c:	080122b8 	.word	0x080122b8
 800e450:	08012290 	.word	0x08012290
 800e454:	7ff00000 	.word	0x7ff00000
 800e458:	7ca00000 	.word	0x7ca00000
 800e45c:	7fefffff 	.word	0x7fefffff
 800e460:	f018 0310 	ands.w	r3, r8, #16
 800e464:	bf18      	it	ne
 800e466:	236a      	movne	r3, #106	; 0x6a
 800e468:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800e818 <_strtod_l+0x970>
 800e46c:	9304      	str	r3, [sp, #16]
 800e46e:	4650      	mov	r0, sl
 800e470:	4659      	mov	r1, fp
 800e472:	2300      	movs	r3, #0
 800e474:	f018 0f01 	tst.w	r8, #1
 800e478:	d004      	beq.n	800e484 <_strtod_l+0x5dc>
 800e47a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e47e:	f7f2 f8c3 	bl	8000608 <__aeabi_dmul>
 800e482:	2301      	movs	r3, #1
 800e484:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e488:	f109 0908 	add.w	r9, r9, #8
 800e48c:	d1f2      	bne.n	800e474 <_strtod_l+0x5cc>
 800e48e:	b10b      	cbz	r3, 800e494 <_strtod_l+0x5ec>
 800e490:	4682      	mov	sl, r0
 800e492:	468b      	mov	fp, r1
 800e494:	9b04      	ldr	r3, [sp, #16]
 800e496:	b1c3      	cbz	r3, 800e4ca <_strtod_l+0x622>
 800e498:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e49c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	4659      	mov	r1, fp
 800e4a4:	dd11      	ble.n	800e4ca <_strtod_l+0x622>
 800e4a6:	2b1f      	cmp	r3, #31
 800e4a8:	f340 8124 	ble.w	800e6f4 <_strtod_l+0x84c>
 800e4ac:	2b34      	cmp	r3, #52	; 0x34
 800e4ae:	bfde      	ittt	le
 800e4b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e4b4:	f04f 33ff 	movle.w	r3, #4294967295
 800e4b8:	fa03 f202 	lslle.w	r2, r3, r2
 800e4bc:	f04f 0a00 	mov.w	sl, #0
 800e4c0:	bfcc      	ite	gt
 800e4c2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e4c6:	ea02 0b01 	andle.w	fp, r2, r1
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	4650      	mov	r0, sl
 800e4d0:	4659      	mov	r1, fp
 800e4d2:	f7f2 fb01 	bl	8000ad8 <__aeabi_dcmpeq>
 800e4d6:	2800      	cmp	r0, #0
 800e4d8:	d1a2      	bne.n	800e420 <_strtod_l+0x578>
 800e4da:	9b07      	ldr	r3, [sp, #28]
 800e4dc:	9300      	str	r3, [sp, #0]
 800e4de:	9908      	ldr	r1, [sp, #32]
 800e4e0:	462b      	mov	r3, r5
 800e4e2:	463a      	mov	r2, r7
 800e4e4:	4620      	mov	r0, r4
 800e4e6:	f001 fe1f 	bl	8010128 <__s2b>
 800e4ea:	9007      	str	r0, [sp, #28]
 800e4ec:	2800      	cmp	r0, #0
 800e4ee:	f43f af1f 	beq.w	800e330 <_strtod_l+0x488>
 800e4f2:	9b05      	ldr	r3, [sp, #20]
 800e4f4:	1b9e      	subs	r6, r3, r6
 800e4f6:	9b06      	ldr	r3, [sp, #24]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	bfb4      	ite	lt
 800e4fc:	4633      	movlt	r3, r6
 800e4fe:	2300      	movge	r3, #0
 800e500:	930c      	str	r3, [sp, #48]	; 0x30
 800e502:	9b06      	ldr	r3, [sp, #24]
 800e504:	2500      	movs	r5, #0
 800e506:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e50a:	9312      	str	r3, [sp, #72]	; 0x48
 800e50c:	462e      	mov	r6, r5
 800e50e:	9b07      	ldr	r3, [sp, #28]
 800e510:	4620      	mov	r0, r4
 800e512:	6859      	ldr	r1, [r3, #4]
 800e514:	f001 fd60 	bl	800ffd8 <_Balloc>
 800e518:	9005      	str	r0, [sp, #20]
 800e51a:	2800      	cmp	r0, #0
 800e51c:	f43f af0c 	beq.w	800e338 <_strtod_l+0x490>
 800e520:	9b07      	ldr	r3, [sp, #28]
 800e522:	691a      	ldr	r2, [r3, #16]
 800e524:	3202      	adds	r2, #2
 800e526:	f103 010c 	add.w	r1, r3, #12
 800e52a:	0092      	lsls	r2, r2, #2
 800e52c:	300c      	adds	r0, #12
 800e52e:	f7fe fddf 	bl	800d0f0 <memcpy>
 800e532:	ec4b ab10 	vmov	d0, sl, fp
 800e536:	aa1a      	add	r2, sp, #104	; 0x68
 800e538:	a919      	add	r1, sp, #100	; 0x64
 800e53a:	4620      	mov	r0, r4
 800e53c:	f002 f93a 	bl	80107b4 <__d2b>
 800e540:	ec4b ab18 	vmov	d8, sl, fp
 800e544:	9018      	str	r0, [sp, #96]	; 0x60
 800e546:	2800      	cmp	r0, #0
 800e548:	f43f aef6 	beq.w	800e338 <_strtod_l+0x490>
 800e54c:	2101      	movs	r1, #1
 800e54e:	4620      	mov	r0, r4
 800e550:	f001 fe84 	bl	801025c <__i2b>
 800e554:	4606      	mov	r6, r0
 800e556:	2800      	cmp	r0, #0
 800e558:	f43f aeee 	beq.w	800e338 <_strtod_l+0x490>
 800e55c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e55e:	9904      	ldr	r1, [sp, #16]
 800e560:	2b00      	cmp	r3, #0
 800e562:	bfab      	itete	ge
 800e564:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800e566:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800e568:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e56a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800e56e:	bfac      	ite	ge
 800e570:	eb03 0902 	addge.w	r9, r3, r2
 800e574:	1ad7      	sublt	r7, r2, r3
 800e576:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e578:	eba3 0801 	sub.w	r8, r3, r1
 800e57c:	4490      	add	r8, r2
 800e57e:	4ba1      	ldr	r3, [pc, #644]	; (800e804 <_strtod_l+0x95c>)
 800e580:	f108 38ff 	add.w	r8, r8, #4294967295
 800e584:	4598      	cmp	r8, r3
 800e586:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e58a:	f280 80c7 	bge.w	800e71c <_strtod_l+0x874>
 800e58e:	eba3 0308 	sub.w	r3, r3, r8
 800e592:	2b1f      	cmp	r3, #31
 800e594:	eba2 0203 	sub.w	r2, r2, r3
 800e598:	f04f 0101 	mov.w	r1, #1
 800e59c:	f300 80b1 	bgt.w	800e702 <_strtod_l+0x85a>
 800e5a0:	fa01 f303 	lsl.w	r3, r1, r3
 800e5a4:	930d      	str	r3, [sp, #52]	; 0x34
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	9308      	str	r3, [sp, #32]
 800e5aa:	eb09 0802 	add.w	r8, r9, r2
 800e5ae:	9b04      	ldr	r3, [sp, #16]
 800e5b0:	45c1      	cmp	r9, r8
 800e5b2:	4417      	add	r7, r2
 800e5b4:	441f      	add	r7, r3
 800e5b6:	464b      	mov	r3, r9
 800e5b8:	bfa8      	it	ge
 800e5ba:	4643      	movge	r3, r8
 800e5bc:	42bb      	cmp	r3, r7
 800e5be:	bfa8      	it	ge
 800e5c0:	463b      	movge	r3, r7
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	bfc2      	ittt	gt
 800e5c6:	eba8 0803 	subgt.w	r8, r8, r3
 800e5ca:	1aff      	subgt	r7, r7, r3
 800e5cc:	eba9 0903 	subgt.w	r9, r9, r3
 800e5d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	dd17      	ble.n	800e606 <_strtod_l+0x75e>
 800e5d6:	4631      	mov	r1, r6
 800e5d8:	461a      	mov	r2, r3
 800e5da:	4620      	mov	r0, r4
 800e5dc:	f001 fefe 	bl	80103dc <__pow5mult>
 800e5e0:	4606      	mov	r6, r0
 800e5e2:	2800      	cmp	r0, #0
 800e5e4:	f43f aea8 	beq.w	800e338 <_strtod_l+0x490>
 800e5e8:	4601      	mov	r1, r0
 800e5ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e5ec:	4620      	mov	r0, r4
 800e5ee:	f001 fe4b 	bl	8010288 <__multiply>
 800e5f2:	900b      	str	r0, [sp, #44]	; 0x2c
 800e5f4:	2800      	cmp	r0, #0
 800e5f6:	f43f ae9f 	beq.w	800e338 <_strtod_l+0x490>
 800e5fa:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	f001 fd2b 	bl	8010058 <_Bfree>
 800e602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e604:	9318      	str	r3, [sp, #96]	; 0x60
 800e606:	f1b8 0f00 	cmp.w	r8, #0
 800e60a:	f300 808c 	bgt.w	800e726 <_strtod_l+0x87e>
 800e60e:	9b06      	ldr	r3, [sp, #24]
 800e610:	2b00      	cmp	r3, #0
 800e612:	dd08      	ble.n	800e626 <_strtod_l+0x77e>
 800e614:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e616:	9905      	ldr	r1, [sp, #20]
 800e618:	4620      	mov	r0, r4
 800e61a:	f001 fedf 	bl	80103dc <__pow5mult>
 800e61e:	9005      	str	r0, [sp, #20]
 800e620:	2800      	cmp	r0, #0
 800e622:	f43f ae89 	beq.w	800e338 <_strtod_l+0x490>
 800e626:	2f00      	cmp	r7, #0
 800e628:	dd08      	ble.n	800e63c <_strtod_l+0x794>
 800e62a:	9905      	ldr	r1, [sp, #20]
 800e62c:	463a      	mov	r2, r7
 800e62e:	4620      	mov	r0, r4
 800e630:	f001 ff2e 	bl	8010490 <__lshift>
 800e634:	9005      	str	r0, [sp, #20]
 800e636:	2800      	cmp	r0, #0
 800e638:	f43f ae7e 	beq.w	800e338 <_strtod_l+0x490>
 800e63c:	f1b9 0f00 	cmp.w	r9, #0
 800e640:	dd08      	ble.n	800e654 <_strtod_l+0x7ac>
 800e642:	4631      	mov	r1, r6
 800e644:	464a      	mov	r2, r9
 800e646:	4620      	mov	r0, r4
 800e648:	f001 ff22 	bl	8010490 <__lshift>
 800e64c:	4606      	mov	r6, r0
 800e64e:	2800      	cmp	r0, #0
 800e650:	f43f ae72 	beq.w	800e338 <_strtod_l+0x490>
 800e654:	9a05      	ldr	r2, [sp, #20]
 800e656:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e658:	4620      	mov	r0, r4
 800e65a:	f001 ffa5 	bl	80105a8 <__mdiff>
 800e65e:	4605      	mov	r5, r0
 800e660:	2800      	cmp	r0, #0
 800e662:	f43f ae69 	beq.w	800e338 <_strtod_l+0x490>
 800e666:	68c3      	ldr	r3, [r0, #12]
 800e668:	930b      	str	r3, [sp, #44]	; 0x2c
 800e66a:	2300      	movs	r3, #0
 800e66c:	60c3      	str	r3, [r0, #12]
 800e66e:	4631      	mov	r1, r6
 800e670:	f001 ff7e 	bl	8010570 <__mcmp>
 800e674:	2800      	cmp	r0, #0
 800e676:	da60      	bge.n	800e73a <_strtod_l+0x892>
 800e678:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e67a:	ea53 030a 	orrs.w	r3, r3, sl
 800e67e:	f040 8082 	bne.w	800e786 <_strtod_l+0x8de>
 800e682:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e686:	2b00      	cmp	r3, #0
 800e688:	d17d      	bne.n	800e786 <_strtod_l+0x8de>
 800e68a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e68e:	0d1b      	lsrs	r3, r3, #20
 800e690:	051b      	lsls	r3, r3, #20
 800e692:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e696:	d976      	bls.n	800e786 <_strtod_l+0x8de>
 800e698:	696b      	ldr	r3, [r5, #20]
 800e69a:	b913      	cbnz	r3, 800e6a2 <_strtod_l+0x7fa>
 800e69c:	692b      	ldr	r3, [r5, #16]
 800e69e:	2b01      	cmp	r3, #1
 800e6a0:	dd71      	ble.n	800e786 <_strtod_l+0x8de>
 800e6a2:	4629      	mov	r1, r5
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	4620      	mov	r0, r4
 800e6a8:	f001 fef2 	bl	8010490 <__lshift>
 800e6ac:	4631      	mov	r1, r6
 800e6ae:	4605      	mov	r5, r0
 800e6b0:	f001 ff5e 	bl	8010570 <__mcmp>
 800e6b4:	2800      	cmp	r0, #0
 800e6b6:	dd66      	ble.n	800e786 <_strtod_l+0x8de>
 800e6b8:	9904      	ldr	r1, [sp, #16]
 800e6ba:	4a53      	ldr	r2, [pc, #332]	; (800e808 <_strtod_l+0x960>)
 800e6bc:	465b      	mov	r3, fp
 800e6be:	2900      	cmp	r1, #0
 800e6c0:	f000 8081 	beq.w	800e7c6 <_strtod_l+0x91e>
 800e6c4:	ea02 010b 	and.w	r1, r2, fp
 800e6c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e6cc:	dc7b      	bgt.n	800e7c6 <_strtod_l+0x91e>
 800e6ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e6d2:	f77f aea9 	ble.w	800e428 <_strtod_l+0x580>
 800e6d6:	4b4d      	ldr	r3, [pc, #308]	; (800e80c <_strtod_l+0x964>)
 800e6d8:	4650      	mov	r0, sl
 800e6da:	4659      	mov	r1, fp
 800e6dc:	2200      	movs	r2, #0
 800e6de:	f7f1 ff93 	bl	8000608 <__aeabi_dmul>
 800e6e2:	460b      	mov	r3, r1
 800e6e4:	4303      	orrs	r3, r0
 800e6e6:	bf08      	it	eq
 800e6e8:	2322      	moveq	r3, #34	; 0x22
 800e6ea:	4682      	mov	sl, r0
 800e6ec:	468b      	mov	fp, r1
 800e6ee:	bf08      	it	eq
 800e6f0:	6023      	streq	r3, [r4, #0]
 800e6f2:	e62b      	b.n	800e34c <_strtod_l+0x4a4>
 800e6f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e6f8:	fa02 f303 	lsl.w	r3, r2, r3
 800e6fc:	ea03 0a0a 	and.w	sl, r3, sl
 800e700:	e6e3      	b.n	800e4ca <_strtod_l+0x622>
 800e702:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e706:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e70a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e70e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e712:	fa01 f308 	lsl.w	r3, r1, r8
 800e716:	9308      	str	r3, [sp, #32]
 800e718:	910d      	str	r1, [sp, #52]	; 0x34
 800e71a:	e746      	b.n	800e5aa <_strtod_l+0x702>
 800e71c:	2300      	movs	r3, #0
 800e71e:	9308      	str	r3, [sp, #32]
 800e720:	2301      	movs	r3, #1
 800e722:	930d      	str	r3, [sp, #52]	; 0x34
 800e724:	e741      	b.n	800e5aa <_strtod_l+0x702>
 800e726:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e728:	4642      	mov	r2, r8
 800e72a:	4620      	mov	r0, r4
 800e72c:	f001 feb0 	bl	8010490 <__lshift>
 800e730:	9018      	str	r0, [sp, #96]	; 0x60
 800e732:	2800      	cmp	r0, #0
 800e734:	f47f af6b 	bne.w	800e60e <_strtod_l+0x766>
 800e738:	e5fe      	b.n	800e338 <_strtod_l+0x490>
 800e73a:	465f      	mov	r7, fp
 800e73c:	d16e      	bne.n	800e81c <_strtod_l+0x974>
 800e73e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e740:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e744:	b342      	cbz	r2, 800e798 <_strtod_l+0x8f0>
 800e746:	4a32      	ldr	r2, [pc, #200]	; (800e810 <_strtod_l+0x968>)
 800e748:	4293      	cmp	r3, r2
 800e74a:	d128      	bne.n	800e79e <_strtod_l+0x8f6>
 800e74c:	9b04      	ldr	r3, [sp, #16]
 800e74e:	4651      	mov	r1, sl
 800e750:	b1eb      	cbz	r3, 800e78e <_strtod_l+0x8e6>
 800e752:	4b2d      	ldr	r3, [pc, #180]	; (800e808 <_strtod_l+0x960>)
 800e754:	403b      	ands	r3, r7
 800e756:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e75a:	f04f 32ff 	mov.w	r2, #4294967295
 800e75e:	d819      	bhi.n	800e794 <_strtod_l+0x8ec>
 800e760:	0d1b      	lsrs	r3, r3, #20
 800e762:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e766:	fa02 f303 	lsl.w	r3, r2, r3
 800e76a:	4299      	cmp	r1, r3
 800e76c:	d117      	bne.n	800e79e <_strtod_l+0x8f6>
 800e76e:	4b29      	ldr	r3, [pc, #164]	; (800e814 <_strtod_l+0x96c>)
 800e770:	429f      	cmp	r7, r3
 800e772:	d102      	bne.n	800e77a <_strtod_l+0x8d2>
 800e774:	3101      	adds	r1, #1
 800e776:	f43f addf 	beq.w	800e338 <_strtod_l+0x490>
 800e77a:	4b23      	ldr	r3, [pc, #140]	; (800e808 <_strtod_l+0x960>)
 800e77c:	403b      	ands	r3, r7
 800e77e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e782:	f04f 0a00 	mov.w	sl, #0
 800e786:	9b04      	ldr	r3, [sp, #16]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d1a4      	bne.n	800e6d6 <_strtod_l+0x82e>
 800e78c:	e5de      	b.n	800e34c <_strtod_l+0x4a4>
 800e78e:	f04f 33ff 	mov.w	r3, #4294967295
 800e792:	e7ea      	b.n	800e76a <_strtod_l+0x8c2>
 800e794:	4613      	mov	r3, r2
 800e796:	e7e8      	b.n	800e76a <_strtod_l+0x8c2>
 800e798:	ea53 030a 	orrs.w	r3, r3, sl
 800e79c:	d08c      	beq.n	800e6b8 <_strtod_l+0x810>
 800e79e:	9b08      	ldr	r3, [sp, #32]
 800e7a0:	b1db      	cbz	r3, 800e7da <_strtod_l+0x932>
 800e7a2:	423b      	tst	r3, r7
 800e7a4:	d0ef      	beq.n	800e786 <_strtod_l+0x8de>
 800e7a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e7a8:	9a04      	ldr	r2, [sp, #16]
 800e7aa:	4650      	mov	r0, sl
 800e7ac:	4659      	mov	r1, fp
 800e7ae:	b1c3      	cbz	r3, 800e7e2 <_strtod_l+0x93a>
 800e7b0:	f7ff fb5c 	bl	800de6c <sulp>
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	460b      	mov	r3, r1
 800e7b8:	ec51 0b18 	vmov	r0, r1, d8
 800e7bc:	f7f1 fd6e 	bl	800029c <__adddf3>
 800e7c0:	4682      	mov	sl, r0
 800e7c2:	468b      	mov	fp, r1
 800e7c4:	e7df      	b.n	800e786 <_strtod_l+0x8de>
 800e7c6:	4013      	ands	r3, r2
 800e7c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e7cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e7d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e7d4:	f04f 3aff 	mov.w	sl, #4294967295
 800e7d8:	e7d5      	b.n	800e786 <_strtod_l+0x8de>
 800e7da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e7dc:	ea13 0f0a 	tst.w	r3, sl
 800e7e0:	e7e0      	b.n	800e7a4 <_strtod_l+0x8fc>
 800e7e2:	f7ff fb43 	bl	800de6c <sulp>
 800e7e6:	4602      	mov	r2, r0
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	ec51 0b18 	vmov	r0, r1, d8
 800e7ee:	f7f1 fd53 	bl	8000298 <__aeabi_dsub>
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	4682      	mov	sl, r0
 800e7f8:	468b      	mov	fp, r1
 800e7fa:	f7f2 f96d 	bl	8000ad8 <__aeabi_dcmpeq>
 800e7fe:	2800      	cmp	r0, #0
 800e800:	d0c1      	beq.n	800e786 <_strtod_l+0x8de>
 800e802:	e611      	b.n	800e428 <_strtod_l+0x580>
 800e804:	fffffc02 	.word	0xfffffc02
 800e808:	7ff00000 	.word	0x7ff00000
 800e80c:	39500000 	.word	0x39500000
 800e810:	000fffff 	.word	0x000fffff
 800e814:	7fefffff 	.word	0x7fefffff
 800e818:	08012000 	.word	0x08012000
 800e81c:	4631      	mov	r1, r6
 800e81e:	4628      	mov	r0, r5
 800e820:	f002 f824 	bl	801086c <__ratio>
 800e824:	ec59 8b10 	vmov	r8, r9, d0
 800e828:	ee10 0a10 	vmov	r0, s0
 800e82c:	2200      	movs	r2, #0
 800e82e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e832:	4649      	mov	r1, r9
 800e834:	f7f2 f964 	bl	8000b00 <__aeabi_dcmple>
 800e838:	2800      	cmp	r0, #0
 800e83a:	d07a      	beq.n	800e932 <_strtod_l+0xa8a>
 800e83c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d04a      	beq.n	800e8d8 <_strtod_l+0xa30>
 800e842:	4b95      	ldr	r3, [pc, #596]	; (800ea98 <_strtod_l+0xbf0>)
 800e844:	2200      	movs	r2, #0
 800e846:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e84a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ea98 <_strtod_l+0xbf0>
 800e84e:	f04f 0800 	mov.w	r8, #0
 800e852:	4b92      	ldr	r3, [pc, #584]	; (800ea9c <_strtod_l+0xbf4>)
 800e854:	403b      	ands	r3, r7
 800e856:	930d      	str	r3, [sp, #52]	; 0x34
 800e858:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e85a:	4b91      	ldr	r3, [pc, #580]	; (800eaa0 <_strtod_l+0xbf8>)
 800e85c:	429a      	cmp	r2, r3
 800e85e:	f040 80b0 	bne.w	800e9c2 <_strtod_l+0xb1a>
 800e862:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e866:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e86a:	ec4b ab10 	vmov	d0, sl, fp
 800e86e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e872:	f001 ff23 	bl	80106bc <__ulp>
 800e876:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e87a:	ec53 2b10 	vmov	r2, r3, d0
 800e87e:	f7f1 fec3 	bl	8000608 <__aeabi_dmul>
 800e882:	4652      	mov	r2, sl
 800e884:	465b      	mov	r3, fp
 800e886:	f7f1 fd09 	bl	800029c <__adddf3>
 800e88a:	460b      	mov	r3, r1
 800e88c:	4983      	ldr	r1, [pc, #524]	; (800ea9c <_strtod_l+0xbf4>)
 800e88e:	4a85      	ldr	r2, [pc, #532]	; (800eaa4 <_strtod_l+0xbfc>)
 800e890:	4019      	ands	r1, r3
 800e892:	4291      	cmp	r1, r2
 800e894:	4682      	mov	sl, r0
 800e896:	d960      	bls.n	800e95a <_strtod_l+0xab2>
 800e898:	ee18 3a90 	vmov	r3, s17
 800e89c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e8a0:	4293      	cmp	r3, r2
 800e8a2:	d104      	bne.n	800e8ae <_strtod_l+0xa06>
 800e8a4:	ee18 3a10 	vmov	r3, s16
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	f43f ad45 	beq.w	800e338 <_strtod_l+0x490>
 800e8ae:	f8df b200 	ldr.w	fp, [pc, #512]	; 800eab0 <_strtod_l+0xc08>
 800e8b2:	f04f 3aff 	mov.w	sl, #4294967295
 800e8b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	f001 fbcd 	bl	8010058 <_Bfree>
 800e8be:	9905      	ldr	r1, [sp, #20]
 800e8c0:	4620      	mov	r0, r4
 800e8c2:	f001 fbc9 	bl	8010058 <_Bfree>
 800e8c6:	4631      	mov	r1, r6
 800e8c8:	4620      	mov	r0, r4
 800e8ca:	f001 fbc5 	bl	8010058 <_Bfree>
 800e8ce:	4629      	mov	r1, r5
 800e8d0:	4620      	mov	r0, r4
 800e8d2:	f001 fbc1 	bl	8010058 <_Bfree>
 800e8d6:	e61a      	b.n	800e50e <_strtod_l+0x666>
 800e8d8:	f1ba 0f00 	cmp.w	sl, #0
 800e8dc:	d11b      	bne.n	800e916 <_strtod_l+0xa6e>
 800e8de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e8e2:	b9f3      	cbnz	r3, 800e922 <_strtod_l+0xa7a>
 800e8e4:	4b6c      	ldr	r3, [pc, #432]	; (800ea98 <_strtod_l+0xbf0>)
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	4640      	mov	r0, r8
 800e8ea:	4649      	mov	r1, r9
 800e8ec:	f7f2 f8fe 	bl	8000aec <__aeabi_dcmplt>
 800e8f0:	b9d0      	cbnz	r0, 800e928 <_strtod_l+0xa80>
 800e8f2:	4640      	mov	r0, r8
 800e8f4:	4649      	mov	r1, r9
 800e8f6:	4b6c      	ldr	r3, [pc, #432]	; (800eaa8 <_strtod_l+0xc00>)
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	f7f1 fe85 	bl	8000608 <__aeabi_dmul>
 800e8fe:	4680      	mov	r8, r0
 800e900:	4689      	mov	r9, r1
 800e902:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e906:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e90a:	9315      	str	r3, [sp, #84]	; 0x54
 800e90c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e910:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e914:	e79d      	b.n	800e852 <_strtod_l+0x9aa>
 800e916:	f1ba 0f01 	cmp.w	sl, #1
 800e91a:	d102      	bne.n	800e922 <_strtod_l+0xa7a>
 800e91c:	2f00      	cmp	r7, #0
 800e91e:	f43f ad83 	beq.w	800e428 <_strtod_l+0x580>
 800e922:	4b62      	ldr	r3, [pc, #392]	; (800eaac <_strtod_l+0xc04>)
 800e924:	2200      	movs	r2, #0
 800e926:	e78e      	b.n	800e846 <_strtod_l+0x99e>
 800e928:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800eaa8 <_strtod_l+0xc00>
 800e92c:	f04f 0800 	mov.w	r8, #0
 800e930:	e7e7      	b.n	800e902 <_strtod_l+0xa5a>
 800e932:	4b5d      	ldr	r3, [pc, #372]	; (800eaa8 <_strtod_l+0xc00>)
 800e934:	4640      	mov	r0, r8
 800e936:	4649      	mov	r1, r9
 800e938:	2200      	movs	r2, #0
 800e93a:	f7f1 fe65 	bl	8000608 <__aeabi_dmul>
 800e93e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e940:	4680      	mov	r8, r0
 800e942:	4689      	mov	r9, r1
 800e944:	b933      	cbnz	r3, 800e954 <_strtod_l+0xaac>
 800e946:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e94a:	900e      	str	r0, [sp, #56]	; 0x38
 800e94c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e94e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e952:	e7dd      	b.n	800e910 <_strtod_l+0xa68>
 800e954:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800e958:	e7f9      	b.n	800e94e <_strtod_l+0xaa6>
 800e95a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e95e:	9b04      	ldr	r3, [sp, #16]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d1a8      	bne.n	800e8b6 <_strtod_l+0xa0e>
 800e964:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e968:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e96a:	0d1b      	lsrs	r3, r3, #20
 800e96c:	051b      	lsls	r3, r3, #20
 800e96e:	429a      	cmp	r2, r3
 800e970:	d1a1      	bne.n	800e8b6 <_strtod_l+0xa0e>
 800e972:	4640      	mov	r0, r8
 800e974:	4649      	mov	r1, r9
 800e976:	f7f2 f9a7 	bl	8000cc8 <__aeabi_d2lz>
 800e97a:	f7f1 fe17 	bl	80005ac <__aeabi_l2d>
 800e97e:	4602      	mov	r2, r0
 800e980:	460b      	mov	r3, r1
 800e982:	4640      	mov	r0, r8
 800e984:	4649      	mov	r1, r9
 800e986:	f7f1 fc87 	bl	8000298 <__aeabi_dsub>
 800e98a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e98c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e990:	ea43 030a 	orr.w	r3, r3, sl
 800e994:	4313      	orrs	r3, r2
 800e996:	4680      	mov	r8, r0
 800e998:	4689      	mov	r9, r1
 800e99a:	d055      	beq.n	800ea48 <_strtod_l+0xba0>
 800e99c:	a336      	add	r3, pc, #216	; (adr r3, 800ea78 <_strtod_l+0xbd0>)
 800e99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a2:	f7f2 f8a3 	bl	8000aec <__aeabi_dcmplt>
 800e9a6:	2800      	cmp	r0, #0
 800e9a8:	f47f acd0 	bne.w	800e34c <_strtod_l+0x4a4>
 800e9ac:	a334      	add	r3, pc, #208	; (adr r3, 800ea80 <_strtod_l+0xbd8>)
 800e9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b2:	4640      	mov	r0, r8
 800e9b4:	4649      	mov	r1, r9
 800e9b6:	f7f2 f8b7 	bl	8000b28 <__aeabi_dcmpgt>
 800e9ba:	2800      	cmp	r0, #0
 800e9bc:	f43f af7b 	beq.w	800e8b6 <_strtod_l+0xa0e>
 800e9c0:	e4c4      	b.n	800e34c <_strtod_l+0x4a4>
 800e9c2:	9b04      	ldr	r3, [sp, #16]
 800e9c4:	b333      	cbz	r3, 800ea14 <_strtod_l+0xb6c>
 800e9c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e9c8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e9cc:	d822      	bhi.n	800ea14 <_strtod_l+0xb6c>
 800e9ce:	a32e      	add	r3, pc, #184	; (adr r3, 800ea88 <_strtod_l+0xbe0>)
 800e9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d4:	4640      	mov	r0, r8
 800e9d6:	4649      	mov	r1, r9
 800e9d8:	f7f2 f892 	bl	8000b00 <__aeabi_dcmple>
 800e9dc:	b1a0      	cbz	r0, 800ea08 <_strtod_l+0xb60>
 800e9de:	4649      	mov	r1, r9
 800e9e0:	4640      	mov	r0, r8
 800e9e2:	f7f2 f8e9 	bl	8000bb8 <__aeabi_d2uiz>
 800e9e6:	2801      	cmp	r0, #1
 800e9e8:	bf38      	it	cc
 800e9ea:	2001      	movcc	r0, #1
 800e9ec:	f7f1 fd92 	bl	8000514 <__aeabi_ui2d>
 800e9f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9f2:	4680      	mov	r8, r0
 800e9f4:	4689      	mov	r9, r1
 800e9f6:	bb23      	cbnz	r3, 800ea42 <_strtod_l+0xb9a>
 800e9f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9fc:	9010      	str	r0, [sp, #64]	; 0x40
 800e9fe:	9311      	str	r3, [sp, #68]	; 0x44
 800ea00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ea04:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ea08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea0c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ea10:	1a9b      	subs	r3, r3, r2
 800ea12:	9309      	str	r3, [sp, #36]	; 0x24
 800ea14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ea18:	eeb0 0a48 	vmov.f32	s0, s16
 800ea1c:	eef0 0a68 	vmov.f32	s1, s17
 800ea20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ea24:	f001 fe4a 	bl	80106bc <__ulp>
 800ea28:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ea2c:	ec53 2b10 	vmov	r2, r3, d0
 800ea30:	f7f1 fdea 	bl	8000608 <__aeabi_dmul>
 800ea34:	ec53 2b18 	vmov	r2, r3, d8
 800ea38:	f7f1 fc30 	bl	800029c <__adddf3>
 800ea3c:	4682      	mov	sl, r0
 800ea3e:	468b      	mov	fp, r1
 800ea40:	e78d      	b.n	800e95e <_strtod_l+0xab6>
 800ea42:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ea46:	e7db      	b.n	800ea00 <_strtod_l+0xb58>
 800ea48:	a311      	add	r3, pc, #68	; (adr r3, 800ea90 <_strtod_l+0xbe8>)
 800ea4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4e:	f7f2 f84d 	bl	8000aec <__aeabi_dcmplt>
 800ea52:	e7b2      	b.n	800e9ba <_strtod_l+0xb12>
 800ea54:	2300      	movs	r3, #0
 800ea56:	930a      	str	r3, [sp, #40]	; 0x28
 800ea58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ea5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ea5c:	6013      	str	r3, [r2, #0]
 800ea5e:	f7ff ba6b 	b.w	800df38 <_strtod_l+0x90>
 800ea62:	2a65      	cmp	r2, #101	; 0x65
 800ea64:	f43f ab5f 	beq.w	800e126 <_strtod_l+0x27e>
 800ea68:	2a45      	cmp	r2, #69	; 0x45
 800ea6a:	f43f ab5c 	beq.w	800e126 <_strtod_l+0x27e>
 800ea6e:	2301      	movs	r3, #1
 800ea70:	f7ff bb94 	b.w	800e19c <_strtod_l+0x2f4>
 800ea74:	f3af 8000 	nop.w
 800ea78:	94a03595 	.word	0x94a03595
 800ea7c:	3fdfffff 	.word	0x3fdfffff
 800ea80:	35afe535 	.word	0x35afe535
 800ea84:	3fe00000 	.word	0x3fe00000
 800ea88:	ffc00000 	.word	0xffc00000
 800ea8c:	41dfffff 	.word	0x41dfffff
 800ea90:	94a03595 	.word	0x94a03595
 800ea94:	3fcfffff 	.word	0x3fcfffff
 800ea98:	3ff00000 	.word	0x3ff00000
 800ea9c:	7ff00000 	.word	0x7ff00000
 800eaa0:	7fe00000 	.word	0x7fe00000
 800eaa4:	7c9fffff 	.word	0x7c9fffff
 800eaa8:	3fe00000 	.word	0x3fe00000
 800eaac:	bff00000 	.word	0xbff00000
 800eab0:	7fefffff 	.word	0x7fefffff

0800eab4 <_strtod_r>:
 800eab4:	4b01      	ldr	r3, [pc, #4]	; (800eabc <_strtod_r+0x8>)
 800eab6:	f7ff b9f7 	b.w	800dea8 <_strtod_l>
 800eaba:	bf00      	nop
 800eabc:	2000033c 	.word	0x2000033c

0800eac0 <_strtol_l.constprop.0>:
 800eac0:	2b01      	cmp	r3, #1
 800eac2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eac6:	d001      	beq.n	800eacc <_strtol_l.constprop.0+0xc>
 800eac8:	2b24      	cmp	r3, #36	; 0x24
 800eaca:	d906      	bls.n	800eada <_strtol_l.constprop.0+0x1a>
 800eacc:	f7fe fae6 	bl	800d09c <__errno>
 800ead0:	2316      	movs	r3, #22
 800ead2:	6003      	str	r3, [r0, #0]
 800ead4:	2000      	movs	r0, #0
 800ead6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eada:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ebc0 <_strtol_l.constprop.0+0x100>
 800eade:	460d      	mov	r5, r1
 800eae0:	462e      	mov	r6, r5
 800eae2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eae6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800eaea:	f017 0708 	ands.w	r7, r7, #8
 800eaee:	d1f7      	bne.n	800eae0 <_strtol_l.constprop.0+0x20>
 800eaf0:	2c2d      	cmp	r4, #45	; 0x2d
 800eaf2:	d132      	bne.n	800eb5a <_strtol_l.constprop.0+0x9a>
 800eaf4:	782c      	ldrb	r4, [r5, #0]
 800eaf6:	2701      	movs	r7, #1
 800eaf8:	1cb5      	adds	r5, r6, #2
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d05b      	beq.n	800ebb6 <_strtol_l.constprop.0+0xf6>
 800eafe:	2b10      	cmp	r3, #16
 800eb00:	d109      	bne.n	800eb16 <_strtol_l.constprop.0+0x56>
 800eb02:	2c30      	cmp	r4, #48	; 0x30
 800eb04:	d107      	bne.n	800eb16 <_strtol_l.constprop.0+0x56>
 800eb06:	782c      	ldrb	r4, [r5, #0]
 800eb08:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800eb0c:	2c58      	cmp	r4, #88	; 0x58
 800eb0e:	d14d      	bne.n	800ebac <_strtol_l.constprop.0+0xec>
 800eb10:	786c      	ldrb	r4, [r5, #1]
 800eb12:	2310      	movs	r3, #16
 800eb14:	3502      	adds	r5, #2
 800eb16:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800eb1a:	f108 38ff 	add.w	r8, r8, #4294967295
 800eb1e:	f04f 0c00 	mov.w	ip, #0
 800eb22:	fbb8 f9f3 	udiv	r9, r8, r3
 800eb26:	4666      	mov	r6, ip
 800eb28:	fb03 8a19 	mls	sl, r3, r9, r8
 800eb2c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800eb30:	f1be 0f09 	cmp.w	lr, #9
 800eb34:	d816      	bhi.n	800eb64 <_strtol_l.constprop.0+0xa4>
 800eb36:	4674      	mov	r4, lr
 800eb38:	42a3      	cmp	r3, r4
 800eb3a:	dd24      	ble.n	800eb86 <_strtol_l.constprop.0+0xc6>
 800eb3c:	f1bc 0f00 	cmp.w	ip, #0
 800eb40:	db1e      	blt.n	800eb80 <_strtol_l.constprop.0+0xc0>
 800eb42:	45b1      	cmp	r9, r6
 800eb44:	d31c      	bcc.n	800eb80 <_strtol_l.constprop.0+0xc0>
 800eb46:	d101      	bne.n	800eb4c <_strtol_l.constprop.0+0x8c>
 800eb48:	45a2      	cmp	sl, r4
 800eb4a:	db19      	blt.n	800eb80 <_strtol_l.constprop.0+0xc0>
 800eb4c:	fb06 4603 	mla	r6, r6, r3, r4
 800eb50:	f04f 0c01 	mov.w	ip, #1
 800eb54:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eb58:	e7e8      	b.n	800eb2c <_strtol_l.constprop.0+0x6c>
 800eb5a:	2c2b      	cmp	r4, #43	; 0x2b
 800eb5c:	bf04      	itt	eq
 800eb5e:	782c      	ldrbeq	r4, [r5, #0]
 800eb60:	1cb5      	addeq	r5, r6, #2
 800eb62:	e7ca      	b.n	800eafa <_strtol_l.constprop.0+0x3a>
 800eb64:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800eb68:	f1be 0f19 	cmp.w	lr, #25
 800eb6c:	d801      	bhi.n	800eb72 <_strtol_l.constprop.0+0xb2>
 800eb6e:	3c37      	subs	r4, #55	; 0x37
 800eb70:	e7e2      	b.n	800eb38 <_strtol_l.constprop.0+0x78>
 800eb72:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800eb76:	f1be 0f19 	cmp.w	lr, #25
 800eb7a:	d804      	bhi.n	800eb86 <_strtol_l.constprop.0+0xc6>
 800eb7c:	3c57      	subs	r4, #87	; 0x57
 800eb7e:	e7db      	b.n	800eb38 <_strtol_l.constprop.0+0x78>
 800eb80:	f04f 3cff 	mov.w	ip, #4294967295
 800eb84:	e7e6      	b.n	800eb54 <_strtol_l.constprop.0+0x94>
 800eb86:	f1bc 0f00 	cmp.w	ip, #0
 800eb8a:	da05      	bge.n	800eb98 <_strtol_l.constprop.0+0xd8>
 800eb8c:	2322      	movs	r3, #34	; 0x22
 800eb8e:	6003      	str	r3, [r0, #0]
 800eb90:	4646      	mov	r6, r8
 800eb92:	b942      	cbnz	r2, 800eba6 <_strtol_l.constprop.0+0xe6>
 800eb94:	4630      	mov	r0, r6
 800eb96:	e79e      	b.n	800ead6 <_strtol_l.constprop.0+0x16>
 800eb98:	b107      	cbz	r7, 800eb9c <_strtol_l.constprop.0+0xdc>
 800eb9a:	4276      	negs	r6, r6
 800eb9c:	2a00      	cmp	r2, #0
 800eb9e:	d0f9      	beq.n	800eb94 <_strtol_l.constprop.0+0xd4>
 800eba0:	f1bc 0f00 	cmp.w	ip, #0
 800eba4:	d000      	beq.n	800eba8 <_strtol_l.constprop.0+0xe8>
 800eba6:	1e69      	subs	r1, r5, #1
 800eba8:	6011      	str	r1, [r2, #0]
 800ebaa:	e7f3      	b.n	800eb94 <_strtol_l.constprop.0+0xd4>
 800ebac:	2430      	movs	r4, #48	; 0x30
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d1b1      	bne.n	800eb16 <_strtol_l.constprop.0+0x56>
 800ebb2:	2308      	movs	r3, #8
 800ebb4:	e7af      	b.n	800eb16 <_strtol_l.constprop.0+0x56>
 800ebb6:	2c30      	cmp	r4, #48	; 0x30
 800ebb8:	d0a5      	beq.n	800eb06 <_strtol_l.constprop.0+0x46>
 800ebba:	230a      	movs	r3, #10
 800ebbc:	e7ab      	b.n	800eb16 <_strtol_l.constprop.0+0x56>
 800ebbe:	bf00      	nop
 800ebc0:	08012029 	.word	0x08012029

0800ebc4 <_strtol_r>:
 800ebc4:	f7ff bf7c 	b.w	800eac0 <_strtol_l.constprop.0>

0800ebc8 <quorem>:
 800ebc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebcc:	6903      	ldr	r3, [r0, #16]
 800ebce:	690c      	ldr	r4, [r1, #16]
 800ebd0:	42a3      	cmp	r3, r4
 800ebd2:	4607      	mov	r7, r0
 800ebd4:	f2c0 8081 	blt.w	800ecda <quorem+0x112>
 800ebd8:	3c01      	subs	r4, #1
 800ebda:	f101 0814 	add.w	r8, r1, #20
 800ebde:	f100 0514 	add.w	r5, r0, #20
 800ebe2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ebe6:	9301      	str	r3, [sp, #4]
 800ebe8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ebec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ebf0:	3301      	adds	r3, #1
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ebf8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ebfc:	fbb2 f6f3 	udiv	r6, r2, r3
 800ec00:	d331      	bcc.n	800ec66 <quorem+0x9e>
 800ec02:	f04f 0e00 	mov.w	lr, #0
 800ec06:	4640      	mov	r0, r8
 800ec08:	46ac      	mov	ip, r5
 800ec0a:	46f2      	mov	sl, lr
 800ec0c:	f850 2b04 	ldr.w	r2, [r0], #4
 800ec10:	b293      	uxth	r3, r2
 800ec12:	fb06 e303 	mla	r3, r6, r3, lr
 800ec16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ec1a:	b29b      	uxth	r3, r3
 800ec1c:	ebaa 0303 	sub.w	r3, sl, r3
 800ec20:	f8dc a000 	ldr.w	sl, [ip]
 800ec24:	0c12      	lsrs	r2, r2, #16
 800ec26:	fa13 f38a 	uxtah	r3, r3, sl
 800ec2a:	fb06 e202 	mla	r2, r6, r2, lr
 800ec2e:	9300      	str	r3, [sp, #0]
 800ec30:	9b00      	ldr	r3, [sp, #0]
 800ec32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ec36:	b292      	uxth	r2, r2
 800ec38:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ec3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ec40:	f8bd 3000 	ldrh.w	r3, [sp]
 800ec44:	4581      	cmp	r9, r0
 800ec46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec4a:	f84c 3b04 	str.w	r3, [ip], #4
 800ec4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ec52:	d2db      	bcs.n	800ec0c <quorem+0x44>
 800ec54:	f855 300b 	ldr.w	r3, [r5, fp]
 800ec58:	b92b      	cbnz	r3, 800ec66 <quorem+0x9e>
 800ec5a:	9b01      	ldr	r3, [sp, #4]
 800ec5c:	3b04      	subs	r3, #4
 800ec5e:	429d      	cmp	r5, r3
 800ec60:	461a      	mov	r2, r3
 800ec62:	d32e      	bcc.n	800ecc2 <quorem+0xfa>
 800ec64:	613c      	str	r4, [r7, #16]
 800ec66:	4638      	mov	r0, r7
 800ec68:	f001 fc82 	bl	8010570 <__mcmp>
 800ec6c:	2800      	cmp	r0, #0
 800ec6e:	db24      	blt.n	800ecba <quorem+0xf2>
 800ec70:	3601      	adds	r6, #1
 800ec72:	4628      	mov	r0, r5
 800ec74:	f04f 0c00 	mov.w	ip, #0
 800ec78:	f858 2b04 	ldr.w	r2, [r8], #4
 800ec7c:	f8d0 e000 	ldr.w	lr, [r0]
 800ec80:	b293      	uxth	r3, r2
 800ec82:	ebac 0303 	sub.w	r3, ip, r3
 800ec86:	0c12      	lsrs	r2, r2, #16
 800ec88:	fa13 f38e 	uxtah	r3, r3, lr
 800ec8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ec90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ec94:	b29b      	uxth	r3, r3
 800ec96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec9a:	45c1      	cmp	r9, r8
 800ec9c:	f840 3b04 	str.w	r3, [r0], #4
 800eca0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800eca4:	d2e8      	bcs.n	800ec78 <quorem+0xb0>
 800eca6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ecaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ecae:	b922      	cbnz	r2, 800ecba <quorem+0xf2>
 800ecb0:	3b04      	subs	r3, #4
 800ecb2:	429d      	cmp	r5, r3
 800ecb4:	461a      	mov	r2, r3
 800ecb6:	d30a      	bcc.n	800ecce <quorem+0x106>
 800ecb8:	613c      	str	r4, [r7, #16]
 800ecba:	4630      	mov	r0, r6
 800ecbc:	b003      	add	sp, #12
 800ecbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecc2:	6812      	ldr	r2, [r2, #0]
 800ecc4:	3b04      	subs	r3, #4
 800ecc6:	2a00      	cmp	r2, #0
 800ecc8:	d1cc      	bne.n	800ec64 <quorem+0x9c>
 800ecca:	3c01      	subs	r4, #1
 800eccc:	e7c7      	b.n	800ec5e <quorem+0x96>
 800ecce:	6812      	ldr	r2, [r2, #0]
 800ecd0:	3b04      	subs	r3, #4
 800ecd2:	2a00      	cmp	r2, #0
 800ecd4:	d1f0      	bne.n	800ecb8 <quorem+0xf0>
 800ecd6:	3c01      	subs	r4, #1
 800ecd8:	e7eb      	b.n	800ecb2 <quorem+0xea>
 800ecda:	2000      	movs	r0, #0
 800ecdc:	e7ee      	b.n	800ecbc <quorem+0xf4>
	...

0800ece0 <_dtoa_r>:
 800ece0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ece4:	ed2d 8b04 	vpush	{d8-d9}
 800ece8:	ec57 6b10 	vmov	r6, r7, d0
 800ecec:	b093      	sub	sp, #76	; 0x4c
 800ecee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ecf0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ecf4:	9106      	str	r1, [sp, #24]
 800ecf6:	ee10 aa10 	vmov	sl, s0
 800ecfa:	4604      	mov	r4, r0
 800ecfc:	9209      	str	r2, [sp, #36]	; 0x24
 800ecfe:	930c      	str	r3, [sp, #48]	; 0x30
 800ed00:	46bb      	mov	fp, r7
 800ed02:	b975      	cbnz	r5, 800ed22 <_dtoa_r+0x42>
 800ed04:	2010      	movs	r0, #16
 800ed06:	f001 f94d 	bl	800ffa4 <malloc>
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	6260      	str	r0, [r4, #36]	; 0x24
 800ed0e:	b920      	cbnz	r0, 800ed1a <_dtoa_r+0x3a>
 800ed10:	4ba7      	ldr	r3, [pc, #668]	; (800efb0 <_dtoa_r+0x2d0>)
 800ed12:	21ea      	movs	r1, #234	; 0xea
 800ed14:	48a7      	ldr	r0, [pc, #668]	; (800efb4 <_dtoa_r+0x2d4>)
 800ed16:	f002 f8ad 	bl	8010e74 <__assert_func>
 800ed1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ed1e:	6005      	str	r5, [r0, #0]
 800ed20:	60c5      	str	r5, [r0, #12]
 800ed22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed24:	6819      	ldr	r1, [r3, #0]
 800ed26:	b151      	cbz	r1, 800ed3e <_dtoa_r+0x5e>
 800ed28:	685a      	ldr	r2, [r3, #4]
 800ed2a:	604a      	str	r2, [r1, #4]
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	4093      	lsls	r3, r2
 800ed30:	608b      	str	r3, [r1, #8]
 800ed32:	4620      	mov	r0, r4
 800ed34:	f001 f990 	bl	8010058 <_Bfree>
 800ed38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	601a      	str	r2, [r3, #0]
 800ed3e:	1e3b      	subs	r3, r7, #0
 800ed40:	bfaa      	itet	ge
 800ed42:	2300      	movge	r3, #0
 800ed44:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ed48:	f8c8 3000 	strge.w	r3, [r8]
 800ed4c:	4b9a      	ldr	r3, [pc, #616]	; (800efb8 <_dtoa_r+0x2d8>)
 800ed4e:	bfbc      	itt	lt
 800ed50:	2201      	movlt	r2, #1
 800ed52:	f8c8 2000 	strlt.w	r2, [r8]
 800ed56:	ea33 030b 	bics.w	r3, r3, fp
 800ed5a:	d11b      	bne.n	800ed94 <_dtoa_r+0xb4>
 800ed5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed5e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ed62:	6013      	str	r3, [r2, #0]
 800ed64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed68:	4333      	orrs	r3, r6
 800ed6a:	f000 8592 	beq.w	800f892 <_dtoa_r+0xbb2>
 800ed6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed70:	b963      	cbnz	r3, 800ed8c <_dtoa_r+0xac>
 800ed72:	4b92      	ldr	r3, [pc, #584]	; (800efbc <_dtoa_r+0x2dc>)
 800ed74:	e022      	b.n	800edbc <_dtoa_r+0xdc>
 800ed76:	4b92      	ldr	r3, [pc, #584]	; (800efc0 <_dtoa_r+0x2e0>)
 800ed78:	9301      	str	r3, [sp, #4]
 800ed7a:	3308      	adds	r3, #8
 800ed7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ed7e:	6013      	str	r3, [r2, #0]
 800ed80:	9801      	ldr	r0, [sp, #4]
 800ed82:	b013      	add	sp, #76	; 0x4c
 800ed84:	ecbd 8b04 	vpop	{d8-d9}
 800ed88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed8c:	4b8b      	ldr	r3, [pc, #556]	; (800efbc <_dtoa_r+0x2dc>)
 800ed8e:	9301      	str	r3, [sp, #4]
 800ed90:	3303      	adds	r3, #3
 800ed92:	e7f3      	b.n	800ed7c <_dtoa_r+0x9c>
 800ed94:	2200      	movs	r2, #0
 800ed96:	2300      	movs	r3, #0
 800ed98:	4650      	mov	r0, sl
 800ed9a:	4659      	mov	r1, fp
 800ed9c:	f7f1 fe9c 	bl	8000ad8 <__aeabi_dcmpeq>
 800eda0:	ec4b ab19 	vmov	d9, sl, fp
 800eda4:	4680      	mov	r8, r0
 800eda6:	b158      	cbz	r0, 800edc0 <_dtoa_r+0xe0>
 800eda8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800edaa:	2301      	movs	r3, #1
 800edac:	6013      	str	r3, [r2, #0]
 800edae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	f000 856b 	beq.w	800f88c <_dtoa_r+0xbac>
 800edb6:	4883      	ldr	r0, [pc, #524]	; (800efc4 <_dtoa_r+0x2e4>)
 800edb8:	6018      	str	r0, [r3, #0]
 800edba:	1e43      	subs	r3, r0, #1
 800edbc:	9301      	str	r3, [sp, #4]
 800edbe:	e7df      	b.n	800ed80 <_dtoa_r+0xa0>
 800edc0:	ec4b ab10 	vmov	d0, sl, fp
 800edc4:	aa10      	add	r2, sp, #64	; 0x40
 800edc6:	a911      	add	r1, sp, #68	; 0x44
 800edc8:	4620      	mov	r0, r4
 800edca:	f001 fcf3 	bl	80107b4 <__d2b>
 800edce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800edd2:	ee08 0a10 	vmov	s16, r0
 800edd6:	2d00      	cmp	r5, #0
 800edd8:	f000 8084 	beq.w	800eee4 <_dtoa_r+0x204>
 800eddc:	ee19 3a90 	vmov	r3, s19
 800ede0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ede4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ede8:	4656      	mov	r6, sl
 800edea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800edee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800edf2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800edf6:	4b74      	ldr	r3, [pc, #464]	; (800efc8 <_dtoa_r+0x2e8>)
 800edf8:	2200      	movs	r2, #0
 800edfa:	4630      	mov	r0, r6
 800edfc:	4639      	mov	r1, r7
 800edfe:	f7f1 fa4b 	bl	8000298 <__aeabi_dsub>
 800ee02:	a365      	add	r3, pc, #404	; (adr r3, 800ef98 <_dtoa_r+0x2b8>)
 800ee04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee08:	f7f1 fbfe 	bl	8000608 <__aeabi_dmul>
 800ee0c:	a364      	add	r3, pc, #400	; (adr r3, 800efa0 <_dtoa_r+0x2c0>)
 800ee0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee12:	f7f1 fa43 	bl	800029c <__adddf3>
 800ee16:	4606      	mov	r6, r0
 800ee18:	4628      	mov	r0, r5
 800ee1a:	460f      	mov	r7, r1
 800ee1c:	f7f1 fb8a 	bl	8000534 <__aeabi_i2d>
 800ee20:	a361      	add	r3, pc, #388	; (adr r3, 800efa8 <_dtoa_r+0x2c8>)
 800ee22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee26:	f7f1 fbef 	bl	8000608 <__aeabi_dmul>
 800ee2a:	4602      	mov	r2, r0
 800ee2c:	460b      	mov	r3, r1
 800ee2e:	4630      	mov	r0, r6
 800ee30:	4639      	mov	r1, r7
 800ee32:	f7f1 fa33 	bl	800029c <__adddf3>
 800ee36:	4606      	mov	r6, r0
 800ee38:	460f      	mov	r7, r1
 800ee3a:	f7f1 fe95 	bl	8000b68 <__aeabi_d2iz>
 800ee3e:	2200      	movs	r2, #0
 800ee40:	9000      	str	r0, [sp, #0]
 800ee42:	2300      	movs	r3, #0
 800ee44:	4630      	mov	r0, r6
 800ee46:	4639      	mov	r1, r7
 800ee48:	f7f1 fe50 	bl	8000aec <__aeabi_dcmplt>
 800ee4c:	b150      	cbz	r0, 800ee64 <_dtoa_r+0x184>
 800ee4e:	9800      	ldr	r0, [sp, #0]
 800ee50:	f7f1 fb70 	bl	8000534 <__aeabi_i2d>
 800ee54:	4632      	mov	r2, r6
 800ee56:	463b      	mov	r3, r7
 800ee58:	f7f1 fe3e 	bl	8000ad8 <__aeabi_dcmpeq>
 800ee5c:	b910      	cbnz	r0, 800ee64 <_dtoa_r+0x184>
 800ee5e:	9b00      	ldr	r3, [sp, #0]
 800ee60:	3b01      	subs	r3, #1
 800ee62:	9300      	str	r3, [sp, #0]
 800ee64:	9b00      	ldr	r3, [sp, #0]
 800ee66:	2b16      	cmp	r3, #22
 800ee68:	d85a      	bhi.n	800ef20 <_dtoa_r+0x240>
 800ee6a:	9a00      	ldr	r2, [sp, #0]
 800ee6c:	4b57      	ldr	r3, [pc, #348]	; (800efcc <_dtoa_r+0x2ec>)
 800ee6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee76:	ec51 0b19 	vmov	r0, r1, d9
 800ee7a:	f7f1 fe37 	bl	8000aec <__aeabi_dcmplt>
 800ee7e:	2800      	cmp	r0, #0
 800ee80:	d050      	beq.n	800ef24 <_dtoa_r+0x244>
 800ee82:	9b00      	ldr	r3, [sp, #0]
 800ee84:	3b01      	subs	r3, #1
 800ee86:	9300      	str	r3, [sp, #0]
 800ee88:	2300      	movs	r3, #0
 800ee8a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee8e:	1b5d      	subs	r5, r3, r5
 800ee90:	1e6b      	subs	r3, r5, #1
 800ee92:	9305      	str	r3, [sp, #20]
 800ee94:	bf45      	ittet	mi
 800ee96:	f1c5 0301 	rsbmi	r3, r5, #1
 800ee9a:	9304      	strmi	r3, [sp, #16]
 800ee9c:	2300      	movpl	r3, #0
 800ee9e:	2300      	movmi	r3, #0
 800eea0:	bf4c      	ite	mi
 800eea2:	9305      	strmi	r3, [sp, #20]
 800eea4:	9304      	strpl	r3, [sp, #16]
 800eea6:	9b00      	ldr	r3, [sp, #0]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	db3d      	blt.n	800ef28 <_dtoa_r+0x248>
 800eeac:	9b05      	ldr	r3, [sp, #20]
 800eeae:	9a00      	ldr	r2, [sp, #0]
 800eeb0:	920a      	str	r2, [sp, #40]	; 0x28
 800eeb2:	4413      	add	r3, r2
 800eeb4:	9305      	str	r3, [sp, #20]
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	9307      	str	r3, [sp, #28]
 800eeba:	9b06      	ldr	r3, [sp, #24]
 800eebc:	2b09      	cmp	r3, #9
 800eebe:	f200 8089 	bhi.w	800efd4 <_dtoa_r+0x2f4>
 800eec2:	2b05      	cmp	r3, #5
 800eec4:	bfc4      	itt	gt
 800eec6:	3b04      	subgt	r3, #4
 800eec8:	9306      	strgt	r3, [sp, #24]
 800eeca:	9b06      	ldr	r3, [sp, #24]
 800eecc:	f1a3 0302 	sub.w	r3, r3, #2
 800eed0:	bfcc      	ite	gt
 800eed2:	2500      	movgt	r5, #0
 800eed4:	2501      	movle	r5, #1
 800eed6:	2b03      	cmp	r3, #3
 800eed8:	f200 8087 	bhi.w	800efea <_dtoa_r+0x30a>
 800eedc:	e8df f003 	tbb	[pc, r3]
 800eee0:	59383a2d 	.word	0x59383a2d
 800eee4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800eee8:	441d      	add	r5, r3
 800eeea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800eeee:	2b20      	cmp	r3, #32
 800eef0:	bfc1      	itttt	gt
 800eef2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800eef6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800eefa:	fa0b f303 	lslgt.w	r3, fp, r3
 800eefe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ef02:	bfda      	itte	le
 800ef04:	f1c3 0320 	rsble	r3, r3, #32
 800ef08:	fa06 f003 	lslle.w	r0, r6, r3
 800ef0c:	4318      	orrgt	r0, r3
 800ef0e:	f7f1 fb01 	bl	8000514 <__aeabi_ui2d>
 800ef12:	2301      	movs	r3, #1
 800ef14:	4606      	mov	r6, r0
 800ef16:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ef1a:	3d01      	subs	r5, #1
 800ef1c:	930e      	str	r3, [sp, #56]	; 0x38
 800ef1e:	e76a      	b.n	800edf6 <_dtoa_r+0x116>
 800ef20:	2301      	movs	r3, #1
 800ef22:	e7b2      	b.n	800ee8a <_dtoa_r+0x1aa>
 800ef24:	900b      	str	r0, [sp, #44]	; 0x2c
 800ef26:	e7b1      	b.n	800ee8c <_dtoa_r+0x1ac>
 800ef28:	9b04      	ldr	r3, [sp, #16]
 800ef2a:	9a00      	ldr	r2, [sp, #0]
 800ef2c:	1a9b      	subs	r3, r3, r2
 800ef2e:	9304      	str	r3, [sp, #16]
 800ef30:	4253      	negs	r3, r2
 800ef32:	9307      	str	r3, [sp, #28]
 800ef34:	2300      	movs	r3, #0
 800ef36:	930a      	str	r3, [sp, #40]	; 0x28
 800ef38:	e7bf      	b.n	800eeba <_dtoa_r+0x1da>
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	9308      	str	r3, [sp, #32]
 800ef3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	dc55      	bgt.n	800eff0 <_dtoa_r+0x310>
 800ef44:	2301      	movs	r3, #1
 800ef46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ef4a:	461a      	mov	r2, r3
 800ef4c:	9209      	str	r2, [sp, #36]	; 0x24
 800ef4e:	e00c      	b.n	800ef6a <_dtoa_r+0x28a>
 800ef50:	2301      	movs	r3, #1
 800ef52:	e7f3      	b.n	800ef3c <_dtoa_r+0x25c>
 800ef54:	2300      	movs	r3, #0
 800ef56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef58:	9308      	str	r3, [sp, #32]
 800ef5a:	9b00      	ldr	r3, [sp, #0]
 800ef5c:	4413      	add	r3, r2
 800ef5e:	9302      	str	r3, [sp, #8]
 800ef60:	3301      	adds	r3, #1
 800ef62:	2b01      	cmp	r3, #1
 800ef64:	9303      	str	r3, [sp, #12]
 800ef66:	bfb8      	it	lt
 800ef68:	2301      	movlt	r3, #1
 800ef6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	6042      	str	r2, [r0, #4]
 800ef70:	2204      	movs	r2, #4
 800ef72:	f102 0614 	add.w	r6, r2, #20
 800ef76:	429e      	cmp	r6, r3
 800ef78:	6841      	ldr	r1, [r0, #4]
 800ef7a:	d93d      	bls.n	800eff8 <_dtoa_r+0x318>
 800ef7c:	4620      	mov	r0, r4
 800ef7e:	f001 f82b 	bl	800ffd8 <_Balloc>
 800ef82:	9001      	str	r0, [sp, #4]
 800ef84:	2800      	cmp	r0, #0
 800ef86:	d13b      	bne.n	800f000 <_dtoa_r+0x320>
 800ef88:	4b11      	ldr	r3, [pc, #68]	; (800efd0 <_dtoa_r+0x2f0>)
 800ef8a:	4602      	mov	r2, r0
 800ef8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ef90:	e6c0      	b.n	800ed14 <_dtoa_r+0x34>
 800ef92:	2301      	movs	r3, #1
 800ef94:	e7df      	b.n	800ef56 <_dtoa_r+0x276>
 800ef96:	bf00      	nop
 800ef98:	636f4361 	.word	0x636f4361
 800ef9c:	3fd287a7 	.word	0x3fd287a7
 800efa0:	8b60c8b3 	.word	0x8b60c8b3
 800efa4:	3fc68a28 	.word	0x3fc68a28
 800efa8:	509f79fb 	.word	0x509f79fb
 800efac:	3fd34413 	.word	0x3fd34413
 800efb0:	08012136 	.word	0x08012136
 800efb4:	0801214d 	.word	0x0801214d
 800efb8:	7ff00000 	.word	0x7ff00000
 800efbc:	08012132 	.word	0x08012132
 800efc0:	08012129 	.word	0x08012129
 800efc4:	08011fa9 	.word	0x08011fa9
 800efc8:	3ff80000 	.word	0x3ff80000
 800efcc:	080122b8 	.word	0x080122b8
 800efd0:	080121a8 	.word	0x080121a8
 800efd4:	2501      	movs	r5, #1
 800efd6:	2300      	movs	r3, #0
 800efd8:	9306      	str	r3, [sp, #24]
 800efda:	9508      	str	r5, [sp, #32]
 800efdc:	f04f 33ff 	mov.w	r3, #4294967295
 800efe0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800efe4:	2200      	movs	r2, #0
 800efe6:	2312      	movs	r3, #18
 800efe8:	e7b0      	b.n	800ef4c <_dtoa_r+0x26c>
 800efea:	2301      	movs	r3, #1
 800efec:	9308      	str	r3, [sp, #32]
 800efee:	e7f5      	b.n	800efdc <_dtoa_r+0x2fc>
 800eff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eff2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800eff6:	e7b8      	b.n	800ef6a <_dtoa_r+0x28a>
 800eff8:	3101      	adds	r1, #1
 800effa:	6041      	str	r1, [r0, #4]
 800effc:	0052      	lsls	r2, r2, #1
 800effe:	e7b8      	b.n	800ef72 <_dtoa_r+0x292>
 800f000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f002:	9a01      	ldr	r2, [sp, #4]
 800f004:	601a      	str	r2, [r3, #0]
 800f006:	9b03      	ldr	r3, [sp, #12]
 800f008:	2b0e      	cmp	r3, #14
 800f00a:	f200 809d 	bhi.w	800f148 <_dtoa_r+0x468>
 800f00e:	2d00      	cmp	r5, #0
 800f010:	f000 809a 	beq.w	800f148 <_dtoa_r+0x468>
 800f014:	9b00      	ldr	r3, [sp, #0]
 800f016:	2b00      	cmp	r3, #0
 800f018:	dd32      	ble.n	800f080 <_dtoa_r+0x3a0>
 800f01a:	4ab7      	ldr	r2, [pc, #732]	; (800f2f8 <_dtoa_r+0x618>)
 800f01c:	f003 030f 	and.w	r3, r3, #15
 800f020:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f024:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f028:	9b00      	ldr	r3, [sp, #0]
 800f02a:	05d8      	lsls	r0, r3, #23
 800f02c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f030:	d516      	bpl.n	800f060 <_dtoa_r+0x380>
 800f032:	4bb2      	ldr	r3, [pc, #712]	; (800f2fc <_dtoa_r+0x61c>)
 800f034:	ec51 0b19 	vmov	r0, r1, d9
 800f038:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f03c:	f7f1 fc0e 	bl	800085c <__aeabi_ddiv>
 800f040:	f007 070f 	and.w	r7, r7, #15
 800f044:	4682      	mov	sl, r0
 800f046:	468b      	mov	fp, r1
 800f048:	2503      	movs	r5, #3
 800f04a:	4eac      	ldr	r6, [pc, #688]	; (800f2fc <_dtoa_r+0x61c>)
 800f04c:	b957      	cbnz	r7, 800f064 <_dtoa_r+0x384>
 800f04e:	4642      	mov	r2, r8
 800f050:	464b      	mov	r3, r9
 800f052:	4650      	mov	r0, sl
 800f054:	4659      	mov	r1, fp
 800f056:	f7f1 fc01 	bl	800085c <__aeabi_ddiv>
 800f05a:	4682      	mov	sl, r0
 800f05c:	468b      	mov	fp, r1
 800f05e:	e028      	b.n	800f0b2 <_dtoa_r+0x3d2>
 800f060:	2502      	movs	r5, #2
 800f062:	e7f2      	b.n	800f04a <_dtoa_r+0x36a>
 800f064:	07f9      	lsls	r1, r7, #31
 800f066:	d508      	bpl.n	800f07a <_dtoa_r+0x39a>
 800f068:	4640      	mov	r0, r8
 800f06a:	4649      	mov	r1, r9
 800f06c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f070:	f7f1 faca 	bl	8000608 <__aeabi_dmul>
 800f074:	3501      	adds	r5, #1
 800f076:	4680      	mov	r8, r0
 800f078:	4689      	mov	r9, r1
 800f07a:	107f      	asrs	r7, r7, #1
 800f07c:	3608      	adds	r6, #8
 800f07e:	e7e5      	b.n	800f04c <_dtoa_r+0x36c>
 800f080:	f000 809b 	beq.w	800f1ba <_dtoa_r+0x4da>
 800f084:	9b00      	ldr	r3, [sp, #0]
 800f086:	4f9d      	ldr	r7, [pc, #628]	; (800f2fc <_dtoa_r+0x61c>)
 800f088:	425e      	negs	r6, r3
 800f08a:	4b9b      	ldr	r3, [pc, #620]	; (800f2f8 <_dtoa_r+0x618>)
 800f08c:	f006 020f 	and.w	r2, r6, #15
 800f090:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f098:	ec51 0b19 	vmov	r0, r1, d9
 800f09c:	f7f1 fab4 	bl	8000608 <__aeabi_dmul>
 800f0a0:	1136      	asrs	r6, r6, #4
 800f0a2:	4682      	mov	sl, r0
 800f0a4:	468b      	mov	fp, r1
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	2502      	movs	r5, #2
 800f0aa:	2e00      	cmp	r6, #0
 800f0ac:	d17a      	bne.n	800f1a4 <_dtoa_r+0x4c4>
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d1d3      	bne.n	800f05a <_dtoa_r+0x37a>
 800f0b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	f000 8082 	beq.w	800f1be <_dtoa_r+0x4de>
 800f0ba:	4b91      	ldr	r3, [pc, #580]	; (800f300 <_dtoa_r+0x620>)
 800f0bc:	2200      	movs	r2, #0
 800f0be:	4650      	mov	r0, sl
 800f0c0:	4659      	mov	r1, fp
 800f0c2:	f7f1 fd13 	bl	8000aec <__aeabi_dcmplt>
 800f0c6:	2800      	cmp	r0, #0
 800f0c8:	d079      	beq.n	800f1be <_dtoa_r+0x4de>
 800f0ca:	9b03      	ldr	r3, [sp, #12]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d076      	beq.n	800f1be <_dtoa_r+0x4de>
 800f0d0:	9b02      	ldr	r3, [sp, #8]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	dd36      	ble.n	800f144 <_dtoa_r+0x464>
 800f0d6:	9b00      	ldr	r3, [sp, #0]
 800f0d8:	4650      	mov	r0, sl
 800f0da:	4659      	mov	r1, fp
 800f0dc:	1e5f      	subs	r7, r3, #1
 800f0de:	2200      	movs	r2, #0
 800f0e0:	4b88      	ldr	r3, [pc, #544]	; (800f304 <_dtoa_r+0x624>)
 800f0e2:	f7f1 fa91 	bl	8000608 <__aeabi_dmul>
 800f0e6:	9e02      	ldr	r6, [sp, #8]
 800f0e8:	4682      	mov	sl, r0
 800f0ea:	468b      	mov	fp, r1
 800f0ec:	3501      	adds	r5, #1
 800f0ee:	4628      	mov	r0, r5
 800f0f0:	f7f1 fa20 	bl	8000534 <__aeabi_i2d>
 800f0f4:	4652      	mov	r2, sl
 800f0f6:	465b      	mov	r3, fp
 800f0f8:	f7f1 fa86 	bl	8000608 <__aeabi_dmul>
 800f0fc:	4b82      	ldr	r3, [pc, #520]	; (800f308 <_dtoa_r+0x628>)
 800f0fe:	2200      	movs	r2, #0
 800f100:	f7f1 f8cc 	bl	800029c <__adddf3>
 800f104:	46d0      	mov	r8, sl
 800f106:	46d9      	mov	r9, fp
 800f108:	4682      	mov	sl, r0
 800f10a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f10e:	2e00      	cmp	r6, #0
 800f110:	d158      	bne.n	800f1c4 <_dtoa_r+0x4e4>
 800f112:	4b7e      	ldr	r3, [pc, #504]	; (800f30c <_dtoa_r+0x62c>)
 800f114:	2200      	movs	r2, #0
 800f116:	4640      	mov	r0, r8
 800f118:	4649      	mov	r1, r9
 800f11a:	f7f1 f8bd 	bl	8000298 <__aeabi_dsub>
 800f11e:	4652      	mov	r2, sl
 800f120:	465b      	mov	r3, fp
 800f122:	4680      	mov	r8, r0
 800f124:	4689      	mov	r9, r1
 800f126:	f7f1 fcff 	bl	8000b28 <__aeabi_dcmpgt>
 800f12a:	2800      	cmp	r0, #0
 800f12c:	f040 8295 	bne.w	800f65a <_dtoa_r+0x97a>
 800f130:	4652      	mov	r2, sl
 800f132:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f136:	4640      	mov	r0, r8
 800f138:	4649      	mov	r1, r9
 800f13a:	f7f1 fcd7 	bl	8000aec <__aeabi_dcmplt>
 800f13e:	2800      	cmp	r0, #0
 800f140:	f040 8289 	bne.w	800f656 <_dtoa_r+0x976>
 800f144:	ec5b ab19 	vmov	sl, fp, d9
 800f148:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	f2c0 8148 	blt.w	800f3e0 <_dtoa_r+0x700>
 800f150:	9a00      	ldr	r2, [sp, #0]
 800f152:	2a0e      	cmp	r2, #14
 800f154:	f300 8144 	bgt.w	800f3e0 <_dtoa_r+0x700>
 800f158:	4b67      	ldr	r3, [pc, #412]	; (800f2f8 <_dtoa_r+0x618>)
 800f15a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f15e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f164:	2b00      	cmp	r3, #0
 800f166:	f280 80d5 	bge.w	800f314 <_dtoa_r+0x634>
 800f16a:	9b03      	ldr	r3, [sp, #12]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	f300 80d1 	bgt.w	800f314 <_dtoa_r+0x634>
 800f172:	f040 826f 	bne.w	800f654 <_dtoa_r+0x974>
 800f176:	4b65      	ldr	r3, [pc, #404]	; (800f30c <_dtoa_r+0x62c>)
 800f178:	2200      	movs	r2, #0
 800f17a:	4640      	mov	r0, r8
 800f17c:	4649      	mov	r1, r9
 800f17e:	f7f1 fa43 	bl	8000608 <__aeabi_dmul>
 800f182:	4652      	mov	r2, sl
 800f184:	465b      	mov	r3, fp
 800f186:	f7f1 fcc5 	bl	8000b14 <__aeabi_dcmpge>
 800f18a:	9e03      	ldr	r6, [sp, #12]
 800f18c:	4637      	mov	r7, r6
 800f18e:	2800      	cmp	r0, #0
 800f190:	f040 8245 	bne.w	800f61e <_dtoa_r+0x93e>
 800f194:	9d01      	ldr	r5, [sp, #4]
 800f196:	2331      	movs	r3, #49	; 0x31
 800f198:	f805 3b01 	strb.w	r3, [r5], #1
 800f19c:	9b00      	ldr	r3, [sp, #0]
 800f19e:	3301      	adds	r3, #1
 800f1a0:	9300      	str	r3, [sp, #0]
 800f1a2:	e240      	b.n	800f626 <_dtoa_r+0x946>
 800f1a4:	07f2      	lsls	r2, r6, #31
 800f1a6:	d505      	bpl.n	800f1b4 <_dtoa_r+0x4d4>
 800f1a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1ac:	f7f1 fa2c 	bl	8000608 <__aeabi_dmul>
 800f1b0:	3501      	adds	r5, #1
 800f1b2:	2301      	movs	r3, #1
 800f1b4:	1076      	asrs	r6, r6, #1
 800f1b6:	3708      	adds	r7, #8
 800f1b8:	e777      	b.n	800f0aa <_dtoa_r+0x3ca>
 800f1ba:	2502      	movs	r5, #2
 800f1bc:	e779      	b.n	800f0b2 <_dtoa_r+0x3d2>
 800f1be:	9f00      	ldr	r7, [sp, #0]
 800f1c0:	9e03      	ldr	r6, [sp, #12]
 800f1c2:	e794      	b.n	800f0ee <_dtoa_r+0x40e>
 800f1c4:	9901      	ldr	r1, [sp, #4]
 800f1c6:	4b4c      	ldr	r3, [pc, #304]	; (800f2f8 <_dtoa_r+0x618>)
 800f1c8:	4431      	add	r1, r6
 800f1ca:	910d      	str	r1, [sp, #52]	; 0x34
 800f1cc:	9908      	ldr	r1, [sp, #32]
 800f1ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f1d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f1d6:	2900      	cmp	r1, #0
 800f1d8:	d043      	beq.n	800f262 <_dtoa_r+0x582>
 800f1da:	494d      	ldr	r1, [pc, #308]	; (800f310 <_dtoa_r+0x630>)
 800f1dc:	2000      	movs	r0, #0
 800f1de:	f7f1 fb3d 	bl	800085c <__aeabi_ddiv>
 800f1e2:	4652      	mov	r2, sl
 800f1e4:	465b      	mov	r3, fp
 800f1e6:	f7f1 f857 	bl	8000298 <__aeabi_dsub>
 800f1ea:	9d01      	ldr	r5, [sp, #4]
 800f1ec:	4682      	mov	sl, r0
 800f1ee:	468b      	mov	fp, r1
 800f1f0:	4649      	mov	r1, r9
 800f1f2:	4640      	mov	r0, r8
 800f1f4:	f7f1 fcb8 	bl	8000b68 <__aeabi_d2iz>
 800f1f8:	4606      	mov	r6, r0
 800f1fa:	f7f1 f99b 	bl	8000534 <__aeabi_i2d>
 800f1fe:	4602      	mov	r2, r0
 800f200:	460b      	mov	r3, r1
 800f202:	4640      	mov	r0, r8
 800f204:	4649      	mov	r1, r9
 800f206:	f7f1 f847 	bl	8000298 <__aeabi_dsub>
 800f20a:	3630      	adds	r6, #48	; 0x30
 800f20c:	f805 6b01 	strb.w	r6, [r5], #1
 800f210:	4652      	mov	r2, sl
 800f212:	465b      	mov	r3, fp
 800f214:	4680      	mov	r8, r0
 800f216:	4689      	mov	r9, r1
 800f218:	f7f1 fc68 	bl	8000aec <__aeabi_dcmplt>
 800f21c:	2800      	cmp	r0, #0
 800f21e:	d163      	bne.n	800f2e8 <_dtoa_r+0x608>
 800f220:	4642      	mov	r2, r8
 800f222:	464b      	mov	r3, r9
 800f224:	4936      	ldr	r1, [pc, #216]	; (800f300 <_dtoa_r+0x620>)
 800f226:	2000      	movs	r0, #0
 800f228:	f7f1 f836 	bl	8000298 <__aeabi_dsub>
 800f22c:	4652      	mov	r2, sl
 800f22e:	465b      	mov	r3, fp
 800f230:	f7f1 fc5c 	bl	8000aec <__aeabi_dcmplt>
 800f234:	2800      	cmp	r0, #0
 800f236:	f040 80b5 	bne.w	800f3a4 <_dtoa_r+0x6c4>
 800f23a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f23c:	429d      	cmp	r5, r3
 800f23e:	d081      	beq.n	800f144 <_dtoa_r+0x464>
 800f240:	4b30      	ldr	r3, [pc, #192]	; (800f304 <_dtoa_r+0x624>)
 800f242:	2200      	movs	r2, #0
 800f244:	4650      	mov	r0, sl
 800f246:	4659      	mov	r1, fp
 800f248:	f7f1 f9de 	bl	8000608 <__aeabi_dmul>
 800f24c:	4b2d      	ldr	r3, [pc, #180]	; (800f304 <_dtoa_r+0x624>)
 800f24e:	4682      	mov	sl, r0
 800f250:	468b      	mov	fp, r1
 800f252:	4640      	mov	r0, r8
 800f254:	4649      	mov	r1, r9
 800f256:	2200      	movs	r2, #0
 800f258:	f7f1 f9d6 	bl	8000608 <__aeabi_dmul>
 800f25c:	4680      	mov	r8, r0
 800f25e:	4689      	mov	r9, r1
 800f260:	e7c6      	b.n	800f1f0 <_dtoa_r+0x510>
 800f262:	4650      	mov	r0, sl
 800f264:	4659      	mov	r1, fp
 800f266:	f7f1 f9cf 	bl	8000608 <__aeabi_dmul>
 800f26a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f26c:	9d01      	ldr	r5, [sp, #4]
 800f26e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f270:	4682      	mov	sl, r0
 800f272:	468b      	mov	fp, r1
 800f274:	4649      	mov	r1, r9
 800f276:	4640      	mov	r0, r8
 800f278:	f7f1 fc76 	bl	8000b68 <__aeabi_d2iz>
 800f27c:	4606      	mov	r6, r0
 800f27e:	f7f1 f959 	bl	8000534 <__aeabi_i2d>
 800f282:	3630      	adds	r6, #48	; 0x30
 800f284:	4602      	mov	r2, r0
 800f286:	460b      	mov	r3, r1
 800f288:	4640      	mov	r0, r8
 800f28a:	4649      	mov	r1, r9
 800f28c:	f7f1 f804 	bl	8000298 <__aeabi_dsub>
 800f290:	f805 6b01 	strb.w	r6, [r5], #1
 800f294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f296:	429d      	cmp	r5, r3
 800f298:	4680      	mov	r8, r0
 800f29a:	4689      	mov	r9, r1
 800f29c:	f04f 0200 	mov.w	r2, #0
 800f2a0:	d124      	bne.n	800f2ec <_dtoa_r+0x60c>
 800f2a2:	4b1b      	ldr	r3, [pc, #108]	; (800f310 <_dtoa_r+0x630>)
 800f2a4:	4650      	mov	r0, sl
 800f2a6:	4659      	mov	r1, fp
 800f2a8:	f7f0 fff8 	bl	800029c <__adddf3>
 800f2ac:	4602      	mov	r2, r0
 800f2ae:	460b      	mov	r3, r1
 800f2b0:	4640      	mov	r0, r8
 800f2b2:	4649      	mov	r1, r9
 800f2b4:	f7f1 fc38 	bl	8000b28 <__aeabi_dcmpgt>
 800f2b8:	2800      	cmp	r0, #0
 800f2ba:	d173      	bne.n	800f3a4 <_dtoa_r+0x6c4>
 800f2bc:	4652      	mov	r2, sl
 800f2be:	465b      	mov	r3, fp
 800f2c0:	4913      	ldr	r1, [pc, #76]	; (800f310 <_dtoa_r+0x630>)
 800f2c2:	2000      	movs	r0, #0
 800f2c4:	f7f0 ffe8 	bl	8000298 <__aeabi_dsub>
 800f2c8:	4602      	mov	r2, r0
 800f2ca:	460b      	mov	r3, r1
 800f2cc:	4640      	mov	r0, r8
 800f2ce:	4649      	mov	r1, r9
 800f2d0:	f7f1 fc0c 	bl	8000aec <__aeabi_dcmplt>
 800f2d4:	2800      	cmp	r0, #0
 800f2d6:	f43f af35 	beq.w	800f144 <_dtoa_r+0x464>
 800f2da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f2dc:	1e6b      	subs	r3, r5, #1
 800f2de:	930f      	str	r3, [sp, #60]	; 0x3c
 800f2e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f2e4:	2b30      	cmp	r3, #48	; 0x30
 800f2e6:	d0f8      	beq.n	800f2da <_dtoa_r+0x5fa>
 800f2e8:	9700      	str	r7, [sp, #0]
 800f2ea:	e049      	b.n	800f380 <_dtoa_r+0x6a0>
 800f2ec:	4b05      	ldr	r3, [pc, #20]	; (800f304 <_dtoa_r+0x624>)
 800f2ee:	f7f1 f98b 	bl	8000608 <__aeabi_dmul>
 800f2f2:	4680      	mov	r8, r0
 800f2f4:	4689      	mov	r9, r1
 800f2f6:	e7bd      	b.n	800f274 <_dtoa_r+0x594>
 800f2f8:	080122b8 	.word	0x080122b8
 800f2fc:	08012290 	.word	0x08012290
 800f300:	3ff00000 	.word	0x3ff00000
 800f304:	40240000 	.word	0x40240000
 800f308:	401c0000 	.word	0x401c0000
 800f30c:	40140000 	.word	0x40140000
 800f310:	3fe00000 	.word	0x3fe00000
 800f314:	9d01      	ldr	r5, [sp, #4]
 800f316:	4656      	mov	r6, sl
 800f318:	465f      	mov	r7, fp
 800f31a:	4642      	mov	r2, r8
 800f31c:	464b      	mov	r3, r9
 800f31e:	4630      	mov	r0, r6
 800f320:	4639      	mov	r1, r7
 800f322:	f7f1 fa9b 	bl	800085c <__aeabi_ddiv>
 800f326:	f7f1 fc1f 	bl	8000b68 <__aeabi_d2iz>
 800f32a:	4682      	mov	sl, r0
 800f32c:	f7f1 f902 	bl	8000534 <__aeabi_i2d>
 800f330:	4642      	mov	r2, r8
 800f332:	464b      	mov	r3, r9
 800f334:	f7f1 f968 	bl	8000608 <__aeabi_dmul>
 800f338:	4602      	mov	r2, r0
 800f33a:	460b      	mov	r3, r1
 800f33c:	4630      	mov	r0, r6
 800f33e:	4639      	mov	r1, r7
 800f340:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f344:	f7f0 ffa8 	bl	8000298 <__aeabi_dsub>
 800f348:	f805 6b01 	strb.w	r6, [r5], #1
 800f34c:	9e01      	ldr	r6, [sp, #4]
 800f34e:	9f03      	ldr	r7, [sp, #12]
 800f350:	1bae      	subs	r6, r5, r6
 800f352:	42b7      	cmp	r7, r6
 800f354:	4602      	mov	r2, r0
 800f356:	460b      	mov	r3, r1
 800f358:	d135      	bne.n	800f3c6 <_dtoa_r+0x6e6>
 800f35a:	f7f0 ff9f 	bl	800029c <__adddf3>
 800f35e:	4642      	mov	r2, r8
 800f360:	464b      	mov	r3, r9
 800f362:	4606      	mov	r6, r0
 800f364:	460f      	mov	r7, r1
 800f366:	f7f1 fbdf 	bl	8000b28 <__aeabi_dcmpgt>
 800f36a:	b9d0      	cbnz	r0, 800f3a2 <_dtoa_r+0x6c2>
 800f36c:	4642      	mov	r2, r8
 800f36e:	464b      	mov	r3, r9
 800f370:	4630      	mov	r0, r6
 800f372:	4639      	mov	r1, r7
 800f374:	f7f1 fbb0 	bl	8000ad8 <__aeabi_dcmpeq>
 800f378:	b110      	cbz	r0, 800f380 <_dtoa_r+0x6a0>
 800f37a:	f01a 0f01 	tst.w	sl, #1
 800f37e:	d110      	bne.n	800f3a2 <_dtoa_r+0x6c2>
 800f380:	4620      	mov	r0, r4
 800f382:	ee18 1a10 	vmov	r1, s16
 800f386:	f000 fe67 	bl	8010058 <_Bfree>
 800f38a:	2300      	movs	r3, #0
 800f38c:	9800      	ldr	r0, [sp, #0]
 800f38e:	702b      	strb	r3, [r5, #0]
 800f390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f392:	3001      	adds	r0, #1
 800f394:	6018      	str	r0, [r3, #0]
 800f396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f398:	2b00      	cmp	r3, #0
 800f39a:	f43f acf1 	beq.w	800ed80 <_dtoa_r+0xa0>
 800f39e:	601d      	str	r5, [r3, #0]
 800f3a0:	e4ee      	b.n	800ed80 <_dtoa_r+0xa0>
 800f3a2:	9f00      	ldr	r7, [sp, #0]
 800f3a4:	462b      	mov	r3, r5
 800f3a6:	461d      	mov	r5, r3
 800f3a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f3ac:	2a39      	cmp	r2, #57	; 0x39
 800f3ae:	d106      	bne.n	800f3be <_dtoa_r+0x6de>
 800f3b0:	9a01      	ldr	r2, [sp, #4]
 800f3b2:	429a      	cmp	r2, r3
 800f3b4:	d1f7      	bne.n	800f3a6 <_dtoa_r+0x6c6>
 800f3b6:	9901      	ldr	r1, [sp, #4]
 800f3b8:	2230      	movs	r2, #48	; 0x30
 800f3ba:	3701      	adds	r7, #1
 800f3bc:	700a      	strb	r2, [r1, #0]
 800f3be:	781a      	ldrb	r2, [r3, #0]
 800f3c0:	3201      	adds	r2, #1
 800f3c2:	701a      	strb	r2, [r3, #0]
 800f3c4:	e790      	b.n	800f2e8 <_dtoa_r+0x608>
 800f3c6:	4ba6      	ldr	r3, [pc, #664]	; (800f660 <_dtoa_r+0x980>)
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	f7f1 f91d 	bl	8000608 <__aeabi_dmul>
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	4606      	mov	r6, r0
 800f3d4:	460f      	mov	r7, r1
 800f3d6:	f7f1 fb7f 	bl	8000ad8 <__aeabi_dcmpeq>
 800f3da:	2800      	cmp	r0, #0
 800f3dc:	d09d      	beq.n	800f31a <_dtoa_r+0x63a>
 800f3de:	e7cf      	b.n	800f380 <_dtoa_r+0x6a0>
 800f3e0:	9a08      	ldr	r2, [sp, #32]
 800f3e2:	2a00      	cmp	r2, #0
 800f3e4:	f000 80d7 	beq.w	800f596 <_dtoa_r+0x8b6>
 800f3e8:	9a06      	ldr	r2, [sp, #24]
 800f3ea:	2a01      	cmp	r2, #1
 800f3ec:	f300 80ba 	bgt.w	800f564 <_dtoa_r+0x884>
 800f3f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f3f2:	2a00      	cmp	r2, #0
 800f3f4:	f000 80b2 	beq.w	800f55c <_dtoa_r+0x87c>
 800f3f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f3fc:	9e07      	ldr	r6, [sp, #28]
 800f3fe:	9d04      	ldr	r5, [sp, #16]
 800f400:	9a04      	ldr	r2, [sp, #16]
 800f402:	441a      	add	r2, r3
 800f404:	9204      	str	r2, [sp, #16]
 800f406:	9a05      	ldr	r2, [sp, #20]
 800f408:	2101      	movs	r1, #1
 800f40a:	441a      	add	r2, r3
 800f40c:	4620      	mov	r0, r4
 800f40e:	9205      	str	r2, [sp, #20]
 800f410:	f000 ff24 	bl	801025c <__i2b>
 800f414:	4607      	mov	r7, r0
 800f416:	2d00      	cmp	r5, #0
 800f418:	dd0c      	ble.n	800f434 <_dtoa_r+0x754>
 800f41a:	9b05      	ldr	r3, [sp, #20]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	dd09      	ble.n	800f434 <_dtoa_r+0x754>
 800f420:	42ab      	cmp	r3, r5
 800f422:	9a04      	ldr	r2, [sp, #16]
 800f424:	bfa8      	it	ge
 800f426:	462b      	movge	r3, r5
 800f428:	1ad2      	subs	r2, r2, r3
 800f42a:	9204      	str	r2, [sp, #16]
 800f42c:	9a05      	ldr	r2, [sp, #20]
 800f42e:	1aed      	subs	r5, r5, r3
 800f430:	1ad3      	subs	r3, r2, r3
 800f432:	9305      	str	r3, [sp, #20]
 800f434:	9b07      	ldr	r3, [sp, #28]
 800f436:	b31b      	cbz	r3, 800f480 <_dtoa_r+0x7a0>
 800f438:	9b08      	ldr	r3, [sp, #32]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	f000 80af 	beq.w	800f59e <_dtoa_r+0x8be>
 800f440:	2e00      	cmp	r6, #0
 800f442:	dd13      	ble.n	800f46c <_dtoa_r+0x78c>
 800f444:	4639      	mov	r1, r7
 800f446:	4632      	mov	r2, r6
 800f448:	4620      	mov	r0, r4
 800f44a:	f000 ffc7 	bl	80103dc <__pow5mult>
 800f44e:	ee18 2a10 	vmov	r2, s16
 800f452:	4601      	mov	r1, r0
 800f454:	4607      	mov	r7, r0
 800f456:	4620      	mov	r0, r4
 800f458:	f000 ff16 	bl	8010288 <__multiply>
 800f45c:	ee18 1a10 	vmov	r1, s16
 800f460:	4680      	mov	r8, r0
 800f462:	4620      	mov	r0, r4
 800f464:	f000 fdf8 	bl	8010058 <_Bfree>
 800f468:	ee08 8a10 	vmov	s16, r8
 800f46c:	9b07      	ldr	r3, [sp, #28]
 800f46e:	1b9a      	subs	r2, r3, r6
 800f470:	d006      	beq.n	800f480 <_dtoa_r+0x7a0>
 800f472:	ee18 1a10 	vmov	r1, s16
 800f476:	4620      	mov	r0, r4
 800f478:	f000 ffb0 	bl	80103dc <__pow5mult>
 800f47c:	ee08 0a10 	vmov	s16, r0
 800f480:	2101      	movs	r1, #1
 800f482:	4620      	mov	r0, r4
 800f484:	f000 feea 	bl	801025c <__i2b>
 800f488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	4606      	mov	r6, r0
 800f48e:	f340 8088 	ble.w	800f5a2 <_dtoa_r+0x8c2>
 800f492:	461a      	mov	r2, r3
 800f494:	4601      	mov	r1, r0
 800f496:	4620      	mov	r0, r4
 800f498:	f000 ffa0 	bl	80103dc <__pow5mult>
 800f49c:	9b06      	ldr	r3, [sp, #24]
 800f49e:	2b01      	cmp	r3, #1
 800f4a0:	4606      	mov	r6, r0
 800f4a2:	f340 8081 	ble.w	800f5a8 <_dtoa_r+0x8c8>
 800f4a6:	f04f 0800 	mov.w	r8, #0
 800f4aa:	6933      	ldr	r3, [r6, #16]
 800f4ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f4b0:	6918      	ldr	r0, [r3, #16]
 800f4b2:	f000 fe83 	bl	80101bc <__hi0bits>
 800f4b6:	f1c0 0020 	rsb	r0, r0, #32
 800f4ba:	9b05      	ldr	r3, [sp, #20]
 800f4bc:	4418      	add	r0, r3
 800f4be:	f010 001f 	ands.w	r0, r0, #31
 800f4c2:	f000 8092 	beq.w	800f5ea <_dtoa_r+0x90a>
 800f4c6:	f1c0 0320 	rsb	r3, r0, #32
 800f4ca:	2b04      	cmp	r3, #4
 800f4cc:	f340 808a 	ble.w	800f5e4 <_dtoa_r+0x904>
 800f4d0:	f1c0 001c 	rsb	r0, r0, #28
 800f4d4:	9b04      	ldr	r3, [sp, #16]
 800f4d6:	4403      	add	r3, r0
 800f4d8:	9304      	str	r3, [sp, #16]
 800f4da:	9b05      	ldr	r3, [sp, #20]
 800f4dc:	4403      	add	r3, r0
 800f4de:	4405      	add	r5, r0
 800f4e0:	9305      	str	r3, [sp, #20]
 800f4e2:	9b04      	ldr	r3, [sp, #16]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	dd07      	ble.n	800f4f8 <_dtoa_r+0x818>
 800f4e8:	ee18 1a10 	vmov	r1, s16
 800f4ec:	461a      	mov	r2, r3
 800f4ee:	4620      	mov	r0, r4
 800f4f0:	f000 ffce 	bl	8010490 <__lshift>
 800f4f4:	ee08 0a10 	vmov	s16, r0
 800f4f8:	9b05      	ldr	r3, [sp, #20]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	dd05      	ble.n	800f50a <_dtoa_r+0x82a>
 800f4fe:	4631      	mov	r1, r6
 800f500:	461a      	mov	r2, r3
 800f502:	4620      	mov	r0, r4
 800f504:	f000 ffc4 	bl	8010490 <__lshift>
 800f508:	4606      	mov	r6, r0
 800f50a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d06e      	beq.n	800f5ee <_dtoa_r+0x90e>
 800f510:	ee18 0a10 	vmov	r0, s16
 800f514:	4631      	mov	r1, r6
 800f516:	f001 f82b 	bl	8010570 <__mcmp>
 800f51a:	2800      	cmp	r0, #0
 800f51c:	da67      	bge.n	800f5ee <_dtoa_r+0x90e>
 800f51e:	9b00      	ldr	r3, [sp, #0]
 800f520:	3b01      	subs	r3, #1
 800f522:	ee18 1a10 	vmov	r1, s16
 800f526:	9300      	str	r3, [sp, #0]
 800f528:	220a      	movs	r2, #10
 800f52a:	2300      	movs	r3, #0
 800f52c:	4620      	mov	r0, r4
 800f52e:	f000 fdb5 	bl	801009c <__multadd>
 800f532:	9b08      	ldr	r3, [sp, #32]
 800f534:	ee08 0a10 	vmov	s16, r0
 800f538:	2b00      	cmp	r3, #0
 800f53a:	f000 81b1 	beq.w	800f8a0 <_dtoa_r+0xbc0>
 800f53e:	2300      	movs	r3, #0
 800f540:	4639      	mov	r1, r7
 800f542:	220a      	movs	r2, #10
 800f544:	4620      	mov	r0, r4
 800f546:	f000 fda9 	bl	801009c <__multadd>
 800f54a:	9b02      	ldr	r3, [sp, #8]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	4607      	mov	r7, r0
 800f550:	f300 808e 	bgt.w	800f670 <_dtoa_r+0x990>
 800f554:	9b06      	ldr	r3, [sp, #24]
 800f556:	2b02      	cmp	r3, #2
 800f558:	dc51      	bgt.n	800f5fe <_dtoa_r+0x91e>
 800f55a:	e089      	b.n	800f670 <_dtoa_r+0x990>
 800f55c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f55e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f562:	e74b      	b.n	800f3fc <_dtoa_r+0x71c>
 800f564:	9b03      	ldr	r3, [sp, #12]
 800f566:	1e5e      	subs	r6, r3, #1
 800f568:	9b07      	ldr	r3, [sp, #28]
 800f56a:	42b3      	cmp	r3, r6
 800f56c:	bfbf      	itttt	lt
 800f56e:	9b07      	ldrlt	r3, [sp, #28]
 800f570:	9607      	strlt	r6, [sp, #28]
 800f572:	1af2      	sublt	r2, r6, r3
 800f574:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f576:	bfb6      	itet	lt
 800f578:	189b      	addlt	r3, r3, r2
 800f57a:	1b9e      	subge	r6, r3, r6
 800f57c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f57e:	9b03      	ldr	r3, [sp, #12]
 800f580:	bfb8      	it	lt
 800f582:	2600      	movlt	r6, #0
 800f584:	2b00      	cmp	r3, #0
 800f586:	bfb7      	itett	lt
 800f588:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f58c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f590:	1a9d      	sublt	r5, r3, r2
 800f592:	2300      	movlt	r3, #0
 800f594:	e734      	b.n	800f400 <_dtoa_r+0x720>
 800f596:	9e07      	ldr	r6, [sp, #28]
 800f598:	9d04      	ldr	r5, [sp, #16]
 800f59a:	9f08      	ldr	r7, [sp, #32]
 800f59c:	e73b      	b.n	800f416 <_dtoa_r+0x736>
 800f59e:	9a07      	ldr	r2, [sp, #28]
 800f5a0:	e767      	b.n	800f472 <_dtoa_r+0x792>
 800f5a2:	9b06      	ldr	r3, [sp, #24]
 800f5a4:	2b01      	cmp	r3, #1
 800f5a6:	dc18      	bgt.n	800f5da <_dtoa_r+0x8fa>
 800f5a8:	f1ba 0f00 	cmp.w	sl, #0
 800f5ac:	d115      	bne.n	800f5da <_dtoa_r+0x8fa>
 800f5ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f5b2:	b993      	cbnz	r3, 800f5da <_dtoa_r+0x8fa>
 800f5b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f5b8:	0d1b      	lsrs	r3, r3, #20
 800f5ba:	051b      	lsls	r3, r3, #20
 800f5bc:	b183      	cbz	r3, 800f5e0 <_dtoa_r+0x900>
 800f5be:	9b04      	ldr	r3, [sp, #16]
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	9304      	str	r3, [sp, #16]
 800f5c4:	9b05      	ldr	r3, [sp, #20]
 800f5c6:	3301      	adds	r3, #1
 800f5c8:	9305      	str	r3, [sp, #20]
 800f5ca:	f04f 0801 	mov.w	r8, #1
 800f5ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	f47f af6a 	bne.w	800f4aa <_dtoa_r+0x7ca>
 800f5d6:	2001      	movs	r0, #1
 800f5d8:	e76f      	b.n	800f4ba <_dtoa_r+0x7da>
 800f5da:	f04f 0800 	mov.w	r8, #0
 800f5de:	e7f6      	b.n	800f5ce <_dtoa_r+0x8ee>
 800f5e0:	4698      	mov	r8, r3
 800f5e2:	e7f4      	b.n	800f5ce <_dtoa_r+0x8ee>
 800f5e4:	f43f af7d 	beq.w	800f4e2 <_dtoa_r+0x802>
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	301c      	adds	r0, #28
 800f5ec:	e772      	b.n	800f4d4 <_dtoa_r+0x7f4>
 800f5ee:	9b03      	ldr	r3, [sp, #12]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	dc37      	bgt.n	800f664 <_dtoa_r+0x984>
 800f5f4:	9b06      	ldr	r3, [sp, #24]
 800f5f6:	2b02      	cmp	r3, #2
 800f5f8:	dd34      	ble.n	800f664 <_dtoa_r+0x984>
 800f5fa:	9b03      	ldr	r3, [sp, #12]
 800f5fc:	9302      	str	r3, [sp, #8]
 800f5fe:	9b02      	ldr	r3, [sp, #8]
 800f600:	b96b      	cbnz	r3, 800f61e <_dtoa_r+0x93e>
 800f602:	4631      	mov	r1, r6
 800f604:	2205      	movs	r2, #5
 800f606:	4620      	mov	r0, r4
 800f608:	f000 fd48 	bl	801009c <__multadd>
 800f60c:	4601      	mov	r1, r0
 800f60e:	4606      	mov	r6, r0
 800f610:	ee18 0a10 	vmov	r0, s16
 800f614:	f000 ffac 	bl	8010570 <__mcmp>
 800f618:	2800      	cmp	r0, #0
 800f61a:	f73f adbb 	bgt.w	800f194 <_dtoa_r+0x4b4>
 800f61e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f620:	9d01      	ldr	r5, [sp, #4]
 800f622:	43db      	mvns	r3, r3
 800f624:	9300      	str	r3, [sp, #0]
 800f626:	f04f 0800 	mov.w	r8, #0
 800f62a:	4631      	mov	r1, r6
 800f62c:	4620      	mov	r0, r4
 800f62e:	f000 fd13 	bl	8010058 <_Bfree>
 800f632:	2f00      	cmp	r7, #0
 800f634:	f43f aea4 	beq.w	800f380 <_dtoa_r+0x6a0>
 800f638:	f1b8 0f00 	cmp.w	r8, #0
 800f63c:	d005      	beq.n	800f64a <_dtoa_r+0x96a>
 800f63e:	45b8      	cmp	r8, r7
 800f640:	d003      	beq.n	800f64a <_dtoa_r+0x96a>
 800f642:	4641      	mov	r1, r8
 800f644:	4620      	mov	r0, r4
 800f646:	f000 fd07 	bl	8010058 <_Bfree>
 800f64a:	4639      	mov	r1, r7
 800f64c:	4620      	mov	r0, r4
 800f64e:	f000 fd03 	bl	8010058 <_Bfree>
 800f652:	e695      	b.n	800f380 <_dtoa_r+0x6a0>
 800f654:	2600      	movs	r6, #0
 800f656:	4637      	mov	r7, r6
 800f658:	e7e1      	b.n	800f61e <_dtoa_r+0x93e>
 800f65a:	9700      	str	r7, [sp, #0]
 800f65c:	4637      	mov	r7, r6
 800f65e:	e599      	b.n	800f194 <_dtoa_r+0x4b4>
 800f660:	40240000 	.word	0x40240000
 800f664:	9b08      	ldr	r3, [sp, #32]
 800f666:	2b00      	cmp	r3, #0
 800f668:	f000 80ca 	beq.w	800f800 <_dtoa_r+0xb20>
 800f66c:	9b03      	ldr	r3, [sp, #12]
 800f66e:	9302      	str	r3, [sp, #8]
 800f670:	2d00      	cmp	r5, #0
 800f672:	dd05      	ble.n	800f680 <_dtoa_r+0x9a0>
 800f674:	4639      	mov	r1, r7
 800f676:	462a      	mov	r2, r5
 800f678:	4620      	mov	r0, r4
 800f67a:	f000 ff09 	bl	8010490 <__lshift>
 800f67e:	4607      	mov	r7, r0
 800f680:	f1b8 0f00 	cmp.w	r8, #0
 800f684:	d05b      	beq.n	800f73e <_dtoa_r+0xa5e>
 800f686:	6879      	ldr	r1, [r7, #4]
 800f688:	4620      	mov	r0, r4
 800f68a:	f000 fca5 	bl	800ffd8 <_Balloc>
 800f68e:	4605      	mov	r5, r0
 800f690:	b928      	cbnz	r0, 800f69e <_dtoa_r+0x9be>
 800f692:	4b87      	ldr	r3, [pc, #540]	; (800f8b0 <_dtoa_r+0xbd0>)
 800f694:	4602      	mov	r2, r0
 800f696:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f69a:	f7ff bb3b 	b.w	800ed14 <_dtoa_r+0x34>
 800f69e:	693a      	ldr	r2, [r7, #16]
 800f6a0:	3202      	adds	r2, #2
 800f6a2:	0092      	lsls	r2, r2, #2
 800f6a4:	f107 010c 	add.w	r1, r7, #12
 800f6a8:	300c      	adds	r0, #12
 800f6aa:	f7fd fd21 	bl	800d0f0 <memcpy>
 800f6ae:	2201      	movs	r2, #1
 800f6b0:	4629      	mov	r1, r5
 800f6b2:	4620      	mov	r0, r4
 800f6b4:	f000 feec 	bl	8010490 <__lshift>
 800f6b8:	9b01      	ldr	r3, [sp, #4]
 800f6ba:	f103 0901 	add.w	r9, r3, #1
 800f6be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f6c2:	4413      	add	r3, r2
 800f6c4:	9305      	str	r3, [sp, #20]
 800f6c6:	f00a 0301 	and.w	r3, sl, #1
 800f6ca:	46b8      	mov	r8, r7
 800f6cc:	9304      	str	r3, [sp, #16]
 800f6ce:	4607      	mov	r7, r0
 800f6d0:	4631      	mov	r1, r6
 800f6d2:	ee18 0a10 	vmov	r0, s16
 800f6d6:	f7ff fa77 	bl	800ebc8 <quorem>
 800f6da:	4641      	mov	r1, r8
 800f6dc:	9002      	str	r0, [sp, #8]
 800f6de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f6e2:	ee18 0a10 	vmov	r0, s16
 800f6e6:	f000 ff43 	bl	8010570 <__mcmp>
 800f6ea:	463a      	mov	r2, r7
 800f6ec:	9003      	str	r0, [sp, #12]
 800f6ee:	4631      	mov	r1, r6
 800f6f0:	4620      	mov	r0, r4
 800f6f2:	f000 ff59 	bl	80105a8 <__mdiff>
 800f6f6:	68c2      	ldr	r2, [r0, #12]
 800f6f8:	f109 3bff 	add.w	fp, r9, #4294967295
 800f6fc:	4605      	mov	r5, r0
 800f6fe:	bb02      	cbnz	r2, 800f742 <_dtoa_r+0xa62>
 800f700:	4601      	mov	r1, r0
 800f702:	ee18 0a10 	vmov	r0, s16
 800f706:	f000 ff33 	bl	8010570 <__mcmp>
 800f70a:	4602      	mov	r2, r0
 800f70c:	4629      	mov	r1, r5
 800f70e:	4620      	mov	r0, r4
 800f710:	9207      	str	r2, [sp, #28]
 800f712:	f000 fca1 	bl	8010058 <_Bfree>
 800f716:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f71a:	ea43 0102 	orr.w	r1, r3, r2
 800f71e:	9b04      	ldr	r3, [sp, #16]
 800f720:	430b      	orrs	r3, r1
 800f722:	464d      	mov	r5, r9
 800f724:	d10f      	bne.n	800f746 <_dtoa_r+0xa66>
 800f726:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f72a:	d02a      	beq.n	800f782 <_dtoa_r+0xaa2>
 800f72c:	9b03      	ldr	r3, [sp, #12]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	dd02      	ble.n	800f738 <_dtoa_r+0xa58>
 800f732:	9b02      	ldr	r3, [sp, #8]
 800f734:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f738:	f88b a000 	strb.w	sl, [fp]
 800f73c:	e775      	b.n	800f62a <_dtoa_r+0x94a>
 800f73e:	4638      	mov	r0, r7
 800f740:	e7ba      	b.n	800f6b8 <_dtoa_r+0x9d8>
 800f742:	2201      	movs	r2, #1
 800f744:	e7e2      	b.n	800f70c <_dtoa_r+0xa2c>
 800f746:	9b03      	ldr	r3, [sp, #12]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	db04      	blt.n	800f756 <_dtoa_r+0xa76>
 800f74c:	9906      	ldr	r1, [sp, #24]
 800f74e:	430b      	orrs	r3, r1
 800f750:	9904      	ldr	r1, [sp, #16]
 800f752:	430b      	orrs	r3, r1
 800f754:	d122      	bne.n	800f79c <_dtoa_r+0xabc>
 800f756:	2a00      	cmp	r2, #0
 800f758:	ddee      	ble.n	800f738 <_dtoa_r+0xa58>
 800f75a:	ee18 1a10 	vmov	r1, s16
 800f75e:	2201      	movs	r2, #1
 800f760:	4620      	mov	r0, r4
 800f762:	f000 fe95 	bl	8010490 <__lshift>
 800f766:	4631      	mov	r1, r6
 800f768:	ee08 0a10 	vmov	s16, r0
 800f76c:	f000 ff00 	bl	8010570 <__mcmp>
 800f770:	2800      	cmp	r0, #0
 800f772:	dc03      	bgt.n	800f77c <_dtoa_r+0xa9c>
 800f774:	d1e0      	bne.n	800f738 <_dtoa_r+0xa58>
 800f776:	f01a 0f01 	tst.w	sl, #1
 800f77a:	d0dd      	beq.n	800f738 <_dtoa_r+0xa58>
 800f77c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f780:	d1d7      	bne.n	800f732 <_dtoa_r+0xa52>
 800f782:	2339      	movs	r3, #57	; 0x39
 800f784:	f88b 3000 	strb.w	r3, [fp]
 800f788:	462b      	mov	r3, r5
 800f78a:	461d      	mov	r5, r3
 800f78c:	3b01      	subs	r3, #1
 800f78e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f792:	2a39      	cmp	r2, #57	; 0x39
 800f794:	d071      	beq.n	800f87a <_dtoa_r+0xb9a>
 800f796:	3201      	adds	r2, #1
 800f798:	701a      	strb	r2, [r3, #0]
 800f79a:	e746      	b.n	800f62a <_dtoa_r+0x94a>
 800f79c:	2a00      	cmp	r2, #0
 800f79e:	dd07      	ble.n	800f7b0 <_dtoa_r+0xad0>
 800f7a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f7a4:	d0ed      	beq.n	800f782 <_dtoa_r+0xaa2>
 800f7a6:	f10a 0301 	add.w	r3, sl, #1
 800f7aa:	f88b 3000 	strb.w	r3, [fp]
 800f7ae:	e73c      	b.n	800f62a <_dtoa_r+0x94a>
 800f7b0:	9b05      	ldr	r3, [sp, #20]
 800f7b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f7b6:	4599      	cmp	r9, r3
 800f7b8:	d047      	beq.n	800f84a <_dtoa_r+0xb6a>
 800f7ba:	ee18 1a10 	vmov	r1, s16
 800f7be:	2300      	movs	r3, #0
 800f7c0:	220a      	movs	r2, #10
 800f7c2:	4620      	mov	r0, r4
 800f7c4:	f000 fc6a 	bl	801009c <__multadd>
 800f7c8:	45b8      	cmp	r8, r7
 800f7ca:	ee08 0a10 	vmov	s16, r0
 800f7ce:	f04f 0300 	mov.w	r3, #0
 800f7d2:	f04f 020a 	mov.w	r2, #10
 800f7d6:	4641      	mov	r1, r8
 800f7d8:	4620      	mov	r0, r4
 800f7da:	d106      	bne.n	800f7ea <_dtoa_r+0xb0a>
 800f7dc:	f000 fc5e 	bl	801009c <__multadd>
 800f7e0:	4680      	mov	r8, r0
 800f7e2:	4607      	mov	r7, r0
 800f7e4:	f109 0901 	add.w	r9, r9, #1
 800f7e8:	e772      	b.n	800f6d0 <_dtoa_r+0x9f0>
 800f7ea:	f000 fc57 	bl	801009c <__multadd>
 800f7ee:	4639      	mov	r1, r7
 800f7f0:	4680      	mov	r8, r0
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	220a      	movs	r2, #10
 800f7f6:	4620      	mov	r0, r4
 800f7f8:	f000 fc50 	bl	801009c <__multadd>
 800f7fc:	4607      	mov	r7, r0
 800f7fe:	e7f1      	b.n	800f7e4 <_dtoa_r+0xb04>
 800f800:	9b03      	ldr	r3, [sp, #12]
 800f802:	9302      	str	r3, [sp, #8]
 800f804:	9d01      	ldr	r5, [sp, #4]
 800f806:	ee18 0a10 	vmov	r0, s16
 800f80a:	4631      	mov	r1, r6
 800f80c:	f7ff f9dc 	bl	800ebc8 <quorem>
 800f810:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f814:	9b01      	ldr	r3, [sp, #4]
 800f816:	f805 ab01 	strb.w	sl, [r5], #1
 800f81a:	1aea      	subs	r2, r5, r3
 800f81c:	9b02      	ldr	r3, [sp, #8]
 800f81e:	4293      	cmp	r3, r2
 800f820:	dd09      	ble.n	800f836 <_dtoa_r+0xb56>
 800f822:	ee18 1a10 	vmov	r1, s16
 800f826:	2300      	movs	r3, #0
 800f828:	220a      	movs	r2, #10
 800f82a:	4620      	mov	r0, r4
 800f82c:	f000 fc36 	bl	801009c <__multadd>
 800f830:	ee08 0a10 	vmov	s16, r0
 800f834:	e7e7      	b.n	800f806 <_dtoa_r+0xb26>
 800f836:	9b02      	ldr	r3, [sp, #8]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	bfc8      	it	gt
 800f83c:	461d      	movgt	r5, r3
 800f83e:	9b01      	ldr	r3, [sp, #4]
 800f840:	bfd8      	it	le
 800f842:	2501      	movle	r5, #1
 800f844:	441d      	add	r5, r3
 800f846:	f04f 0800 	mov.w	r8, #0
 800f84a:	ee18 1a10 	vmov	r1, s16
 800f84e:	2201      	movs	r2, #1
 800f850:	4620      	mov	r0, r4
 800f852:	f000 fe1d 	bl	8010490 <__lshift>
 800f856:	4631      	mov	r1, r6
 800f858:	ee08 0a10 	vmov	s16, r0
 800f85c:	f000 fe88 	bl	8010570 <__mcmp>
 800f860:	2800      	cmp	r0, #0
 800f862:	dc91      	bgt.n	800f788 <_dtoa_r+0xaa8>
 800f864:	d102      	bne.n	800f86c <_dtoa_r+0xb8c>
 800f866:	f01a 0f01 	tst.w	sl, #1
 800f86a:	d18d      	bne.n	800f788 <_dtoa_r+0xaa8>
 800f86c:	462b      	mov	r3, r5
 800f86e:	461d      	mov	r5, r3
 800f870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f874:	2a30      	cmp	r2, #48	; 0x30
 800f876:	d0fa      	beq.n	800f86e <_dtoa_r+0xb8e>
 800f878:	e6d7      	b.n	800f62a <_dtoa_r+0x94a>
 800f87a:	9a01      	ldr	r2, [sp, #4]
 800f87c:	429a      	cmp	r2, r3
 800f87e:	d184      	bne.n	800f78a <_dtoa_r+0xaaa>
 800f880:	9b00      	ldr	r3, [sp, #0]
 800f882:	3301      	adds	r3, #1
 800f884:	9300      	str	r3, [sp, #0]
 800f886:	2331      	movs	r3, #49	; 0x31
 800f888:	7013      	strb	r3, [r2, #0]
 800f88a:	e6ce      	b.n	800f62a <_dtoa_r+0x94a>
 800f88c:	4b09      	ldr	r3, [pc, #36]	; (800f8b4 <_dtoa_r+0xbd4>)
 800f88e:	f7ff ba95 	b.w	800edbc <_dtoa_r+0xdc>
 800f892:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f894:	2b00      	cmp	r3, #0
 800f896:	f47f aa6e 	bne.w	800ed76 <_dtoa_r+0x96>
 800f89a:	4b07      	ldr	r3, [pc, #28]	; (800f8b8 <_dtoa_r+0xbd8>)
 800f89c:	f7ff ba8e 	b.w	800edbc <_dtoa_r+0xdc>
 800f8a0:	9b02      	ldr	r3, [sp, #8]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	dcae      	bgt.n	800f804 <_dtoa_r+0xb24>
 800f8a6:	9b06      	ldr	r3, [sp, #24]
 800f8a8:	2b02      	cmp	r3, #2
 800f8aa:	f73f aea8 	bgt.w	800f5fe <_dtoa_r+0x91e>
 800f8ae:	e7a9      	b.n	800f804 <_dtoa_r+0xb24>
 800f8b0:	080121a8 	.word	0x080121a8
 800f8b4:	08011fa8 	.word	0x08011fa8
 800f8b8:	08012129 	.word	0x08012129

0800f8bc <rshift>:
 800f8bc:	6903      	ldr	r3, [r0, #16]
 800f8be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f8c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f8c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f8ca:	f100 0414 	add.w	r4, r0, #20
 800f8ce:	dd45      	ble.n	800f95c <rshift+0xa0>
 800f8d0:	f011 011f 	ands.w	r1, r1, #31
 800f8d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f8d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f8dc:	d10c      	bne.n	800f8f8 <rshift+0x3c>
 800f8de:	f100 0710 	add.w	r7, r0, #16
 800f8e2:	4629      	mov	r1, r5
 800f8e4:	42b1      	cmp	r1, r6
 800f8e6:	d334      	bcc.n	800f952 <rshift+0x96>
 800f8e8:	1a9b      	subs	r3, r3, r2
 800f8ea:	009b      	lsls	r3, r3, #2
 800f8ec:	1eea      	subs	r2, r5, #3
 800f8ee:	4296      	cmp	r6, r2
 800f8f0:	bf38      	it	cc
 800f8f2:	2300      	movcc	r3, #0
 800f8f4:	4423      	add	r3, r4
 800f8f6:	e015      	b.n	800f924 <rshift+0x68>
 800f8f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f8fc:	f1c1 0820 	rsb	r8, r1, #32
 800f900:	40cf      	lsrs	r7, r1
 800f902:	f105 0e04 	add.w	lr, r5, #4
 800f906:	46a1      	mov	r9, r4
 800f908:	4576      	cmp	r6, lr
 800f90a:	46f4      	mov	ip, lr
 800f90c:	d815      	bhi.n	800f93a <rshift+0x7e>
 800f90e:	1a9a      	subs	r2, r3, r2
 800f910:	0092      	lsls	r2, r2, #2
 800f912:	3a04      	subs	r2, #4
 800f914:	3501      	adds	r5, #1
 800f916:	42ae      	cmp	r6, r5
 800f918:	bf38      	it	cc
 800f91a:	2200      	movcc	r2, #0
 800f91c:	18a3      	adds	r3, r4, r2
 800f91e:	50a7      	str	r7, [r4, r2]
 800f920:	b107      	cbz	r7, 800f924 <rshift+0x68>
 800f922:	3304      	adds	r3, #4
 800f924:	1b1a      	subs	r2, r3, r4
 800f926:	42a3      	cmp	r3, r4
 800f928:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f92c:	bf08      	it	eq
 800f92e:	2300      	moveq	r3, #0
 800f930:	6102      	str	r2, [r0, #16]
 800f932:	bf08      	it	eq
 800f934:	6143      	streq	r3, [r0, #20]
 800f936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f93a:	f8dc c000 	ldr.w	ip, [ip]
 800f93e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f942:	ea4c 0707 	orr.w	r7, ip, r7
 800f946:	f849 7b04 	str.w	r7, [r9], #4
 800f94a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f94e:	40cf      	lsrs	r7, r1
 800f950:	e7da      	b.n	800f908 <rshift+0x4c>
 800f952:	f851 cb04 	ldr.w	ip, [r1], #4
 800f956:	f847 cf04 	str.w	ip, [r7, #4]!
 800f95a:	e7c3      	b.n	800f8e4 <rshift+0x28>
 800f95c:	4623      	mov	r3, r4
 800f95e:	e7e1      	b.n	800f924 <rshift+0x68>

0800f960 <__hexdig_fun>:
 800f960:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f964:	2b09      	cmp	r3, #9
 800f966:	d802      	bhi.n	800f96e <__hexdig_fun+0xe>
 800f968:	3820      	subs	r0, #32
 800f96a:	b2c0      	uxtb	r0, r0
 800f96c:	4770      	bx	lr
 800f96e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f972:	2b05      	cmp	r3, #5
 800f974:	d801      	bhi.n	800f97a <__hexdig_fun+0x1a>
 800f976:	3847      	subs	r0, #71	; 0x47
 800f978:	e7f7      	b.n	800f96a <__hexdig_fun+0xa>
 800f97a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f97e:	2b05      	cmp	r3, #5
 800f980:	d801      	bhi.n	800f986 <__hexdig_fun+0x26>
 800f982:	3827      	subs	r0, #39	; 0x27
 800f984:	e7f1      	b.n	800f96a <__hexdig_fun+0xa>
 800f986:	2000      	movs	r0, #0
 800f988:	4770      	bx	lr
	...

0800f98c <__gethex>:
 800f98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f990:	ed2d 8b02 	vpush	{d8}
 800f994:	b089      	sub	sp, #36	; 0x24
 800f996:	ee08 0a10 	vmov	s16, r0
 800f99a:	9304      	str	r3, [sp, #16]
 800f99c:	4bb4      	ldr	r3, [pc, #720]	; (800fc70 <__gethex+0x2e4>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	9301      	str	r3, [sp, #4]
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	468b      	mov	fp, r1
 800f9a6:	4690      	mov	r8, r2
 800f9a8:	f7f0 fc1a 	bl	80001e0 <strlen>
 800f9ac:	9b01      	ldr	r3, [sp, #4]
 800f9ae:	f8db 2000 	ldr.w	r2, [fp]
 800f9b2:	4403      	add	r3, r0
 800f9b4:	4682      	mov	sl, r0
 800f9b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f9ba:	9305      	str	r3, [sp, #20]
 800f9bc:	1c93      	adds	r3, r2, #2
 800f9be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f9c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f9c6:	32fe      	adds	r2, #254	; 0xfe
 800f9c8:	18d1      	adds	r1, r2, r3
 800f9ca:	461f      	mov	r7, r3
 800f9cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f9d0:	9100      	str	r1, [sp, #0]
 800f9d2:	2830      	cmp	r0, #48	; 0x30
 800f9d4:	d0f8      	beq.n	800f9c8 <__gethex+0x3c>
 800f9d6:	f7ff ffc3 	bl	800f960 <__hexdig_fun>
 800f9da:	4604      	mov	r4, r0
 800f9dc:	2800      	cmp	r0, #0
 800f9de:	d13a      	bne.n	800fa56 <__gethex+0xca>
 800f9e0:	9901      	ldr	r1, [sp, #4]
 800f9e2:	4652      	mov	r2, sl
 800f9e4:	4638      	mov	r0, r7
 800f9e6:	f001 fa23 	bl	8010e30 <strncmp>
 800f9ea:	4605      	mov	r5, r0
 800f9ec:	2800      	cmp	r0, #0
 800f9ee:	d168      	bne.n	800fac2 <__gethex+0x136>
 800f9f0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f9f4:	eb07 060a 	add.w	r6, r7, sl
 800f9f8:	f7ff ffb2 	bl	800f960 <__hexdig_fun>
 800f9fc:	2800      	cmp	r0, #0
 800f9fe:	d062      	beq.n	800fac6 <__gethex+0x13a>
 800fa00:	4633      	mov	r3, r6
 800fa02:	7818      	ldrb	r0, [r3, #0]
 800fa04:	2830      	cmp	r0, #48	; 0x30
 800fa06:	461f      	mov	r7, r3
 800fa08:	f103 0301 	add.w	r3, r3, #1
 800fa0c:	d0f9      	beq.n	800fa02 <__gethex+0x76>
 800fa0e:	f7ff ffa7 	bl	800f960 <__hexdig_fun>
 800fa12:	2301      	movs	r3, #1
 800fa14:	fab0 f480 	clz	r4, r0
 800fa18:	0964      	lsrs	r4, r4, #5
 800fa1a:	4635      	mov	r5, r6
 800fa1c:	9300      	str	r3, [sp, #0]
 800fa1e:	463a      	mov	r2, r7
 800fa20:	4616      	mov	r6, r2
 800fa22:	3201      	adds	r2, #1
 800fa24:	7830      	ldrb	r0, [r6, #0]
 800fa26:	f7ff ff9b 	bl	800f960 <__hexdig_fun>
 800fa2a:	2800      	cmp	r0, #0
 800fa2c:	d1f8      	bne.n	800fa20 <__gethex+0x94>
 800fa2e:	9901      	ldr	r1, [sp, #4]
 800fa30:	4652      	mov	r2, sl
 800fa32:	4630      	mov	r0, r6
 800fa34:	f001 f9fc 	bl	8010e30 <strncmp>
 800fa38:	b980      	cbnz	r0, 800fa5c <__gethex+0xd0>
 800fa3a:	b94d      	cbnz	r5, 800fa50 <__gethex+0xc4>
 800fa3c:	eb06 050a 	add.w	r5, r6, sl
 800fa40:	462a      	mov	r2, r5
 800fa42:	4616      	mov	r6, r2
 800fa44:	3201      	adds	r2, #1
 800fa46:	7830      	ldrb	r0, [r6, #0]
 800fa48:	f7ff ff8a 	bl	800f960 <__hexdig_fun>
 800fa4c:	2800      	cmp	r0, #0
 800fa4e:	d1f8      	bne.n	800fa42 <__gethex+0xb6>
 800fa50:	1bad      	subs	r5, r5, r6
 800fa52:	00ad      	lsls	r5, r5, #2
 800fa54:	e004      	b.n	800fa60 <__gethex+0xd4>
 800fa56:	2400      	movs	r4, #0
 800fa58:	4625      	mov	r5, r4
 800fa5a:	e7e0      	b.n	800fa1e <__gethex+0x92>
 800fa5c:	2d00      	cmp	r5, #0
 800fa5e:	d1f7      	bne.n	800fa50 <__gethex+0xc4>
 800fa60:	7833      	ldrb	r3, [r6, #0]
 800fa62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fa66:	2b50      	cmp	r3, #80	; 0x50
 800fa68:	d13b      	bne.n	800fae2 <__gethex+0x156>
 800fa6a:	7873      	ldrb	r3, [r6, #1]
 800fa6c:	2b2b      	cmp	r3, #43	; 0x2b
 800fa6e:	d02c      	beq.n	800faca <__gethex+0x13e>
 800fa70:	2b2d      	cmp	r3, #45	; 0x2d
 800fa72:	d02e      	beq.n	800fad2 <__gethex+0x146>
 800fa74:	1c71      	adds	r1, r6, #1
 800fa76:	f04f 0900 	mov.w	r9, #0
 800fa7a:	7808      	ldrb	r0, [r1, #0]
 800fa7c:	f7ff ff70 	bl	800f960 <__hexdig_fun>
 800fa80:	1e43      	subs	r3, r0, #1
 800fa82:	b2db      	uxtb	r3, r3
 800fa84:	2b18      	cmp	r3, #24
 800fa86:	d82c      	bhi.n	800fae2 <__gethex+0x156>
 800fa88:	f1a0 0210 	sub.w	r2, r0, #16
 800fa8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fa90:	f7ff ff66 	bl	800f960 <__hexdig_fun>
 800fa94:	1e43      	subs	r3, r0, #1
 800fa96:	b2db      	uxtb	r3, r3
 800fa98:	2b18      	cmp	r3, #24
 800fa9a:	d91d      	bls.n	800fad8 <__gethex+0x14c>
 800fa9c:	f1b9 0f00 	cmp.w	r9, #0
 800faa0:	d000      	beq.n	800faa4 <__gethex+0x118>
 800faa2:	4252      	negs	r2, r2
 800faa4:	4415      	add	r5, r2
 800faa6:	f8cb 1000 	str.w	r1, [fp]
 800faaa:	b1e4      	cbz	r4, 800fae6 <__gethex+0x15a>
 800faac:	9b00      	ldr	r3, [sp, #0]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	bf14      	ite	ne
 800fab2:	2700      	movne	r7, #0
 800fab4:	2706      	moveq	r7, #6
 800fab6:	4638      	mov	r0, r7
 800fab8:	b009      	add	sp, #36	; 0x24
 800faba:	ecbd 8b02 	vpop	{d8}
 800fabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fac2:	463e      	mov	r6, r7
 800fac4:	4625      	mov	r5, r4
 800fac6:	2401      	movs	r4, #1
 800fac8:	e7ca      	b.n	800fa60 <__gethex+0xd4>
 800faca:	f04f 0900 	mov.w	r9, #0
 800face:	1cb1      	adds	r1, r6, #2
 800fad0:	e7d3      	b.n	800fa7a <__gethex+0xee>
 800fad2:	f04f 0901 	mov.w	r9, #1
 800fad6:	e7fa      	b.n	800face <__gethex+0x142>
 800fad8:	230a      	movs	r3, #10
 800fada:	fb03 0202 	mla	r2, r3, r2, r0
 800fade:	3a10      	subs	r2, #16
 800fae0:	e7d4      	b.n	800fa8c <__gethex+0x100>
 800fae2:	4631      	mov	r1, r6
 800fae4:	e7df      	b.n	800faa6 <__gethex+0x11a>
 800fae6:	1bf3      	subs	r3, r6, r7
 800fae8:	3b01      	subs	r3, #1
 800faea:	4621      	mov	r1, r4
 800faec:	2b07      	cmp	r3, #7
 800faee:	dc0b      	bgt.n	800fb08 <__gethex+0x17c>
 800faf0:	ee18 0a10 	vmov	r0, s16
 800faf4:	f000 fa70 	bl	800ffd8 <_Balloc>
 800faf8:	4604      	mov	r4, r0
 800fafa:	b940      	cbnz	r0, 800fb0e <__gethex+0x182>
 800fafc:	4b5d      	ldr	r3, [pc, #372]	; (800fc74 <__gethex+0x2e8>)
 800fafe:	4602      	mov	r2, r0
 800fb00:	21de      	movs	r1, #222	; 0xde
 800fb02:	485d      	ldr	r0, [pc, #372]	; (800fc78 <__gethex+0x2ec>)
 800fb04:	f001 f9b6 	bl	8010e74 <__assert_func>
 800fb08:	3101      	adds	r1, #1
 800fb0a:	105b      	asrs	r3, r3, #1
 800fb0c:	e7ee      	b.n	800faec <__gethex+0x160>
 800fb0e:	f100 0914 	add.w	r9, r0, #20
 800fb12:	f04f 0b00 	mov.w	fp, #0
 800fb16:	f1ca 0301 	rsb	r3, sl, #1
 800fb1a:	f8cd 9008 	str.w	r9, [sp, #8]
 800fb1e:	f8cd b000 	str.w	fp, [sp]
 800fb22:	9306      	str	r3, [sp, #24]
 800fb24:	42b7      	cmp	r7, r6
 800fb26:	d340      	bcc.n	800fbaa <__gethex+0x21e>
 800fb28:	9802      	ldr	r0, [sp, #8]
 800fb2a:	9b00      	ldr	r3, [sp, #0]
 800fb2c:	f840 3b04 	str.w	r3, [r0], #4
 800fb30:	eba0 0009 	sub.w	r0, r0, r9
 800fb34:	1080      	asrs	r0, r0, #2
 800fb36:	0146      	lsls	r6, r0, #5
 800fb38:	6120      	str	r0, [r4, #16]
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f000 fb3e 	bl	80101bc <__hi0bits>
 800fb40:	1a30      	subs	r0, r6, r0
 800fb42:	f8d8 6000 	ldr.w	r6, [r8]
 800fb46:	42b0      	cmp	r0, r6
 800fb48:	dd63      	ble.n	800fc12 <__gethex+0x286>
 800fb4a:	1b87      	subs	r7, r0, r6
 800fb4c:	4639      	mov	r1, r7
 800fb4e:	4620      	mov	r0, r4
 800fb50:	f000 fee2 	bl	8010918 <__any_on>
 800fb54:	4682      	mov	sl, r0
 800fb56:	b1a8      	cbz	r0, 800fb84 <__gethex+0x1f8>
 800fb58:	1e7b      	subs	r3, r7, #1
 800fb5a:	1159      	asrs	r1, r3, #5
 800fb5c:	f003 021f 	and.w	r2, r3, #31
 800fb60:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fb64:	f04f 0a01 	mov.w	sl, #1
 800fb68:	fa0a f202 	lsl.w	r2, sl, r2
 800fb6c:	420a      	tst	r2, r1
 800fb6e:	d009      	beq.n	800fb84 <__gethex+0x1f8>
 800fb70:	4553      	cmp	r3, sl
 800fb72:	dd05      	ble.n	800fb80 <__gethex+0x1f4>
 800fb74:	1eb9      	subs	r1, r7, #2
 800fb76:	4620      	mov	r0, r4
 800fb78:	f000 fece 	bl	8010918 <__any_on>
 800fb7c:	2800      	cmp	r0, #0
 800fb7e:	d145      	bne.n	800fc0c <__gethex+0x280>
 800fb80:	f04f 0a02 	mov.w	sl, #2
 800fb84:	4639      	mov	r1, r7
 800fb86:	4620      	mov	r0, r4
 800fb88:	f7ff fe98 	bl	800f8bc <rshift>
 800fb8c:	443d      	add	r5, r7
 800fb8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fb92:	42ab      	cmp	r3, r5
 800fb94:	da4c      	bge.n	800fc30 <__gethex+0x2a4>
 800fb96:	ee18 0a10 	vmov	r0, s16
 800fb9a:	4621      	mov	r1, r4
 800fb9c:	f000 fa5c 	bl	8010058 <_Bfree>
 800fba0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fba2:	2300      	movs	r3, #0
 800fba4:	6013      	str	r3, [r2, #0]
 800fba6:	27a3      	movs	r7, #163	; 0xa3
 800fba8:	e785      	b.n	800fab6 <__gethex+0x12a>
 800fbaa:	1e73      	subs	r3, r6, #1
 800fbac:	9a05      	ldr	r2, [sp, #20]
 800fbae:	9303      	str	r3, [sp, #12]
 800fbb0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fbb4:	4293      	cmp	r3, r2
 800fbb6:	d019      	beq.n	800fbec <__gethex+0x260>
 800fbb8:	f1bb 0f20 	cmp.w	fp, #32
 800fbbc:	d107      	bne.n	800fbce <__gethex+0x242>
 800fbbe:	9b02      	ldr	r3, [sp, #8]
 800fbc0:	9a00      	ldr	r2, [sp, #0]
 800fbc2:	f843 2b04 	str.w	r2, [r3], #4
 800fbc6:	9302      	str	r3, [sp, #8]
 800fbc8:	2300      	movs	r3, #0
 800fbca:	9300      	str	r3, [sp, #0]
 800fbcc:	469b      	mov	fp, r3
 800fbce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fbd2:	f7ff fec5 	bl	800f960 <__hexdig_fun>
 800fbd6:	9b00      	ldr	r3, [sp, #0]
 800fbd8:	f000 000f 	and.w	r0, r0, #15
 800fbdc:	fa00 f00b 	lsl.w	r0, r0, fp
 800fbe0:	4303      	orrs	r3, r0
 800fbe2:	9300      	str	r3, [sp, #0]
 800fbe4:	f10b 0b04 	add.w	fp, fp, #4
 800fbe8:	9b03      	ldr	r3, [sp, #12]
 800fbea:	e00d      	b.n	800fc08 <__gethex+0x27c>
 800fbec:	9b03      	ldr	r3, [sp, #12]
 800fbee:	9a06      	ldr	r2, [sp, #24]
 800fbf0:	4413      	add	r3, r2
 800fbf2:	42bb      	cmp	r3, r7
 800fbf4:	d3e0      	bcc.n	800fbb8 <__gethex+0x22c>
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	9901      	ldr	r1, [sp, #4]
 800fbfa:	9307      	str	r3, [sp, #28]
 800fbfc:	4652      	mov	r2, sl
 800fbfe:	f001 f917 	bl	8010e30 <strncmp>
 800fc02:	9b07      	ldr	r3, [sp, #28]
 800fc04:	2800      	cmp	r0, #0
 800fc06:	d1d7      	bne.n	800fbb8 <__gethex+0x22c>
 800fc08:	461e      	mov	r6, r3
 800fc0a:	e78b      	b.n	800fb24 <__gethex+0x198>
 800fc0c:	f04f 0a03 	mov.w	sl, #3
 800fc10:	e7b8      	b.n	800fb84 <__gethex+0x1f8>
 800fc12:	da0a      	bge.n	800fc2a <__gethex+0x29e>
 800fc14:	1a37      	subs	r7, r6, r0
 800fc16:	4621      	mov	r1, r4
 800fc18:	ee18 0a10 	vmov	r0, s16
 800fc1c:	463a      	mov	r2, r7
 800fc1e:	f000 fc37 	bl	8010490 <__lshift>
 800fc22:	1bed      	subs	r5, r5, r7
 800fc24:	4604      	mov	r4, r0
 800fc26:	f100 0914 	add.w	r9, r0, #20
 800fc2a:	f04f 0a00 	mov.w	sl, #0
 800fc2e:	e7ae      	b.n	800fb8e <__gethex+0x202>
 800fc30:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fc34:	42a8      	cmp	r0, r5
 800fc36:	dd72      	ble.n	800fd1e <__gethex+0x392>
 800fc38:	1b45      	subs	r5, r0, r5
 800fc3a:	42ae      	cmp	r6, r5
 800fc3c:	dc36      	bgt.n	800fcac <__gethex+0x320>
 800fc3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fc42:	2b02      	cmp	r3, #2
 800fc44:	d02a      	beq.n	800fc9c <__gethex+0x310>
 800fc46:	2b03      	cmp	r3, #3
 800fc48:	d02c      	beq.n	800fca4 <__gethex+0x318>
 800fc4a:	2b01      	cmp	r3, #1
 800fc4c:	d11c      	bne.n	800fc88 <__gethex+0x2fc>
 800fc4e:	42ae      	cmp	r6, r5
 800fc50:	d11a      	bne.n	800fc88 <__gethex+0x2fc>
 800fc52:	2e01      	cmp	r6, #1
 800fc54:	d112      	bne.n	800fc7c <__gethex+0x2f0>
 800fc56:	9a04      	ldr	r2, [sp, #16]
 800fc58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fc5c:	6013      	str	r3, [r2, #0]
 800fc5e:	2301      	movs	r3, #1
 800fc60:	6123      	str	r3, [r4, #16]
 800fc62:	f8c9 3000 	str.w	r3, [r9]
 800fc66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fc68:	2762      	movs	r7, #98	; 0x62
 800fc6a:	601c      	str	r4, [r3, #0]
 800fc6c:	e723      	b.n	800fab6 <__gethex+0x12a>
 800fc6e:	bf00      	nop
 800fc70:	08012220 	.word	0x08012220
 800fc74:	080121a8 	.word	0x080121a8
 800fc78:	080121b9 	.word	0x080121b9
 800fc7c:	1e71      	subs	r1, r6, #1
 800fc7e:	4620      	mov	r0, r4
 800fc80:	f000 fe4a 	bl	8010918 <__any_on>
 800fc84:	2800      	cmp	r0, #0
 800fc86:	d1e6      	bne.n	800fc56 <__gethex+0x2ca>
 800fc88:	ee18 0a10 	vmov	r0, s16
 800fc8c:	4621      	mov	r1, r4
 800fc8e:	f000 f9e3 	bl	8010058 <_Bfree>
 800fc92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fc94:	2300      	movs	r3, #0
 800fc96:	6013      	str	r3, [r2, #0]
 800fc98:	2750      	movs	r7, #80	; 0x50
 800fc9a:	e70c      	b.n	800fab6 <__gethex+0x12a>
 800fc9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d1f2      	bne.n	800fc88 <__gethex+0x2fc>
 800fca2:	e7d8      	b.n	800fc56 <__gethex+0x2ca>
 800fca4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d1d5      	bne.n	800fc56 <__gethex+0x2ca>
 800fcaa:	e7ed      	b.n	800fc88 <__gethex+0x2fc>
 800fcac:	1e6f      	subs	r7, r5, #1
 800fcae:	f1ba 0f00 	cmp.w	sl, #0
 800fcb2:	d131      	bne.n	800fd18 <__gethex+0x38c>
 800fcb4:	b127      	cbz	r7, 800fcc0 <__gethex+0x334>
 800fcb6:	4639      	mov	r1, r7
 800fcb8:	4620      	mov	r0, r4
 800fcba:	f000 fe2d 	bl	8010918 <__any_on>
 800fcbe:	4682      	mov	sl, r0
 800fcc0:	117b      	asrs	r3, r7, #5
 800fcc2:	2101      	movs	r1, #1
 800fcc4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fcc8:	f007 071f 	and.w	r7, r7, #31
 800fccc:	fa01 f707 	lsl.w	r7, r1, r7
 800fcd0:	421f      	tst	r7, r3
 800fcd2:	4629      	mov	r1, r5
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	bf18      	it	ne
 800fcd8:	f04a 0a02 	orrne.w	sl, sl, #2
 800fcdc:	1b76      	subs	r6, r6, r5
 800fcde:	f7ff fded 	bl	800f8bc <rshift>
 800fce2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fce6:	2702      	movs	r7, #2
 800fce8:	f1ba 0f00 	cmp.w	sl, #0
 800fcec:	d048      	beq.n	800fd80 <__gethex+0x3f4>
 800fcee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fcf2:	2b02      	cmp	r3, #2
 800fcf4:	d015      	beq.n	800fd22 <__gethex+0x396>
 800fcf6:	2b03      	cmp	r3, #3
 800fcf8:	d017      	beq.n	800fd2a <__gethex+0x39e>
 800fcfa:	2b01      	cmp	r3, #1
 800fcfc:	d109      	bne.n	800fd12 <__gethex+0x386>
 800fcfe:	f01a 0f02 	tst.w	sl, #2
 800fd02:	d006      	beq.n	800fd12 <__gethex+0x386>
 800fd04:	f8d9 0000 	ldr.w	r0, [r9]
 800fd08:	ea4a 0a00 	orr.w	sl, sl, r0
 800fd0c:	f01a 0f01 	tst.w	sl, #1
 800fd10:	d10e      	bne.n	800fd30 <__gethex+0x3a4>
 800fd12:	f047 0710 	orr.w	r7, r7, #16
 800fd16:	e033      	b.n	800fd80 <__gethex+0x3f4>
 800fd18:	f04f 0a01 	mov.w	sl, #1
 800fd1c:	e7d0      	b.n	800fcc0 <__gethex+0x334>
 800fd1e:	2701      	movs	r7, #1
 800fd20:	e7e2      	b.n	800fce8 <__gethex+0x35c>
 800fd22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd24:	f1c3 0301 	rsb	r3, r3, #1
 800fd28:	9315      	str	r3, [sp, #84]	; 0x54
 800fd2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d0f0      	beq.n	800fd12 <__gethex+0x386>
 800fd30:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fd34:	f104 0314 	add.w	r3, r4, #20
 800fd38:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fd3c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fd40:	f04f 0c00 	mov.w	ip, #0
 800fd44:	4618      	mov	r0, r3
 800fd46:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd4a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fd4e:	d01c      	beq.n	800fd8a <__gethex+0x3fe>
 800fd50:	3201      	adds	r2, #1
 800fd52:	6002      	str	r2, [r0, #0]
 800fd54:	2f02      	cmp	r7, #2
 800fd56:	f104 0314 	add.w	r3, r4, #20
 800fd5a:	d13f      	bne.n	800fddc <__gethex+0x450>
 800fd5c:	f8d8 2000 	ldr.w	r2, [r8]
 800fd60:	3a01      	subs	r2, #1
 800fd62:	42b2      	cmp	r2, r6
 800fd64:	d10a      	bne.n	800fd7c <__gethex+0x3f0>
 800fd66:	1171      	asrs	r1, r6, #5
 800fd68:	2201      	movs	r2, #1
 800fd6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fd6e:	f006 061f 	and.w	r6, r6, #31
 800fd72:	fa02 f606 	lsl.w	r6, r2, r6
 800fd76:	421e      	tst	r6, r3
 800fd78:	bf18      	it	ne
 800fd7a:	4617      	movne	r7, r2
 800fd7c:	f047 0720 	orr.w	r7, r7, #32
 800fd80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fd82:	601c      	str	r4, [r3, #0]
 800fd84:	9b04      	ldr	r3, [sp, #16]
 800fd86:	601d      	str	r5, [r3, #0]
 800fd88:	e695      	b.n	800fab6 <__gethex+0x12a>
 800fd8a:	4299      	cmp	r1, r3
 800fd8c:	f843 cc04 	str.w	ip, [r3, #-4]
 800fd90:	d8d8      	bhi.n	800fd44 <__gethex+0x3b8>
 800fd92:	68a3      	ldr	r3, [r4, #8]
 800fd94:	459b      	cmp	fp, r3
 800fd96:	db19      	blt.n	800fdcc <__gethex+0x440>
 800fd98:	6861      	ldr	r1, [r4, #4]
 800fd9a:	ee18 0a10 	vmov	r0, s16
 800fd9e:	3101      	adds	r1, #1
 800fda0:	f000 f91a 	bl	800ffd8 <_Balloc>
 800fda4:	4681      	mov	r9, r0
 800fda6:	b918      	cbnz	r0, 800fdb0 <__gethex+0x424>
 800fda8:	4b1a      	ldr	r3, [pc, #104]	; (800fe14 <__gethex+0x488>)
 800fdaa:	4602      	mov	r2, r0
 800fdac:	2184      	movs	r1, #132	; 0x84
 800fdae:	e6a8      	b.n	800fb02 <__gethex+0x176>
 800fdb0:	6922      	ldr	r2, [r4, #16]
 800fdb2:	3202      	adds	r2, #2
 800fdb4:	f104 010c 	add.w	r1, r4, #12
 800fdb8:	0092      	lsls	r2, r2, #2
 800fdba:	300c      	adds	r0, #12
 800fdbc:	f7fd f998 	bl	800d0f0 <memcpy>
 800fdc0:	4621      	mov	r1, r4
 800fdc2:	ee18 0a10 	vmov	r0, s16
 800fdc6:	f000 f947 	bl	8010058 <_Bfree>
 800fdca:	464c      	mov	r4, r9
 800fdcc:	6923      	ldr	r3, [r4, #16]
 800fdce:	1c5a      	adds	r2, r3, #1
 800fdd0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fdd4:	6122      	str	r2, [r4, #16]
 800fdd6:	2201      	movs	r2, #1
 800fdd8:	615a      	str	r2, [r3, #20]
 800fdda:	e7bb      	b.n	800fd54 <__gethex+0x3c8>
 800fddc:	6922      	ldr	r2, [r4, #16]
 800fdde:	455a      	cmp	r2, fp
 800fde0:	dd0b      	ble.n	800fdfa <__gethex+0x46e>
 800fde2:	2101      	movs	r1, #1
 800fde4:	4620      	mov	r0, r4
 800fde6:	f7ff fd69 	bl	800f8bc <rshift>
 800fdea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fdee:	3501      	adds	r5, #1
 800fdf0:	42ab      	cmp	r3, r5
 800fdf2:	f6ff aed0 	blt.w	800fb96 <__gethex+0x20a>
 800fdf6:	2701      	movs	r7, #1
 800fdf8:	e7c0      	b.n	800fd7c <__gethex+0x3f0>
 800fdfa:	f016 061f 	ands.w	r6, r6, #31
 800fdfe:	d0fa      	beq.n	800fdf6 <__gethex+0x46a>
 800fe00:	4453      	add	r3, sl
 800fe02:	f1c6 0620 	rsb	r6, r6, #32
 800fe06:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fe0a:	f000 f9d7 	bl	80101bc <__hi0bits>
 800fe0e:	42b0      	cmp	r0, r6
 800fe10:	dbe7      	blt.n	800fde2 <__gethex+0x456>
 800fe12:	e7f0      	b.n	800fdf6 <__gethex+0x46a>
 800fe14:	080121a8 	.word	0x080121a8

0800fe18 <L_shift>:
 800fe18:	f1c2 0208 	rsb	r2, r2, #8
 800fe1c:	0092      	lsls	r2, r2, #2
 800fe1e:	b570      	push	{r4, r5, r6, lr}
 800fe20:	f1c2 0620 	rsb	r6, r2, #32
 800fe24:	6843      	ldr	r3, [r0, #4]
 800fe26:	6804      	ldr	r4, [r0, #0]
 800fe28:	fa03 f506 	lsl.w	r5, r3, r6
 800fe2c:	432c      	orrs	r4, r5
 800fe2e:	40d3      	lsrs	r3, r2
 800fe30:	6004      	str	r4, [r0, #0]
 800fe32:	f840 3f04 	str.w	r3, [r0, #4]!
 800fe36:	4288      	cmp	r0, r1
 800fe38:	d3f4      	bcc.n	800fe24 <L_shift+0xc>
 800fe3a:	bd70      	pop	{r4, r5, r6, pc}

0800fe3c <__match>:
 800fe3c:	b530      	push	{r4, r5, lr}
 800fe3e:	6803      	ldr	r3, [r0, #0]
 800fe40:	3301      	adds	r3, #1
 800fe42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe46:	b914      	cbnz	r4, 800fe4e <__match+0x12>
 800fe48:	6003      	str	r3, [r0, #0]
 800fe4a:	2001      	movs	r0, #1
 800fe4c:	bd30      	pop	{r4, r5, pc}
 800fe4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe52:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fe56:	2d19      	cmp	r5, #25
 800fe58:	bf98      	it	ls
 800fe5a:	3220      	addls	r2, #32
 800fe5c:	42a2      	cmp	r2, r4
 800fe5e:	d0f0      	beq.n	800fe42 <__match+0x6>
 800fe60:	2000      	movs	r0, #0
 800fe62:	e7f3      	b.n	800fe4c <__match+0x10>

0800fe64 <__hexnan>:
 800fe64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe68:	680b      	ldr	r3, [r1, #0]
 800fe6a:	115e      	asrs	r6, r3, #5
 800fe6c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fe70:	f013 031f 	ands.w	r3, r3, #31
 800fe74:	b087      	sub	sp, #28
 800fe76:	bf18      	it	ne
 800fe78:	3604      	addne	r6, #4
 800fe7a:	2500      	movs	r5, #0
 800fe7c:	1f37      	subs	r7, r6, #4
 800fe7e:	4690      	mov	r8, r2
 800fe80:	6802      	ldr	r2, [r0, #0]
 800fe82:	9301      	str	r3, [sp, #4]
 800fe84:	4682      	mov	sl, r0
 800fe86:	f846 5c04 	str.w	r5, [r6, #-4]
 800fe8a:	46b9      	mov	r9, r7
 800fe8c:	463c      	mov	r4, r7
 800fe8e:	9502      	str	r5, [sp, #8]
 800fe90:	46ab      	mov	fp, r5
 800fe92:	7851      	ldrb	r1, [r2, #1]
 800fe94:	1c53      	adds	r3, r2, #1
 800fe96:	9303      	str	r3, [sp, #12]
 800fe98:	b341      	cbz	r1, 800feec <__hexnan+0x88>
 800fe9a:	4608      	mov	r0, r1
 800fe9c:	9205      	str	r2, [sp, #20]
 800fe9e:	9104      	str	r1, [sp, #16]
 800fea0:	f7ff fd5e 	bl	800f960 <__hexdig_fun>
 800fea4:	2800      	cmp	r0, #0
 800fea6:	d14f      	bne.n	800ff48 <__hexnan+0xe4>
 800fea8:	9904      	ldr	r1, [sp, #16]
 800feaa:	9a05      	ldr	r2, [sp, #20]
 800feac:	2920      	cmp	r1, #32
 800feae:	d818      	bhi.n	800fee2 <__hexnan+0x7e>
 800feb0:	9b02      	ldr	r3, [sp, #8]
 800feb2:	459b      	cmp	fp, r3
 800feb4:	dd13      	ble.n	800fede <__hexnan+0x7a>
 800feb6:	454c      	cmp	r4, r9
 800feb8:	d206      	bcs.n	800fec8 <__hexnan+0x64>
 800feba:	2d07      	cmp	r5, #7
 800febc:	dc04      	bgt.n	800fec8 <__hexnan+0x64>
 800febe:	462a      	mov	r2, r5
 800fec0:	4649      	mov	r1, r9
 800fec2:	4620      	mov	r0, r4
 800fec4:	f7ff ffa8 	bl	800fe18 <L_shift>
 800fec8:	4544      	cmp	r4, r8
 800feca:	d950      	bls.n	800ff6e <__hexnan+0x10a>
 800fecc:	2300      	movs	r3, #0
 800fece:	f1a4 0904 	sub.w	r9, r4, #4
 800fed2:	f844 3c04 	str.w	r3, [r4, #-4]
 800fed6:	f8cd b008 	str.w	fp, [sp, #8]
 800feda:	464c      	mov	r4, r9
 800fedc:	461d      	mov	r5, r3
 800fede:	9a03      	ldr	r2, [sp, #12]
 800fee0:	e7d7      	b.n	800fe92 <__hexnan+0x2e>
 800fee2:	2929      	cmp	r1, #41	; 0x29
 800fee4:	d156      	bne.n	800ff94 <__hexnan+0x130>
 800fee6:	3202      	adds	r2, #2
 800fee8:	f8ca 2000 	str.w	r2, [sl]
 800feec:	f1bb 0f00 	cmp.w	fp, #0
 800fef0:	d050      	beq.n	800ff94 <__hexnan+0x130>
 800fef2:	454c      	cmp	r4, r9
 800fef4:	d206      	bcs.n	800ff04 <__hexnan+0xa0>
 800fef6:	2d07      	cmp	r5, #7
 800fef8:	dc04      	bgt.n	800ff04 <__hexnan+0xa0>
 800fefa:	462a      	mov	r2, r5
 800fefc:	4649      	mov	r1, r9
 800fefe:	4620      	mov	r0, r4
 800ff00:	f7ff ff8a 	bl	800fe18 <L_shift>
 800ff04:	4544      	cmp	r4, r8
 800ff06:	d934      	bls.n	800ff72 <__hexnan+0x10e>
 800ff08:	f1a8 0204 	sub.w	r2, r8, #4
 800ff0c:	4623      	mov	r3, r4
 800ff0e:	f853 1b04 	ldr.w	r1, [r3], #4
 800ff12:	f842 1f04 	str.w	r1, [r2, #4]!
 800ff16:	429f      	cmp	r7, r3
 800ff18:	d2f9      	bcs.n	800ff0e <__hexnan+0xaa>
 800ff1a:	1b3b      	subs	r3, r7, r4
 800ff1c:	f023 0303 	bic.w	r3, r3, #3
 800ff20:	3304      	adds	r3, #4
 800ff22:	3401      	adds	r4, #1
 800ff24:	3e03      	subs	r6, #3
 800ff26:	42b4      	cmp	r4, r6
 800ff28:	bf88      	it	hi
 800ff2a:	2304      	movhi	r3, #4
 800ff2c:	4443      	add	r3, r8
 800ff2e:	2200      	movs	r2, #0
 800ff30:	f843 2b04 	str.w	r2, [r3], #4
 800ff34:	429f      	cmp	r7, r3
 800ff36:	d2fb      	bcs.n	800ff30 <__hexnan+0xcc>
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	b91b      	cbnz	r3, 800ff44 <__hexnan+0xe0>
 800ff3c:	4547      	cmp	r7, r8
 800ff3e:	d127      	bne.n	800ff90 <__hexnan+0x12c>
 800ff40:	2301      	movs	r3, #1
 800ff42:	603b      	str	r3, [r7, #0]
 800ff44:	2005      	movs	r0, #5
 800ff46:	e026      	b.n	800ff96 <__hexnan+0x132>
 800ff48:	3501      	adds	r5, #1
 800ff4a:	2d08      	cmp	r5, #8
 800ff4c:	f10b 0b01 	add.w	fp, fp, #1
 800ff50:	dd06      	ble.n	800ff60 <__hexnan+0xfc>
 800ff52:	4544      	cmp	r4, r8
 800ff54:	d9c3      	bls.n	800fede <__hexnan+0x7a>
 800ff56:	2300      	movs	r3, #0
 800ff58:	f844 3c04 	str.w	r3, [r4, #-4]
 800ff5c:	2501      	movs	r5, #1
 800ff5e:	3c04      	subs	r4, #4
 800ff60:	6822      	ldr	r2, [r4, #0]
 800ff62:	f000 000f 	and.w	r0, r0, #15
 800ff66:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ff6a:	6022      	str	r2, [r4, #0]
 800ff6c:	e7b7      	b.n	800fede <__hexnan+0x7a>
 800ff6e:	2508      	movs	r5, #8
 800ff70:	e7b5      	b.n	800fede <__hexnan+0x7a>
 800ff72:	9b01      	ldr	r3, [sp, #4]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d0df      	beq.n	800ff38 <__hexnan+0xd4>
 800ff78:	f04f 32ff 	mov.w	r2, #4294967295
 800ff7c:	f1c3 0320 	rsb	r3, r3, #32
 800ff80:	fa22 f303 	lsr.w	r3, r2, r3
 800ff84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ff88:	401a      	ands	r2, r3
 800ff8a:	f846 2c04 	str.w	r2, [r6, #-4]
 800ff8e:	e7d3      	b.n	800ff38 <__hexnan+0xd4>
 800ff90:	3f04      	subs	r7, #4
 800ff92:	e7d1      	b.n	800ff38 <__hexnan+0xd4>
 800ff94:	2004      	movs	r0, #4
 800ff96:	b007      	add	sp, #28
 800ff98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ff9c <_localeconv_r>:
 800ff9c:	4800      	ldr	r0, [pc, #0]	; (800ffa0 <_localeconv_r+0x4>)
 800ff9e:	4770      	bx	lr
 800ffa0:	2000042c 	.word	0x2000042c

0800ffa4 <malloc>:
 800ffa4:	4b02      	ldr	r3, [pc, #8]	; (800ffb0 <malloc+0xc>)
 800ffa6:	4601      	mov	r1, r0
 800ffa8:	6818      	ldr	r0, [r3, #0]
 800ffaa:	f000 bd59 	b.w	8010a60 <_malloc_r>
 800ffae:	bf00      	nop
 800ffb0:	200002d4 	.word	0x200002d4

0800ffb4 <__ascii_mbtowc>:
 800ffb4:	b082      	sub	sp, #8
 800ffb6:	b901      	cbnz	r1, 800ffba <__ascii_mbtowc+0x6>
 800ffb8:	a901      	add	r1, sp, #4
 800ffba:	b142      	cbz	r2, 800ffce <__ascii_mbtowc+0x1a>
 800ffbc:	b14b      	cbz	r3, 800ffd2 <__ascii_mbtowc+0x1e>
 800ffbe:	7813      	ldrb	r3, [r2, #0]
 800ffc0:	600b      	str	r3, [r1, #0]
 800ffc2:	7812      	ldrb	r2, [r2, #0]
 800ffc4:	1e10      	subs	r0, r2, #0
 800ffc6:	bf18      	it	ne
 800ffc8:	2001      	movne	r0, #1
 800ffca:	b002      	add	sp, #8
 800ffcc:	4770      	bx	lr
 800ffce:	4610      	mov	r0, r2
 800ffd0:	e7fb      	b.n	800ffca <__ascii_mbtowc+0x16>
 800ffd2:	f06f 0001 	mvn.w	r0, #1
 800ffd6:	e7f8      	b.n	800ffca <__ascii_mbtowc+0x16>

0800ffd8 <_Balloc>:
 800ffd8:	b570      	push	{r4, r5, r6, lr}
 800ffda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ffdc:	4604      	mov	r4, r0
 800ffde:	460d      	mov	r5, r1
 800ffe0:	b976      	cbnz	r6, 8010000 <_Balloc+0x28>
 800ffe2:	2010      	movs	r0, #16
 800ffe4:	f7ff ffde 	bl	800ffa4 <malloc>
 800ffe8:	4602      	mov	r2, r0
 800ffea:	6260      	str	r0, [r4, #36]	; 0x24
 800ffec:	b920      	cbnz	r0, 800fff8 <_Balloc+0x20>
 800ffee:	4b18      	ldr	r3, [pc, #96]	; (8010050 <_Balloc+0x78>)
 800fff0:	4818      	ldr	r0, [pc, #96]	; (8010054 <_Balloc+0x7c>)
 800fff2:	2166      	movs	r1, #102	; 0x66
 800fff4:	f000 ff3e 	bl	8010e74 <__assert_func>
 800fff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fffc:	6006      	str	r6, [r0, #0]
 800fffe:	60c6      	str	r6, [r0, #12]
 8010000:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010002:	68f3      	ldr	r3, [r6, #12]
 8010004:	b183      	cbz	r3, 8010028 <_Balloc+0x50>
 8010006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010008:	68db      	ldr	r3, [r3, #12]
 801000a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801000e:	b9b8      	cbnz	r0, 8010040 <_Balloc+0x68>
 8010010:	2101      	movs	r1, #1
 8010012:	fa01 f605 	lsl.w	r6, r1, r5
 8010016:	1d72      	adds	r2, r6, #5
 8010018:	0092      	lsls	r2, r2, #2
 801001a:	4620      	mov	r0, r4
 801001c:	f000 fc9d 	bl	801095a <_calloc_r>
 8010020:	b160      	cbz	r0, 801003c <_Balloc+0x64>
 8010022:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010026:	e00e      	b.n	8010046 <_Balloc+0x6e>
 8010028:	2221      	movs	r2, #33	; 0x21
 801002a:	2104      	movs	r1, #4
 801002c:	4620      	mov	r0, r4
 801002e:	f000 fc94 	bl	801095a <_calloc_r>
 8010032:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010034:	60f0      	str	r0, [r6, #12]
 8010036:	68db      	ldr	r3, [r3, #12]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d1e4      	bne.n	8010006 <_Balloc+0x2e>
 801003c:	2000      	movs	r0, #0
 801003e:	bd70      	pop	{r4, r5, r6, pc}
 8010040:	6802      	ldr	r2, [r0, #0]
 8010042:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010046:	2300      	movs	r3, #0
 8010048:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801004c:	e7f7      	b.n	801003e <_Balloc+0x66>
 801004e:	bf00      	nop
 8010050:	08012136 	.word	0x08012136
 8010054:	08012234 	.word	0x08012234

08010058 <_Bfree>:
 8010058:	b570      	push	{r4, r5, r6, lr}
 801005a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801005c:	4605      	mov	r5, r0
 801005e:	460c      	mov	r4, r1
 8010060:	b976      	cbnz	r6, 8010080 <_Bfree+0x28>
 8010062:	2010      	movs	r0, #16
 8010064:	f7ff ff9e 	bl	800ffa4 <malloc>
 8010068:	4602      	mov	r2, r0
 801006a:	6268      	str	r0, [r5, #36]	; 0x24
 801006c:	b920      	cbnz	r0, 8010078 <_Bfree+0x20>
 801006e:	4b09      	ldr	r3, [pc, #36]	; (8010094 <_Bfree+0x3c>)
 8010070:	4809      	ldr	r0, [pc, #36]	; (8010098 <_Bfree+0x40>)
 8010072:	218a      	movs	r1, #138	; 0x8a
 8010074:	f000 fefe 	bl	8010e74 <__assert_func>
 8010078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801007c:	6006      	str	r6, [r0, #0]
 801007e:	60c6      	str	r6, [r0, #12]
 8010080:	b13c      	cbz	r4, 8010092 <_Bfree+0x3a>
 8010082:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010084:	6862      	ldr	r2, [r4, #4]
 8010086:	68db      	ldr	r3, [r3, #12]
 8010088:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801008c:	6021      	str	r1, [r4, #0]
 801008e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010092:	bd70      	pop	{r4, r5, r6, pc}
 8010094:	08012136 	.word	0x08012136
 8010098:	08012234 	.word	0x08012234

0801009c <__multadd>:
 801009c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100a0:	690d      	ldr	r5, [r1, #16]
 80100a2:	4607      	mov	r7, r0
 80100a4:	460c      	mov	r4, r1
 80100a6:	461e      	mov	r6, r3
 80100a8:	f101 0c14 	add.w	ip, r1, #20
 80100ac:	2000      	movs	r0, #0
 80100ae:	f8dc 3000 	ldr.w	r3, [ip]
 80100b2:	b299      	uxth	r1, r3
 80100b4:	fb02 6101 	mla	r1, r2, r1, r6
 80100b8:	0c1e      	lsrs	r6, r3, #16
 80100ba:	0c0b      	lsrs	r3, r1, #16
 80100bc:	fb02 3306 	mla	r3, r2, r6, r3
 80100c0:	b289      	uxth	r1, r1
 80100c2:	3001      	adds	r0, #1
 80100c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80100c8:	4285      	cmp	r5, r0
 80100ca:	f84c 1b04 	str.w	r1, [ip], #4
 80100ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80100d2:	dcec      	bgt.n	80100ae <__multadd+0x12>
 80100d4:	b30e      	cbz	r6, 801011a <__multadd+0x7e>
 80100d6:	68a3      	ldr	r3, [r4, #8]
 80100d8:	42ab      	cmp	r3, r5
 80100da:	dc19      	bgt.n	8010110 <__multadd+0x74>
 80100dc:	6861      	ldr	r1, [r4, #4]
 80100de:	4638      	mov	r0, r7
 80100e0:	3101      	adds	r1, #1
 80100e2:	f7ff ff79 	bl	800ffd8 <_Balloc>
 80100e6:	4680      	mov	r8, r0
 80100e8:	b928      	cbnz	r0, 80100f6 <__multadd+0x5a>
 80100ea:	4602      	mov	r2, r0
 80100ec:	4b0c      	ldr	r3, [pc, #48]	; (8010120 <__multadd+0x84>)
 80100ee:	480d      	ldr	r0, [pc, #52]	; (8010124 <__multadd+0x88>)
 80100f0:	21b5      	movs	r1, #181	; 0xb5
 80100f2:	f000 febf 	bl	8010e74 <__assert_func>
 80100f6:	6922      	ldr	r2, [r4, #16]
 80100f8:	3202      	adds	r2, #2
 80100fa:	f104 010c 	add.w	r1, r4, #12
 80100fe:	0092      	lsls	r2, r2, #2
 8010100:	300c      	adds	r0, #12
 8010102:	f7fc fff5 	bl	800d0f0 <memcpy>
 8010106:	4621      	mov	r1, r4
 8010108:	4638      	mov	r0, r7
 801010a:	f7ff ffa5 	bl	8010058 <_Bfree>
 801010e:	4644      	mov	r4, r8
 8010110:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010114:	3501      	adds	r5, #1
 8010116:	615e      	str	r6, [r3, #20]
 8010118:	6125      	str	r5, [r4, #16]
 801011a:	4620      	mov	r0, r4
 801011c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010120:	080121a8 	.word	0x080121a8
 8010124:	08012234 	.word	0x08012234

08010128 <__s2b>:
 8010128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801012c:	460c      	mov	r4, r1
 801012e:	4615      	mov	r5, r2
 8010130:	461f      	mov	r7, r3
 8010132:	2209      	movs	r2, #9
 8010134:	3308      	adds	r3, #8
 8010136:	4606      	mov	r6, r0
 8010138:	fb93 f3f2 	sdiv	r3, r3, r2
 801013c:	2100      	movs	r1, #0
 801013e:	2201      	movs	r2, #1
 8010140:	429a      	cmp	r2, r3
 8010142:	db09      	blt.n	8010158 <__s2b+0x30>
 8010144:	4630      	mov	r0, r6
 8010146:	f7ff ff47 	bl	800ffd8 <_Balloc>
 801014a:	b940      	cbnz	r0, 801015e <__s2b+0x36>
 801014c:	4602      	mov	r2, r0
 801014e:	4b19      	ldr	r3, [pc, #100]	; (80101b4 <__s2b+0x8c>)
 8010150:	4819      	ldr	r0, [pc, #100]	; (80101b8 <__s2b+0x90>)
 8010152:	21ce      	movs	r1, #206	; 0xce
 8010154:	f000 fe8e 	bl	8010e74 <__assert_func>
 8010158:	0052      	lsls	r2, r2, #1
 801015a:	3101      	adds	r1, #1
 801015c:	e7f0      	b.n	8010140 <__s2b+0x18>
 801015e:	9b08      	ldr	r3, [sp, #32]
 8010160:	6143      	str	r3, [r0, #20]
 8010162:	2d09      	cmp	r5, #9
 8010164:	f04f 0301 	mov.w	r3, #1
 8010168:	6103      	str	r3, [r0, #16]
 801016a:	dd16      	ble.n	801019a <__s2b+0x72>
 801016c:	f104 0909 	add.w	r9, r4, #9
 8010170:	46c8      	mov	r8, r9
 8010172:	442c      	add	r4, r5
 8010174:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010178:	4601      	mov	r1, r0
 801017a:	3b30      	subs	r3, #48	; 0x30
 801017c:	220a      	movs	r2, #10
 801017e:	4630      	mov	r0, r6
 8010180:	f7ff ff8c 	bl	801009c <__multadd>
 8010184:	45a0      	cmp	r8, r4
 8010186:	d1f5      	bne.n	8010174 <__s2b+0x4c>
 8010188:	f1a5 0408 	sub.w	r4, r5, #8
 801018c:	444c      	add	r4, r9
 801018e:	1b2d      	subs	r5, r5, r4
 8010190:	1963      	adds	r3, r4, r5
 8010192:	42bb      	cmp	r3, r7
 8010194:	db04      	blt.n	80101a0 <__s2b+0x78>
 8010196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801019a:	340a      	adds	r4, #10
 801019c:	2509      	movs	r5, #9
 801019e:	e7f6      	b.n	801018e <__s2b+0x66>
 80101a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80101a4:	4601      	mov	r1, r0
 80101a6:	3b30      	subs	r3, #48	; 0x30
 80101a8:	220a      	movs	r2, #10
 80101aa:	4630      	mov	r0, r6
 80101ac:	f7ff ff76 	bl	801009c <__multadd>
 80101b0:	e7ee      	b.n	8010190 <__s2b+0x68>
 80101b2:	bf00      	nop
 80101b4:	080121a8 	.word	0x080121a8
 80101b8:	08012234 	.word	0x08012234

080101bc <__hi0bits>:
 80101bc:	0c03      	lsrs	r3, r0, #16
 80101be:	041b      	lsls	r3, r3, #16
 80101c0:	b9d3      	cbnz	r3, 80101f8 <__hi0bits+0x3c>
 80101c2:	0400      	lsls	r0, r0, #16
 80101c4:	2310      	movs	r3, #16
 80101c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80101ca:	bf04      	itt	eq
 80101cc:	0200      	lsleq	r0, r0, #8
 80101ce:	3308      	addeq	r3, #8
 80101d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80101d4:	bf04      	itt	eq
 80101d6:	0100      	lsleq	r0, r0, #4
 80101d8:	3304      	addeq	r3, #4
 80101da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80101de:	bf04      	itt	eq
 80101e0:	0080      	lsleq	r0, r0, #2
 80101e2:	3302      	addeq	r3, #2
 80101e4:	2800      	cmp	r0, #0
 80101e6:	db05      	blt.n	80101f4 <__hi0bits+0x38>
 80101e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80101ec:	f103 0301 	add.w	r3, r3, #1
 80101f0:	bf08      	it	eq
 80101f2:	2320      	moveq	r3, #32
 80101f4:	4618      	mov	r0, r3
 80101f6:	4770      	bx	lr
 80101f8:	2300      	movs	r3, #0
 80101fa:	e7e4      	b.n	80101c6 <__hi0bits+0xa>

080101fc <__lo0bits>:
 80101fc:	6803      	ldr	r3, [r0, #0]
 80101fe:	f013 0207 	ands.w	r2, r3, #7
 8010202:	4601      	mov	r1, r0
 8010204:	d00b      	beq.n	801021e <__lo0bits+0x22>
 8010206:	07da      	lsls	r2, r3, #31
 8010208:	d423      	bmi.n	8010252 <__lo0bits+0x56>
 801020a:	0798      	lsls	r0, r3, #30
 801020c:	bf49      	itett	mi
 801020e:	085b      	lsrmi	r3, r3, #1
 8010210:	089b      	lsrpl	r3, r3, #2
 8010212:	2001      	movmi	r0, #1
 8010214:	600b      	strmi	r3, [r1, #0]
 8010216:	bf5c      	itt	pl
 8010218:	600b      	strpl	r3, [r1, #0]
 801021a:	2002      	movpl	r0, #2
 801021c:	4770      	bx	lr
 801021e:	b298      	uxth	r0, r3
 8010220:	b9a8      	cbnz	r0, 801024e <__lo0bits+0x52>
 8010222:	0c1b      	lsrs	r3, r3, #16
 8010224:	2010      	movs	r0, #16
 8010226:	b2da      	uxtb	r2, r3
 8010228:	b90a      	cbnz	r2, 801022e <__lo0bits+0x32>
 801022a:	3008      	adds	r0, #8
 801022c:	0a1b      	lsrs	r3, r3, #8
 801022e:	071a      	lsls	r2, r3, #28
 8010230:	bf04      	itt	eq
 8010232:	091b      	lsreq	r3, r3, #4
 8010234:	3004      	addeq	r0, #4
 8010236:	079a      	lsls	r2, r3, #30
 8010238:	bf04      	itt	eq
 801023a:	089b      	lsreq	r3, r3, #2
 801023c:	3002      	addeq	r0, #2
 801023e:	07da      	lsls	r2, r3, #31
 8010240:	d403      	bmi.n	801024a <__lo0bits+0x4e>
 8010242:	085b      	lsrs	r3, r3, #1
 8010244:	f100 0001 	add.w	r0, r0, #1
 8010248:	d005      	beq.n	8010256 <__lo0bits+0x5a>
 801024a:	600b      	str	r3, [r1, #0]
 801024c:	4770      	bx	lr
 801024e:	4610      	mov	r0, r2
 8010250:	e7e9      	b.n	8010226 <__lo0bits+0x2a>
 8010252:	2000      	movs	r0, #0
 8010254:	4770      	bx	lr
 8010256:	2020      	movs	r0, #32
 8010258:	4770      	bx	lr
	...

0801025c <__i2b>:
 801025c:	b510      	push	{r4, lr}
 801025e:	460c      	mov	r4, r1
 8010260:	2101      	movs	r1, #1
 8010262:	f7ff feb9 	bl	800ffd8 <_Balloc>
 8010266:	4602      	mov	r2, r0
 8010268:	b928      	cbnz	r0, 8010276 <__i2b+0x1a>
 801026a:	4b05      	ldr	r3, [pc, #20]	; (8010280 <__i2b+0x24>)
 801026c:	4805      	ldr	r0, [pc, #20]	; (8010284 <__i2b+0x28>)
 801026e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010272:	f000 fdff 	bl	8010e74 <__assert_func>
 8010276:	2301      	movs	r3, #1
 8010278:	6144      	str	r4, [r0, #20]
 801027a:	6103      	str	r3, [r0, #16]
 801027c:	bd10      	pop	{r4, pc}
 801027e:	bf00      	nop
 8010280:	080121a8 	.word	0x080121a8
 8010284:	08012234 	.word	0x08012234

08010288 <__multiply>:
 8010288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801028c:	4691      	mov	r9, r2
 801028e:	690a      	ldr	r2, [r1, #16]
 8010290:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010294:	429a      	cmp	r2, r3
 8010296:	bfb8      	it	lt
 8010298:	460b      	movlt	r3, r1
 801029a:	460c      	mov	r4, r1
 801029c:	bfbc      	itt	lt
 801029e:	464c      	movlt	r4, r9
 80102a0:	4699      	movlt	r9, r3
 80102a2:	6927      	ldr	r7, [r4, #16]
 80102a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80102a8:	68a3      	ldr	r3, [r4, #8]
 80102aa:	6861      	ldr	r1, [r4, #4]
 80102ac:	eb07 060a 	add.w	r6, r7, sl
 80102b0:	42b3      	cmp	r3, r6
 80102b2:	b085      	sub	sp, #20
 80102b4:	bfb8      	it	lt
 80102b6:	3101      	addlt	r1, #1
 80102b8:	f7ff fe8e 	bl	800ffd8 <_Balloc>
 80102bc:	b930      	cbnz	r0, 80102cc <__multiply+0x44>
 80102be:	4602      	mov	r2, r0
 80102c0:	4b44      	ldr	r3, [pc, #272]	; (80103d4 <__multiply+0x14c>)
 80102c2:	4845      	ldr	r0, [pc, #276]	; (80103d8 <__multiply+0x150>)
 80102c4:	f240 115d 	movw	r1, #349	; 0x15d
 80102c8:	f000 fdd4 	bl	8010e74 <__assert_func>
 80102cc:	f100 0514 	add.w	r5, r0, #20
 80102d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80102d4:	462b      	mov	r3, r5
 80102d6:	2200      	movs	r2, #0
 80102d8:	4543      	cmp	r3, r8
 80102da:	d321      	bcc.n	8010320 <__multiply+0x98>
 80102dc:	f104 0314 	add.w	r3, r4, #20
 80102e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80102e4:	f109 0314 	add.w	r3, r9, #20
 80102e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80102ec:	9202      	str	r2, [sp, #8]
 80102ee:	1b3a      	subs	r2, r7, r4
 80102f0:	3a15      	subs	r2, #21
 80102f2:	f022 0203 	bic.w	r2, r2, #3
 80102f6:	3204      	adds	r2, #4
 80102f8:	f104 0115 	add.w	r1, r4, #21
 80102fc:	428f      	cmp	r7, r1
 80102fe:	bf38      	it	cc
 8010300:	2204      	movcc	r2, #4
 8010302:	9201      	str	r2, [sp, #4]
 8010304:	9a02      	ldr	r2, [sp, #8]
 8010306:	9303      	str	r3, [sp, #12]
 8010308:	429a      	cmp	r2, r3
 801030a:	d80c      	bhi.n	8010326 <__multiply+0x9e>
 801030c:	2e00      	cmp	r6, #0
 801030e:	dd03      	ble.n	8010318 <__multiply+0x90>
 8010310:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010314:	2b00      	cmp	r3, #0
 8010316:	d05a      	beq.n	80103ce <__multiply+0x146>
 8010318:	6106      	str	r6, [r0, #16]
 801031a:	b005      	add	sp, #20
 801031c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010320:	f843 2b04 	str.w	r2, [r3], #4
 8010324:	e7d8      	b.n	80102d8 <__multiply+0x50>
 8010326:	f8b3 a000 	ldrh.w	sl, [r3]
 801032a:	f1ba 0f00 	cmp.w	sl, #0
 801032e:	d024      	beq.n	801037a <__multiply+0xf2>
 8010330:	f104 0e14 	add.w	lr, r4, #20
 8010334:	46a9      	mov	r9, r5
 8010336:	f04f 0c00 	mov.w	ip, #0
 801033a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801033e:	f8d9 1000 	ldr.w	r1, [r9]
 8010342:	fa1f fb82 	uxth.w	fp, r2
 8010346:	b289      	uxth	r1, r1
 8010348:	fb0a 110b 	mla	r1, sl, fp, r1
 801034c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010350:	f8d9 2000 	ldr.w	r2, [r9]
 8010354:	4461      	add	r1, ip
 8010356:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801035a:	fb0a c20b 	mla	r2, sl, fp, ip
 801035e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010362:	b289      	uxth	r1, r1
 8010364:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010368:	4577      	cmp	r7, lr
 801036a:	f849 1b04 	str.w	r1, [r9], #4
 801036e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010372:	d8e2      	bhi.n	801033a <__multiply+0xb2>
 8010374:	9a01      	ldr	r2, [sp, #4]
 8010376:	f845 c002 	str.w	ip, [r5, r2]
 801037a:	9a03      	ldr	r2, [sp, #12]
 801037c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010380:	3304      	adds	r3, #4
 8010382:	f1b9 0f00 	cmp.w	r9, #0
 8010386:	d020      	beq.n	80103ca <__multiply+0x142>
 8010388:	6829      	ldr	r1, [r5, #0]
 801038a:	f104 0c14 	add.w	ip, r4, #20
 801038e:	46ae      	mov	lr, r5
 8010390:	f04f 0a00 	mov.w	sl, #0
 8010394:	f8bc b000 	ldrh.w	fp, [ip]
 8010398:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801039c:	fb09 220b 	mla	r2, r9, fp, r2
 80103a0:	4492      	add	sl, r2
 80103a2:	b289      	uxth	r1, r1
 80103a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80103a8:	f84e 1b04 	str.w	r1, [lr], #4
 80103ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 80103b0:	f8be 1000 	ldrh.w	r1, [lr]
 80103b4:	0c12      	lsrs	r2, r2, #16
 80103b6:	fb09 1102 	mla	r1, r9, r2, r1
 80103ba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80103be:	4567      	cmp	r7, ip
 80103c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80103c4:	d8e6      	bhi.n	8010394 <__multiply+0x10c>
 80103c6:	9a01      	ldr	r2, [sp, #4]
 80103c8:	50a9      	str	r1, [r5, r2]
 80103ca:	3504      	adds	r5, #4
 80103cc:	e79a      	b.n	8010304 <__multiply+0x7c>
 80103ce:	3e01      	subs	r6, #1
 80103d0:	e79c      	b.n	801030c <__multiply+0x84>
 80103d2:	bf00      	nop
 80103d4:	080121a8 	.word	0x080121a8
 80103d8:	08012234 	.word	0x08012234

080103dc <__pow5mult>:
 80103dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103e0:	4615      	mov	r5, r2
 80103e2:	f012 0203 	ands.w	r2, r2, #3
 80103e6:	4606      	mov	r6, r0
 80103e8:	460f      	mov	r7, r1
 80103ea:	d007      	beq.n	80103fc <__pow5mult+0x20>
 80103ec:	4c25      	ldr	r4, [pc, #148]	; (8010484 <__pow5mult+0xa8>)
 80103ee:	3a01      	subs	r2, #1
 80103f0:	2300      	movs	r3, #0
 80103f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80103f6:	f7ff fe51 	bl	801009c <__multadd>
 80103fa:	4607      	mov	r7, r0
 80103fc:	10ad      	asrs	r5, r5, #2
 80103fe:	d03d      	beq.n	801047c <__pow5mult+0xa0>
 8010400:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010402:	b97c      	cbnz	r4, 8010424 <__pow5mult+0x48>
 8010404:	2010      	movs	r0, #16
 8010406:	f7ff fdcd 	bl	800ffa4 <malloc>
 801040a:	4602      	mov	r2, r0
 801040c:	6270      	str	r0, [r6, #36]	; 0x24
 801040e:	b928      	cbnz	r0, 801041c <__pow5mult+0x40>
 8010410:	4b1d      	ldr	r3, [pc, #116]	; (8010488 <__pow5mult+0xac>)
 8010412:	481e      	ldr	r0, [pc, #120]	; (801048c <__pow5mult+0xb0>)
 8010414:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010418:	f000 fd2c 	bl	8010e74 <__assert_func>
 801041c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010420:	6004      	str	r4, [r0, #0]
 8010422:	60c4      	str	r4, [r0, #12]
 8010424:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010428:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801042c:	b94c      	cbnz	r4, 8010442 <__pow5mult+0x66>
 801042e:	f240 2171 	movw	r1, #625	; 0x271
 8010432:	4630      	mov	r0, r6
 8010434:	f7ff ff12 	bl	801025c <__i2b>
 8010438:	2300      	movs	r3, #0
 801043a:	f8c8 0008 	str.w	r0, [r8, #8]
 801043e:	4604      	mov	r4, r0
 8010440:	6003      	str	r3, [r0, #0]
 8010442:	f04f 0900 	mov.w	r9, #0
 8010446:	07eb      	lsls	r3, r5, #31
 8010448:	d50a      	bpl.n	8010460 <__pow5mult+0x84>
 801044a:	4639      	mov	r1, r7
 801044c:	4622      	mov	r2, r4
 801044e:	4630      	mov	r0, r6
 8010450:	f7ff ff1a 	bl	8010288 <__multiply>
 8010454:	4639      	mov	r1, r7
 8010456:	4680      	mov	r8, r0
 8010458:	4630      	mov	r0, r6
 801045a:	f7ff fdfd 	bl	8010058 <_Bfree>
 801045e:	4647      	mov	r7, r8
 8010460:	106d      	asrs	r5, r5, #1
 8010462:	d00b      	beq.n	801047c <__pow5mult+0xa0>
 8010464:	6820      	ldr	r0, [r4, #0]
 8010466:	b938      	cbnz	r0, 8010478 <__pow5mult+0x9c>
 8010468:	4622      	mov	r2, r4
 801046a:	4621      	mov	r1, r4
 801046c:	4630      	mov	r0, r6
 801046e:	f7ff ff0b 	bl	8010288 <__multiply>
 8010472:	6020      	str	r0, [r4, #0]
 8010474:	f8c0 9000 	str.w	r9, [r0]
 8010478:	4604      	mov	r4, r0
 801047a:	e7e4      	b.n	8010446 <__pow5mult+0x6a>
 801047c:	4638      	mov	r0, r7
 801047e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010482:	bf00      	nop
 8010484:	08012380 	.word	0x08012380
 8010488:	08012136 	.word	0x08012136
 801048c:	08012234 	.word	0x08012234

08010490 <__lshift>:
 8010490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010494:	460c      	mov	r4, r1
 8010496:	6849      	ldr	r1, [r1, #4]
 8010498:	6923      	ldr	r3, [r4, #16]
 801049a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801049e:	68a3      	ldr	r3, [r4, #8]
 80104a0:	4607      	mov	r7, r0
 80104a2:	4691      	mov	r9, r2
 80104a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80104a8:	f108 0601 	add.w	r6, r8, #1
 80104ac:	42b3      	cmp	r3, r6
 80104ae:	db0b      	blt.n	80104c8 <__lshift+0x38>
 80104b0:	4638      	mov	r0, r7
 80104b2:	f7ff fd91 	bl	800ffd8 <_Balloc>
 80104b6:	4605      	mov	r5, r0
 80104b8:	b948      	cbnz	r0, 80104ce <__lshift+0x3e>
 80104ba:	4602      	mov	r2, r0
 80104bc:	4b2a      	ldr	r3, [pc, #168]	; (8010568 <__lshift+0xd8>)
 80104be:	482b      	ldr	r0, [pc, #172]	; (801056c <__lshift+0xdc>)
 80104c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80104c4:	f000 fcd6 	bl	8010e74 <__assert_func>
 80104c8:	3101      	adds	r1, #1
 80104ca:	005b      	lsls	r3, r3, #1
 80104cc:	e7ee      	b.n	80104ac <__lshift+0x1c>
 80104ce:	2300      	movs	r3, #0
 80104d0:	f100 0114 	add.w	r1, r0, #20
 80104d4:	f100 0210 	add.w	r2, r0, #16
 80104d8:	4618      	mov	r0, r3
 80104da:	4553      	cmp	r3, sl
 80104dc:	db37      	blt.n	801054e <__lshift+0xbe>
 80104de:	6920      	ldr	r0, [r4, #16]
 80104e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80104e4:	f104 0314 	add.w	r3, r4, #20
 80104e8:	f019 091f 	ands.w	r9, r9, #31
 80104ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80104f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80104f4:	d02f      	beq.n	8010556 <__lshift+0xc6>
 80104f6:	f1c9 0e20 	rsb	lr, r9, #32
 80104fa:	468a      	mov	sl, r1
 80104fc:	f04f 0c00 	mov.w	ip, #0
 8010500:	681a      	ldr	r2, [r3, #0]
 8010502:	fa02 f209 	lsl.w	r2, r2, r9
 8010506:	ea42 020c 	orr.w	r2, r2, ip
 801050a:	f84a 2b04 	str.w	r2, [sl], #4
 801050e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010512:	4298      	cmp	r0, r3
 8010514:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010518:	d8f2      	bhi.n	8010500 <__lshift+0x70>
 801051a:	1b03      	subs	r3, r0, r4
 801051c:	3b15      	subs	r3, #21
 801051e:	f023 0303 	bic.w	r3, r3, #3
 8010522:	3304      	adds	r3, #4
 8010524:	f104 0215 	add.w	r2, r4, #21
 8010528:	4290      	cmp	r0, r2
 801052a:	bf38      	it	cc
 801052c:	2304      	movcc	r3, #4
 801052e:	f841 c003 	str.w	ip, [r1, r3]
 8010532:	f1bc 0f00 	cmp.w	ip, #0
 8010536:	d001      	beq.n	801053c <__lshift+0xac>
 8010538:	f108 0602 	add.w	r6, r8, #2
 801053c:	3e01      	subs	r6, #1
 801053e:	4638      	mov	r0, r7
 8010540:	612e      	str	r6, [r5, #16]
 8010542:	4621      	mov	r1, r4
 8010544:	f7ff fd88 	bl	8010058 <_Bfree>
 8010548:	4628      	mov	r0, r5
 801054a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801054e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010552:	3301      	adds	r3, #1
 8010554:	e7c1      	b.n	80104da <__lshift+0x4a>
 8010556:	3904      	subs	r1, #4
 8010558:	f853 2b04 	ldr.w	r2, [r3], #4
 801055c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010560:	4298      	cmp	r0, r3
 8010562:	d8f9      	bhi.n	8010558 <__lshift+0xc8>
 8010564:	e7ea      	b.n	801053c <__lshift+0xac>
 8010566:	bf00      	nop
 8010568:	080121a8 	.word	0x080121a8
 801056c:	08012234 	.word	0x08012234

08010570 <__mcmp>:
 8010570:	b530      	push	{r4, r5, lr}
 8010572:	6902      	ldr	r2, [r0, #16]
 8010574:	690c      	ldr	r4, [r1, #16]
 8010576:	1b12      	subs	r2, r2, r4
 8010578:	d10e      	bne.n	8010598 <__mcmp+0x28>
 801057a:	f100 0314 	add.w	r3, r0, #20
 801057e:	3114      	adds	r1, #20
 8010580:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010584:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010588:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801058c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010590:	42a5      	cmp	r5, r4
 8010592:	d003      	beq.n	801059c <__mcmp+0x2c>
 8010594:	d305      	bcc.n	80105a2 <__mcmp+0x32>
 8010596:	2201      	movs	r2, #1
 8010598:	4610      	mov	r0, r2
 801059a:	bd30      	pop	{r4, r5, pc}
 801059c:	4283      	cmp	r3, r0
 801059e:	d3f3      	bcc.n	8010588 <__mcmp+0x18>
 80105a0:	e7fa      	b.n	8010598 <__mcmp+0x28>
 80105a2:	f04f 32ff 	mov.w	r2, #4294967295
 80105a6:	e7f7      	b.n	8010598 <__mcmp+0x28>

080105a8 <__mdiff>:
 80105a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105ac:	460c      	mov	r4, r1
 80105ae:	4606      	mov	r6, r0
 80105b0:	4611      	mov	r1, r2
 80105b2:	4620      	mov	r0, r4
 80105b4:	4690      	mov	r8, r2
 80105b6:	f7ff ffdb 	bl	8010570 <__mcmp>
 80105ba:	1e05      	subs	r5, r0, #0
 80105bc:	d110      	bne.n	80105e0 <__mdiff+0x38>
 80105be:	4629      	mov	r1, r5
 80105c0:	4630      	mov	r0, r6
 80105c2:	f7ff fd09 	bl	800ffd8 <_Balloc>
 80105c6:	b930      	cbnz	r0, 80105d6 <__mdiff+0x2e>
 80105c8:	4b3a      	ldr	r3, [pc, #232]	; (80106b4 <__mdiff+0x10c>)
 80105ca:	4602      	mov	r2, r0
 80105cc:	f240 2132 	movw	r1, #562	; 0x232
 80105d0:	4839      	ldr	r0, [pc, #228]	; (80106b8 <__mdiff+0x110>)
 80105d2:	f000 fc4f 	bl	8010e74 <__assert_func>
 80105d6:	2301      	movs	r3, #1
 80105d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80105dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105e0:	bfa4      	itt	ge
 80105e2:	4643      	movge	r3, r8
 80105e4:	46a0      	movge	r8, r4
 80105e6:	4630      	mov	r0, r6
 80105e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80105ec:	bfa6      	itte	ge
 80105ee:	461c      	movge	r4, r3
 80105f0:	2500      	movge	r5, #0
 80105f2:	2501      	movlt	r5, #1
 80105f4:	f7ff fcf0 	bl	800ffd8 <_Balloc>
 80105f8:	b920      	cbnz	r0, 8010604 <__mdiff+0x5c>
 80105fa:	4b2e      	ldr	r3, [pc, #184]	; (80106b4 <__mdiff+0x10c>)
 80105fc:	4602      	mov	r2, r0
 80105fe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010602:	e7e5      	b.n	80105d0 <__mdiff+0x28>
 8010604:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010608:	6926      	ldr	r6, [r4, #16]
 801060a:	60c5      	str	r5, [r0, #12]
 801060c:	f104 0914 	add.w	r9, r4, #20
 8010610:	f108 0514 	add.w	r5, r8, #20
 8010614:	f100 0e14 	add.w	lr, r0, #20
 8010618:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801061c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010620:	f108 0210 	add.w	r2, r8, #16
 8010624:	46f2      	mov	sl, lr
 8010626:	2100      	movs	r1, #0
 8010628:	f859 3b04 	ldr.w	r3, [r9], #4
 801062c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010630:	fa1f f883 	uxth.w	r8, r3
 8010634:	fa11 f18b 	uxtah	r1, r1, fp
 8010638:	0c1b      	lsrs	r3, r3, #16
 801063a:	eba1 0808 	sub.w	r8, r1, r8
 801063e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010642:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010646:	fa1f f888 	uxth.w	r8, r8
 801064a:	1419      	asrs	r1, r3, #16
 801064c:	454e      	cmp	r6, r9
 801064e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010652:	f84a 3b04 	str.w	r3, [sl], #4
 8010656:	d8e7      	bhi.n	8010628 <__mdiff+0x80>
 8010658:	1b33      	subs	r3, r6, r4
 801065a:	3b15      	subs	r3, #21
 801065c:	f023 0303 	bic.w	r3, r3, #3
 8010660:	3304      	adds	r3, #4
 8010662:	3415      	adds	r4, #21
 8010664:	42a6      	cmp	r6, r4
 8010666:	bf38      	it	cc
 8010668:	2304      	movcc	r3, #4
 801066a:	441d      	add	r5, r3
 801066c:	4473      	add	r3, lr
 801066e:	469e      	mov	lr, r3
 8010670:	462e      	mov	r6, r5
 8010672:	4566      	cmp	r6, ip
 8010674:	d30e      	bcc.n	8010694 <__mdiff+0xec>
 8010676:	f10c 0203 	add.w	r2, ip, #3
 801067a:	1b52      	subs	r2, r2, r5
 801067c:	f022 0203 	bic.w	r2, r2, #3
 8010680:	3d03      	subs	r5, #3
 8010682:	45ac      	cmp	ip, r5
 8010684:	bf38      	it	cc
 8010686:	2200      	movcc	r2, #0
 8010688:	441a      	add	r2, r3
 801068a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801068e:	b17b      	cbz	r3, 80106b0 <__mdiff+0x108>
 8010690:	6107      	str	r7, [r0, #16]
 8010692:	e7a3      	b.n	80105dc <__mdiff+0x34>
 8010694:	f856 8b04 	ldr.w	r8, [r6], #4
 8010698:	fa11 f288 	uxtah	r2, r1, r8
 801069c:	1414      	asrs	r4, r2, #16
 801069e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80106a2:	b292      	uxth	r2, r2
 80106a4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80106a8:	f84e 2b04 	str.w	r2, [lr], #4
 80106ac:	1421      	asrs	r1, r4, #16
 80106ae:	e7e0      	b.n	8010672 <__mdiff+0xca>
 80106b0:	3f01      	subs	r7, #1
 80106b2:	e7ea      	b.n	801068a <__mdiff+0xe2>
 80106b4:	080121a8 	.word	0x080121a8
 80106b8:	08012234 	.word	0x08012234

080106bc <__ulp>:
 80106bc:	b082      	sub	sp, #8
 80106be:	ed8d 0b00 	vstr	d0, [sp]
 80106c2:	9b01      	ldr	r3, [sp, #4]
 80106c4:	4912      	ldr	r1, [pc, #72]	; (8010710 <__ulp+0x54>)
 80106c6:	4019      	ands	r1, r3
 80106c8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80106cc:	2900      	cmp	r1, #0
 80106ce:	dd05      	ble.n	80106dc <__ulp+0x20>
 80106d0:	2200      	movs	r2, #0
 80106d2:	460b      	mov	r3, r1
 80106d4:	ec43 2b10 	vmov	d0, r2, r3
 80106d8:	b002      	add	sp, #8
 80106da:	4770      	bx	lr
 80106dc:	4249      	negs	r1, r1
 80106de:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80106e2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80106e6:	f04f 0200 	mov.w	r2, #0
 80106ea:	f04f 0300 	mov.w	r3, #0
 80106ee:	da04      	bge.n	80106fa <__ulp+0x3e>
 80106f0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80106f4:	fa41 f300 	asr.w	r3, r1, r0
 80106f8:	e7ec      	b.n	80106d4 <__ulp+0x18>
 80106fa:	f1a0 0114 	sub.w	r1, r0, #20
 80106fe:	291e      	cmp	r1, #30
 8010700:	bfda      	itte	le
 8010702:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010706:	fa20 f101 	lsrle.w	r1, r0, r1
 801070a:	2101      	movgt	r1, #1
 801070c:	460a      	mov	r2, r1
 801070e:	e7e1      	b.n	80106d4 <__ulp+0x18>
 8010710:	7ff00000 	.word	0x7ff00000

08010714 <__b2d>:
 8010714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010716:	6905      	ldr	r5, [r0, #16]
 8010718:	f100 0714 	add.w	r7, r0, #20
 801071c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010720:	1f2e      	subs	r6, r5, #4
 8010722:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010726:	4620      	mov	r0, r4
 8010728:	f7ff fd48 	bl	80101bc <__hi0bits>
 801072c:	f1c0 0320 	rsb	r3, r0, #32
 8010730:	280a      	cmp	r0, #10
 8010732:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80107b0 <__b2d+0x9c>
 8010736:	600b      	str	r3, [r1, #0]
 8010738:	dc14      	bgt.n	8010764 <__b2d+0x50>
 801073a:	f1c0 0e0b 	rsb	lr, r0, #11
 801073e:	fa24 f10e 	lsr.w	r1, r4, lr
 8010742:	42b7      	cmp	r7, r6
 8010744:	ea41 030c 	orr.w	r3, r1, ip
 8010748:	bf34      	ite	cc
 801074a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801074e:	2100      	movcs	r1, #0
 8010750:	3015      	adds	r0, #21
 8010752:	fa04 f000 	lsl.w	r0, r4, r0
 8010756:	fa21 f10e 	lsr.w	r1, r1, lr
 801075a:	ea40 0201 	orr.w	r2, r0, r1
 801075e:	ec43 2b10 	vmov	d0, r2, r3
 8010762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010764:	42b7      	cmp	r7, r6
 8010766:	bf3a      	itte	cc
 8010768:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801076c:	f1a5 0608 	subcc.w	r6, r5, #8
 8010770:	2100      	movcs	r1, #0
 8010772:	380b      	subs	r0, #11
 8010774:	d017      	beq.n	80107a6 <__b2d+0x92>
 8010776:	f1c0 0c20 	rsb	ip, r0, #32
 801077a:	fa04 f500 	lsl.w	r5, r4, r0
 801077e:	42be      	cmp	r6, r7
 8010780:	fa21 f40c 	lsr.w	r4, r1, ip
 8010784:	ea45 0504 	orr.w	r5, r5, r4
 8010788:	bf8c      	ite	hi
 801078a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801078e:	2400      	movls	r4, #0
 8010790:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010794:	fa01 f000 	lsl.w	r0, r1, r0
 8010798:	fa24 f40c 	lsr.w	r4, r4, ip
 801079c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80107a0:	ea40 0204 	orr.w	r2, r0, r4
 80107a4:	e7db      	b.n	801075e <__b2d+0x4a>
 80107a6:	ea44 030c 	orr.w	r3, r4, ip
 80107aa:	460a      	mov	r2, r1
 80107ac:	e7d7      	b.n	801075e <__b2d+0x4a>
 80107ae:	bf00      	nop
 80107b0:	3ff00000 	.word	0x3ff00000

080107b4 <__d2b>:
 80107b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80107b8:	4689      	mov	r9, r1
 80107ba:	2101      	movs	r1, #1
 80107bc:	ec57 6b10 	vmov	r6, r7, d0
 80107c0:	4690      	mov	r8, r2
 80107c2:	f7ff fc09 	bl	800ffd8 <_Balloc>
 80107c6:	4604      	mov	r4, r0
 80107c8:	b930      	cbnz	r0, 80107d8 <__d2b+0x24>
 80107ca:	4602      	mov	r2, r0
 80107cc:	4b25      	ldr	r3, [pc, #148]	; (8010864 <__d2b+0xb0>)
 80107ce:	4826      	ldr	r0, [pc, #152]	; (8010868 <__d2b+0xb4>)
 80107d0:	f240 310a 	movw	r1, #778	; 0x30a
 80107d4:	f000 fb4e 	bl	8010e74 <__assert_func>
 80107d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80107dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80107e0:	bb35      	cbnz	r5, 8010830 <__d2b+0x7c>
 80107e2:	2e00      	cmp	r6, #0
 80107e4:	9301      	str	r3, [sp, #4]
 80107e6:	d028      	beq.n	801083a <__d2b+0x86>
 80107e8:	4668      	mov	r0, sp
 80107ea:	9600      	str	r6, [sp, #0]
 80107ec:	f7ff fd06 	bl	80101fc <__lo0bits>
 80107f0:	9900      	ldr	r1, [sp, #0]
 80107f2:	b300      	cbz	r0, 8010836 <__d2b+0x82>
 80107f4:	9a01      	ldr	r2, [sp, #4]
 80107f6:	f1c0 0320 	rsb	r3, r0, #32
 80107fa:	fa02 f303 	lsl.w	r3, r2, r3
 80107fe:	430b      	orrs	r3, r1
 8010800:	40c2      	lsrs	r2, r0
 8010802:	6163      	str	r3, [r4, #20]
 8010804:	9201      	str	r2, [sp, #4]
 8010806:	9b01      	ldr	r3, [sp, #4]
 8010808:	61a3      	str	r3, [r4, #24]
 801080a:	2b00      	cmp	r3, #0
 801080c:	bf14      	ite	ne
 801080e:	2202      	movne	r2, #2
 8010810:	2201      	moveq	r2, #1
 8010812:	6122      	str	r2, [r4, #16]
 8010814:	b1d5      	cbz	r5, 801084c <__d2b+0x98>
 8010816:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801081a:	4405      	add	r5, r0
 801081c:	f8c9 5000 	str.w	r5, [r9]
 8010820:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010824:	f8c8 0000 	str.w	r0, [r8]
 8010828:	4620      	mov	r0, r4
 801082a:	b003      	add	sp, #12
 801082c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010830:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010834:	e7d5      	b.n	80107e2 <__d2b+0x2e>
 8010836:	6161      	str	r1, [r4, #20]
 8010838:	e7e5      	b.n	8010806 <__d2b+0x52>
 801083a:	a801      	add	r0, sp, #4
 801083c:	f7ff fcde 	bl	80101fc <__lo0bits>
 8010840:	9b01      	ldr	r3, [sp, #4]
 8010842:	6163      	str	r3, [r4, #20]
 8010844:	2201      	movs	r2, #1
 8010846:	6122      	str	r2, [r4, #16]
 8010848:	3020      	adds	r0, #32
 801084a:	e7e3      	b.n	8010814 <__d2b+0x60>
 801084c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010850:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010854:	f8c9 0000 	str.w	r0, [r9]
 8010858:	6918      	ldr	r0, [r3, #16]
 801085a:	f7ff fcaf 	bl	80101bc <__hi0bits>
 801085e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010862:	e7df      	b.n	8010824 <__d2b+0x70>
 8010864:	080121a8 	.word	0x080121a8
 8010868:	08012234 	.word	0x08012234

0801086c <__ratio>:
 801086c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010870:	4688      	mov	r8, r1
 8010872:	4669      	mov	r1, sp
 8010874:	4681      	mov	r9, r0
 8010876:	f7ff ff4d 	bl	8010714 <__b2d>
 801087a:	a901      	add	r1, sp, #4
 801087c:	4640      	mov	r0, r8
 801087e:	ec55 4b10 	vmov	r4, r5, d0
 8010882:	f7ff ff47 	bl	8010714 <__b2d>
 8010886:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801088a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801088e:	eba3 0c02 	sub.w	ip, r3, r2
 8010892:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010896:	1a9b      	subs	r3, r3, r2
 8010898:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801089c:	ec51 0b10 	vmov	r0, r1, d0
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	bfd6      	itet	le
 80108a4:	460a      	movle	r2, r1
 80108a6:	462a      	movgt	r2, r5
 80108a8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80108ac:	468b      	mov	fp, r1
 80108ae:	462f      	mov	r7, r5
 80108b0:	bfd4      	ite	le
 80108b2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80108b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80108ba:	4620      	mov	r0, r4
 80108bc:	ee10 2a10 	vmov	r2, s0
 80108c0:	465b      	mov	r3, fp
 80108c2:	4639      	mov	r1, r7
 80108c4:	f7ef ffca 	bl	800085c <__aeabi_ddiv>
 80108c8:	ec41 0b10 	vmov	d0, r0, r1
 80108cc:	b003      	add	sp, #12
 80108ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080108d2 <__copybits>:
 80108d2:	3901      	subs	r1, #1
 80108d4:	b570      	push	{r4, r5, r6, lr}
 80108d6:	1149      	asrs	r1, r1, #5
 80108d8:	6914      	ldr	r4, [r2, #16]
 80108da:	3101      	adds	r1, #1
 80108dc:	f102 0314 	add.w	r3, r2, #20
 80108e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80108e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80108e8:	1f05      	subs	r5, r0, #4
 80108ea:	42a3      	cmp	r3, r4
 80108ec:	d30c      	bcc.n	8010908 <__copybits+0x36>
 80108ee:	1aa3      	subs	r3, r4, r2
 80108f0:	3b11      	subs	r3, #17
 80108f2:	f023 0303 	bic.w	r3, r3, #3
 80108f6:	3211      	adds	r2, #17
 80108f8:	42a2      	cmp	r2, r4
 80108fa:	bf88      	it	hi
 80108fc:	2300      	movhi	r3, #0
 80108fe:	4418      	add	r0, r3
 8010900:	2300      	movs	r3, #0
 8010902:	4288      	cmp	r0, r1
 8010904:	d305      	bcc.n	8010912 <__copybits+0x40>
 8010906:	bd70      	pop	{r4, r5, r6, pc}
 8010908:	f853 6b04 	ldr.w	r6, [r3], #4
 801090c:	f845 6f04 	str.w	r6, [r5, #4]!
 8010910:	e7eb      	b.n	80108ea <__copybits+0x18>
 8010912:	f840 3b04 	str.w	r3, [r0], #4
 8010916:	e7f4      	b.n	8010902 <__copybits+0x30>

08010918 <__any_on>:
 8010918:	f100 0214 	add.w	r2, r0, #20
 801091c:	6900      	ldr	r0, [r0, #16]
 801091e:	114b      	asrs	r3, r1, #5
 8010920:	4298      	cmp	r0, r3
 8010922:	b510      	push	{r4, lr}
 8010924:	db11      	blt.n	801094a <__any_on+0x32>
 8010926:	dd0a      	ble.n	801093e <__any_on+0x26>
 8010928:	f011 011f 	ands.w	r1, r1, #31
 801092c:	d007      	beq.n	801093e <__any_on+0x26>
 801092e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010932:	fa24 f001 	lsr.w	r0, r4, r1
 8010936:	fa00 f101 	lsl.w	r1, r0, r1
 801093a:	428c      	cmp	r4, r1
 801093c:	d10b      	bne.n	8010956 <__any_on+0x3e>
 801093e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010942:	4293      	cmp	r3, r2
 8010944:	d803      	bhi.n	801094e <__any_on+0x36>
 8010946:	2000      	movs	r0, #0
 8010948:	bd10      	pop	{r4, pc}
 801094a:	4603      	mov	r3, r0
 801094c:	e7f7      	b.n	801093e <__any_on+0x26>
 801094e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010952:	2900      	cmp	r1, #0
 8010954:	d0f5      	beq.n	8010942 <__any_on+0x2a>
 8010956:	2001      	movs	r0, #1
 8010958:	e7f6      	b.n	8010948 <__any_on+0x30>

0801095a <_calloc_r>:
 801095a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801095c:	fba1 2402 	umull	r2, r4, r1, r2
 8010960:	b94c      	cbnz	r4, 8010976 <_calloc_r+0x1c>
 8010962:	4611      	mov	r1, r2
 8010964:	9201      	str	r2, [sp, #4]
 8010966:	f000 f87b 	bl	8010a60 <_malloc_r>
 801096a:	9a01      	ldr	r2, [sp, #4]
 801096c:	4605      	mov	r5, r0
 801096e:	b930      	cbnz	r0, 801097e <_calloc_r+0x24>
 8010970:	4628      	mov	r0, r5
 8010972:	b003      	add	sp, #12
 8010974:	bd30      	pop	{r4, r5, pc}
 8010976:	220c      	movs	r2, #12
 8010978:	6002      	str	r2, [r0, #0]
 801097a:	2500      	movs	r5, #0
 801097c:	e7f8      	b.n	8010970 <_calloc_r+0x16>
 801097e:	4621      	mov	r1, r4
 8010980:	f7fc fbc4 	bl	800d10c <memset>
 8010984:	e7f4      	b.n	8010970 <_calloc_r+0x16>
	...

08010988 <_free_r>:
 8010988:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801098a:	2900      	cmp	r1, #0
 801098c:	d044      	beq.n	8010a18 <_free_r+0x90>
 801098e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010992:	9001      	str	r0, [sp, #4]
 8010994:	2b00      	cmp	r3, #0
 8010996:	f1a1 0404 	sub.w	r4, r1, #4
 801099a:	bfb8      	it	lt
 801099c:	18e4      	addlt	r4, r4, r3
 801099e:	f000 fab3 	bl	8010f08 <__malloc_lock>
 80109a2:	4a1e      	ldr	r2, [pc, #120]	; (8010a1c <_free_r+0x94>)
 80109a4:	9801      	ldr	r0, [sp, #4]
 80109a6:	6813      	ldr	r3, [r2, #0]
 80109a8:	b933      	cbnz	r3, 80109b8 <_free_r+0x30>
 80109aa:	6063      	str	r3, [r4, #4]
 80109ac:	6014      	str	r4, [r2, #0]
 80109ae:	b003      	add	sp, #12
 80109b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80109b4:	f000 baae 	b.w	8010f14 <__malloc_unlock>
 80109b8:	42a3      	cmp	r3, r4
 80109ba:	d908      	bls.n	80109ce <_free_r+0x46>
 80109bc:	6825      	ldr	r5, [r4, #0]
 80109be:	1961      	adds	r1, r4, r5
 80109c0:	428b      	cmp	r3, r1
 80109c2:	bf01      	itttt	eq
 80109c4:	6819      	ldreq	r1, [r3, #0]
 80109c6:	685b      	ldreq	r3, [r3, #4]
 80109c8:	1949      	addeq	r1, r1, r5
 80109ca:	6021      	streq	r1, [r4, #0]
 80109cc:	e7ed      	b.n	80109aa <_free_r+0x22>
 80109ce:	461a      	mov	r2, r3
 80109d0:	685b      	ldr	r3, [r3, #4]
 80109d2:	b10b      	cbz	r3, 80109d8 <_free_r+0x50>
 80109d4:	42a3      	cmp	r3, r4
 80109d6:	d9fa      	bls.n	80109ce <_free_r+0x46>
 80109d8:	6811      	ldr	r1, [r2, #0]
 80109da:	1855      	adds	r5, r2, r1
 80109dc:	42a5      	cmp	r5, r4
 80109de:	d10b      	bne.n	80109f8 <_free_r+0x70>
 80109e0:	6824      	ldr	r4, [r4, #0]
 80109e2:	4421      	add	r1, r4
 80109e4:	1854      	adds	r4, r2, r1
 80109e6:	42a3      	cmp	r3, r4
 80109e8:	6011      	str	r1, [r2, #0]
 80109ea:	d1e0      	bne.n	80109ae <_free_r+0x26>
 80109ec:	681c      	ldr	r4, [r3, #0]
 80109ee:	685b      	ldr	r3, [r3, #4]
 80109f0:	6053      	str	r3, [r2, #4]
 80109f2:	4421      	add	r1, r4
 80109f4:	6011      	str	r1, [r2, #0]
 80109f6:	e7da      	b.n	80109ae <_free_r+0x26>
 80109f8:	d902      	bls.n	8010a00 <_free_r+0x78>
 80109fa:	230c      	movs	r3, #12
 80109fc:	6003      	str	r3, [r0, #0]
 80109fe:	e7d6      	b.n	80109ae <_free_r+0x26>
 8010a00:	6825      	ldr	r5, [r4, #0]
 8010a02:	1961      	adds	r1, r4, r5
 8010a04:	428b      	cmp	r3, r1
 8010a06:	bf04      	itt	eq
 8010a08:	6819      	ldreq	r1, [r3, #0]
 8010a0a:	685b      	ldreq	r3, [r3, #4]
 8010a0c:	6063      	str	r3, [r4, #4]
 8010a0e:	bf04      	itt	eq
 8010a10:	1949      	addeq	r1, r1, r5
 8010a12:	6021      	streq	r1, [r4, #0]
 8010a14:	6054      	str	r4, [r2, #4]
 8010a16:	e7ca      	b.n	80109ae <_free_r+0x26>
 8010a18:	b003      	add	sp, #12
 8010a1a:	bd30      	pop	{r4, r5, pc}
 8010a1c:	2000090c 	.word	0x2000090c

08010a20 <sbrk_aligned>:
 8010a20:	b570      	push	{r4, r5, r6, lr}
 8010a22:	4e0e      	ldr	r6, [pc, #56]	; (8010a5c <sbrk_aligned+0x3c>)
 8010a24:	460c      	mov	r4, r1
 8010a26:	6831      	ldr	r1, [r6, #0]
 8010a28:	4605      	mov	r5, r0
 8010a2a:	b911      	cbnz	r1, 8010a32 <sbrk_aligned+0x12>
 8010a2c:	f000 f9f0 	bl	8010e10 <_sbrk_r>
 8010a30:	6030      	str	r0, [r6, #0]
 8010a32:	4621      	mov	r1, r4
 8010a34:	4628      	mov	r0, r5
 8010a36:	f000 f9eb 	bl	8010e10 <_sbrk_r>
 8010a3a:	1c43      	adds	r3, r0, #1
 8010a3c:	d00a      	beq.n	8010a54 <sbrk_aligned+0x34>
 8010a3e:	1cc4      	adds	r4, r0, #3
 8010a40:	f024 0403 	bic.w	r4, r4, #3
 8010a44:	42a0      	cmp	r0, r4
 8010a46:	d007      	beq.n	8010a58 <sbrk_aligned+0x38>
 8010a48:	1a21      	subs	r1, r4, r0
 8010a4a:	4628      	mov	r0, r5
 8010a4c:	f000 f9e0 	bl	8010e10 <_sbrk_r>
 8010a50:	3001      	adds	r0, #1
 8010a52:	d101      	bne.n	8010a58 <sbrk_aligned+0x38>
 8010a54:	f04f 34ff 	mov.w	r4, #4294967295
 8010a58:	4620      	mov	r0, r4
 8010a5a:	bd70      	pop	{r4, r5, r6, pc}
 8010a5c:	20000910 	.word	0x20000910

08010a60 <_malloc_r>:
 8010a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a64:	1ccd      	adds	r5, r1, #3
 8010a66:	f025 0503 	bic.w	r5, r5, #3
 8010a6a:	3508      	adds	r5, #8
 8010a6c:	2d0c      	cmp	r5, #12
 8010a6e:	bf38      	it	cc
 8010a70:	250c      	movcc	r5, #12
 8010a72:	2d00      	cmp	r5, #0
 8010a74:	4607      	mov	r7, r0
 8010a76:	db01      	blt.n	8010a7c <_malloc_r+0x1c>
 8010a78:	42a9      	cmp	r1, r5
 8010a7a:	d905      	bls.n	8010a88 <_malloc_r+0x28>
 8010a7c:	230c      	movs	r3, #12
 8010a7e:	603b      	str	r3, [r7, #0]
 8010a80:	2600      	movs	r6, #0
 8010a82:	4630      	mov	r0, r6
 8010a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a88:	4e2e      	ldr	r6, [pc, #184]	; (8010b44 <_malloc_r+0xe4>)
 8010a8a:	f000 fa3d 	bl	8010f08 <__malloc_lock>
 8010a8e:	6833      	ldr	r3, [r6, #0]
 8010a90:	461c      	mov	r4, r3
 8010a92:	bb34      	cbnz	r4, 8010ae2 <_malloc_r+0x82>
 8010a94:	4629      	mov	r1, r5
 8010a96:	4638      	mov	r0, r7
 8010a98:	f7ff ffc2 	bl	8010a20 <sbrk_aligned>
 8010a9c:	1c43      	adds	r3, r0, #1
 8010a9e:	4604      	mov	r4, r0
 8010aa0:	d14d      	bne.n	8010b3e <_malloc_r+0xde>
 8010aa2:	6834      	ldr	r4, [r6, #0]
 8010aa4:	4626      	mov	r6, r4
 8010aa6:	2e00      	cmp	r6, #0
 8010aa8:	d140      	bne.n	8010b2c <_malloc_r+0xcc>
 8010aaa:	6823      	ldr	r3, [r4, #0]
 8010aac:	4631      	mov	r1, r6
 8010aae:	4638      	mov	r0, r7
 8010ab0:	eb04 0803 	add.w	r8, r4, r3
 8010ab4:	f000 f9ac 	bl	8010e10 <_sbrk_r>
 8010ab8:	4580      	cmp	r8, r0
 8010aba:	d13a      	bne.n	8010b32 <_malloc_r+0xd2>
 8010abc:	6821      	ldr	r1, [r4, #0]
 8010abe:	3503      	adds	r5, #3
 8010ac0:	1a6d      	subs	r5, r5, r1
 8010ac2:	f025 0503 	bic.w	r5, r5, #3
 8010ac6:	3508      	adds	r5, #8
 8010ac8:	2d0c      	cmp	r5, #12
 8010aca:	bf38      	it	cc
 8010acc:	250c      	movcc	r5, #12
 8010ace:	4629      	mov	r1, r5
 8010ad0:	4638      	mov	r0, r7
 8010ad2:	f7ff ffa5 	bl	8010a20 <sbrk_aligned>
 8010ad6:	3001      	adds	r0, #1
 8010ad8:	d02b      	beq.n	8010b32 <_malloc_r+0xd2>
 8010ada:	6823      	ldr	r3, [r4, #0]
 8010adc:	442b      	add	r3, r5
 8010ade:	6023      	str	r3, [r4, #0]
 8010ae0:	e00e      	b.n	8010b00 <_malloc_r+0xa0>
 8010ae2:	6822      	ldr	r2, [r4, #0]
 8010ae4:	1b52      	subs	r2, r2, r5
 8010ae6:	d41e      	bmi.n	8010b26 <_malloc_r+0xc6>
 8010ae8:	2a0b      	cmp	r2, #11
 8010aea:	d916      	bls.n	8010b1a <_malloc_r+0xba>
 8010aec:	1961      	adds	r1, r4, r5
 8010aee:	42a3      	cmp	r3, r4
 8010af0:	6025      	str	r5, [r4, #0]
 8010af2:	bf18      	it	ne
 8010af4:	6059      	strne	r1, [r3, #4]
 8010af6:	6863      	ldr	r3, [r4, #4]
 8010af8:	bf08      	it	eq
 8010afa:	6031      	streq	r1, [r6, #0]
 8010afc:	5162      	str	r2, [r4, r5]
 8010afe:	604b      	str	r3, [r1, #4]
 8010b00:	4638      	mov	r0, r7
 8010b02:	f104 060b 	add.w	r6, r4, #11
 8010b06:	f000 fa05 	bl	8010f14 <__malloc_unlock>
 8010b0a:	f026 0607 	bic.w	r6, r6, #7
 8010b0e:	1d23      	adds	r3, r4, #4
 8010b10:	1af2      	subs	r2, r6, r3
 8010b12:	d0b6      	beq.n	8010a82 <_malloc_r+0x22>
 8010b14:	1b9b      	subs	r3, r3, r6
 8010b16:	50a3      	str	r3, [r4, r2]
 8010b18:	e7b3      	b.n	8010a82 <_malloc_r+0x22>
 8010b1a:	6862      	ldr	r2, [r4, #4]
 8010b1c:	42a3      	cmp	r3, r4
 8010b1e:	bf0c      	ite	eq
 8010b20:	6032      	streq	r2, [r6, #0]
 8010b22:	605a      	strne	r2, [r3, #4]
 8010b24:	e7ec      	b.n	8010b00 <_malloc_r+0xa0>
 8010b26:	4623      	mov	r3, r4
 8010b28:	6864      	ldr	r4, [r4, #4]
 8010b2a:	e7b2      	b.n	8010a92 <_malloc_r+0x32>
 8010b2c:	4634      	mov	r4, r6
 8010b2e:	6876      	ldr	r6, [r6, #4]
 8010b30:	e7b9      	b.n	8010aa6 <_malloc_r+0x46>
 8010b32:	230c      	movs	r3, #12
 8010b34:	603b      	str	r3, [r7, #0]
 8010b36:	4638      	mov	r0, r7
 8010b38:	f000 f9ec 	bl	8010f14 <__malloc_unlock>
 8010b3c:	e7a1      	b.n	8010a82 <_malloc_r+0x22>
 8010b3e:	6025      	str	r5, [r4, #0]
 8010b40:	e7de      	b.n	8010b00 <_malloc_r+0xa0>
 8010b42:	bf00      	nop
 8010b44:	2000090c 	.word	0x2000090c

08010b48 <__ssputs_r>:
 8010b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b4c:	688e      	ldr	r6, [r1, #8]
 8010b4e:	429e      	cmp	r6, r3
 8010b50:	4682      	mov	sl, r0
 8010b52:	460c      	mov	r4, r1
 8010b54:	4690      	mov	r8, r2
 8010b56:	461f      	mov	r7, r3
 8010b58:	d838      	bhi.n	8010bcc <__ssputs_r+0x84>
 8010b5a:	898a      	ldrh	r2, [r1, #12]
 8010b5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010b60:	d032      	beq.n	8010bc8 <__ssputs_r+0x80>
 8010b62:	6825      	ldr	r5, [r4, #0]
 8010b64:	6909      	ldr	r1, [r1, #16]
 8010b66:	eba5 0901 	sub.w	r9, r5, r1
 8010b6a:	6965      	ldr	r5, [r4, #20]
 8010b6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010b70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010b74:	3301      	adds	r3, #1
 8010b76:	444b      	add	r3, r9
 8010b78:	106d      	asrs	r5, r5, #1
 8010b7a:	429d      	cmp	r5, r3
 8010b7c:	bf38      	it	cc
 8010b7e:	461d      	movcc	r5, r3
 8010b80:	0553      	lsls	r3, r2, #21
 8010b82:	d531      	bpl.n	8010be8 <__ssputs_r+0xa0>
 8010b84:	4629      	mov	r1, r5
 8010b86:	f7ff ff6b 	bl	8010a60 <_malloc_r>
 8010b8a:	4606      	mov	r6, r0
 8010b8c:	b950      	cbnz	r0, 8010ba4 <__ssputs_r+0x5c>
 8010b8e:	230c      	movs	r3, #12
 8010b90:	f8ca 3000 	str.w	r3, [sl]
 8010b94:	89a3      	ldrh	r3, [r4, #12]
 8010b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b9a:	81a3      	strh	r3, [r4, #12]
 8010b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8010ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ba4:	6921      	ldr	r1, [r4, #16]
 8010ba6:	464a      	mov	r2, r9
 8010ba8:	f7fc faa2 	bl	800d0f0 <memcpy>
 8010bac:	89a3      	ldrh	r3, [r4, #12]
 8010bae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bb6:	81a3      	strh	r3, [r4, #12]
 8010bb8:	6126      	str	r6, [r4, #16]
 8010bba:	6165      	str	r5, [r4, #20]
 8010bbc:	444e      	add	r6, r9
 8010bbe:	eba5 0509 	sub.w	r5, r5, r9
 8010bc2:	6026      	str	r6, [r4, #0]
 8010bc4:	60a5      	str	r5, [r4, #8]
 8010bc6:	463e      	mov	r6, r7
 8010bc8:	42be      	cmp	r6, r7
 8010bca:	d900      	bls.n	8010bce <__ssputs_r+0x86>
 8010bcc:	463e      	mov	r6, r7
 8010bce:	6820      	ldr	r0, [r4, #0]
 8010bd0:	4632      	mov	r2, r6
 8010bd2:	4641      	mov	r1, r8
 8010bd4:	f000 f97e 	bl	8010ed4 <memmove>
 8010bd8:	68a3      	ldr	r3, [r4, #8]
 8010bda:	1b9b      	subs	r3, r3, r6
 8010bdc:	60a3      	str	r3, [r4, #8]
 8010bde:	6823      	ldr	r3, [r4, #0]
 8010be0:	4433      	add	r3, r6
 8010be2:	6023      	str	r3, [r4, #0]
 8010be4:	2000      	movs	r0, #0
 8010be6:	e7db      	b.n	8010ba0 <__ssputs_r+0x58>
 8010be8:	462a      	mov	r2, r5
 8010bea:	f000 f999 	bl	8010f20 <_realloc_r>
 8010bee:	4606      	mov	r6, r0
 8010bf0:	2800      	cmp	r0, #0
 8010bf2:	d1e1      	bne.n	8010bb8 <__ssputs_r+0x70>
 8010bf4:	6921      	ldr	r1, [r4, #16]
 8010bf6:	4650      	mov	r0, sl
 8010bf8:	f7ff fec6 	bl	8010988 <_free_r>
 8010bfc:	e7c7      	b.n	8010b8e <__ssputs_r+0x46>
	...

08010c00 <_svfiprintf_r>:
 8010c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c04:	4698      	mov	r8, r3
 8010c06:	898b      	ldrh	r3, [r1, #12]
 8010c08:	061b      	lsls	r3, r3, #24
 8010c0a:	b09d      	sub	sp, #116	; 0x74
 8010c0c:	4607      	mov	r7, r0
 8010c0e:	460d      	mov	r5, r1
 8010c10:	4614      	mov	r4, r2
 8010c12:	d50e      	bpl.n	8010c32 <_svfiprintf_r+0x32>
 8010c14:	690b      	ldr	r3, [r1, #16]
 8010c16:	b963      	cbnz	r3, 8010c32 <_svfiprintf_r+0x32>
 8010c18:	2140      	movs	r1, #64	; 0x40
 8010c1a:	f7ff ff21 	bl	8010a60 <_malloc_r>
 8010c1e:	6028      	str	r0, [r5, #0]
 8010c20:	6128      	str	r0, [r5, #16]
 8010c22:	b920      	cbnz	r0, 8010c2e <_svfiprintf_r+0x2e>
 8010c24:	230c      	movs	r3, #12
 8010c26:	603b      	str	r3, [r7, #0]
 8010c28:	f04f 30ff 	mov.w	r0, #4294967295
 8010c2c:	e0d1      	b.n	8010dd2 <_svfiprintf_r+0x1d2>
 8010c2e:	2340      	movs	r3, #64	; 0x40
 8010c30:	616b      	str	r3, [r5, #20]
 8010c32:	2300      	movs	r3, #0
 8010c34:	9309      	str	r3, [sp, #36]	; 0x24
 8010c36:	2320      	movs	r3, #32
 8010c38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c40:	2330      	movs	r3, #48	; 0x30
 8010c42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010dec <_svfiprintf_r+0x1ec>
 8010c46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c4a:	f04f 0901 	mov.w	r9, #1
 8010c4e:	4623      	mov	r3, r4
 8010c50:	469a      	mov	sl, r3
 8010c52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c56:	b10a      	cbz	r2, 8010c5c <_svfiprintf_r+0x5c>
 8010c58:	2a25      	cmp	r2, #37	; 0x25
 8010c5a:	d1f9      	bne.n	8010c50 <_svfiprintf_r+0x50>
 8010c5c:	ebba 0b04 	subs.w	fp, sl, r4
 8010c60:	d00b      	beq.n	8010c7a <_svfiprintf_r+0x7a>
 8010c62:	465b      	mov	r3, fp
 8010c64:	4622      	mov	r2, r4
 8010c66:	4629      	mov	r1, r5
 8010c68:	4638      	mov	r0, r7
 8010c6a:	f7ff ff6d 	bl	8010b48 <__ssputs_r>
 8010c6e:	3001      	adds	r0, #1
 8010c70:	f000 80aa 	beq.w	8010dc8 <_svfiprintf_r+0x1c8>
 8010c74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c76:	445a      	add	r2, fp
 8010c78:	9209      	str	r2, [sp, #36]	; 0x24
 8010c7a:	f89a 3000 	ldrb.w	r3, [sl]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	f000 80a2 	beq.w	8010dc8 <_svfiprintf_r+0x1c8>
 8010c84:	2300      	movs	r3, #0
 8010c86:	f04f 32ff 	mov.w	r2, #4294967295
 8010c8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c8e:	f10a 0a01 	add.w	sl, sl, #1
 8010c92:	9304      	str	r3, [sp, #16]
 8010c94:	9307      	str	r3, [sp, #28]
 8010c96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010c9a:	931a      	str	r3, [sp, #104]	; 0x68
 8010c9c:	4654      	mov	r4, sl
 8010c9e:	2205      	movs	r2, #5
 8010ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ca4:	4851      	ldr	r0, [pc, #324]	; (8010dec <_svfiprintf_r+0x1ec>)
 8010ca6:	f7ef faa3 	bl	80001f0 <memchr>
 8010caa:	9a04      	ldr	r2, [sp, #16]
 8010cac:	b9d8      	cbnz	r0, 8010ce6 <_svfiprintf_r+0xe6>
 8010cae:	06d0      	lsls	r0, r2, #27
 8010cb0:	bf44      	itt	mi
 8010cb2:	2320      	movmi	r3, #32
 8010cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010cb8:	0711      	lsls	r1, r2, #28
 8010cba:	bf44      	itt	mi
 8010cbc:	232b      	movmi	r3, #43	; 0x2b
 8010cbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8010cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8010cc8:	d015      	beq.n	8010cf6 <_svfiprintf_r+0xf6>
 8010cca:	9a07      	ldr	r2, [sp, #28]
 8010ccc:	4654      	mov	r4, sl
 8010cce:	2000      	movs	r0, #0
 8010cd0:	f04f 0c0a 	mov.w	ip, #10
 8010cd4:	4621      	mov	r1, r4
 8010cd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010cda:	3b30      	subs	r3, #48	; 0x30
 8010cdc:	2b09      	cmp	r3, #9
 8010cde:	d94e      	bls.n	8010d7e <_svfiprintf_r+0x17e>
 8010ce0:	b1b0      	cbz	r0, 8010d10 <_svfiprintf_r+0x110>
 8010ce2:	9207      	str	r2, [sp, #28]
 8010ce4:	e014      	b.n	8010d10 <_svfiprintf_r+0x110>
 8010ce6:	eba0 0308 	sub.w	r3, r0, r8
 8010cea:	fa09 f303 	lsl.w	r3, r9, r3
 8010cee:	4313      	orrs	r3, r2
 8010cf0:	9304      	str	r3, [sp, #16]
 8010cf2:	46a2      	mov	sl, r4
 8010cf4:	e7d2      	b.n	8010c9c <_svfiprintf_r+0x9c>
 8010cf6:	9b03      	ldr	r3, [sp, #12]
 8010cf8:	1d19      	adds	r1, r3, #4
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	9103      	str	r1, [sp, #12]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	bfbb      	ittet	lt
 8010d02:	425b      	neglt	r3, r3
 8010d04:	f042 0202 	orrlt.w	r2, r2, #2
 8010d08:	9307      	strge	r3, [sp, #28]
 8010d0a:	9307      	strlt	r3, [sp, #28]
 8010d0c:	bfb8      	it	lt
 8010d0e:	9204      	strlt	r2, [sp, #16]
 8010d10:	7823      	ldrb	r3, [r4, #0]
 8010d12:	2b2e      	cmp	r3, #46	; 0x2e
 8010d14:	d10c      	bne.n	8010d30 <_svfiprintf_r+0x130>
 8010d16:	7863      	ldrb	r3, [r4, #1]
 8010d18:	2b2a      	cmp	r3, #42	; 0x2a
 8010d1a:	d135      	bne.n	8010d88 <_svfiprintf_r+0x188>
 8010d1c:	9b03      	ldr	r3, [sp, #12]
 8010d1e:	1d1a      	adds	r2, r3, #4
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	9203      	str	r2, [sp, #12]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	bfb8      	it	lt
 8010d28:	f04f 33ff 	movlt.w	r3, #4294967295
 8010d2c:	3402      	adds	r4, #2
 8010d2e:	9305      	str	r3, [sp, #20]
 8010d30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010dfc <_svfiprintf_r+0x1fc>
 8010d34:	7821      	ldrb	r1, [r4, #0]
 8010d36:	2203      	movs	r2, #3
 8010d38:	4650      	mov	r0, sl
 8010d3a:	f7ef fa59 	bl	80001f0 <memchr>
 8010d3e:	b140      	cbz	r0, 8010d52 <_svfiprintf_r+0x152>
 8010d40:	2340      	movs	r3, #64	; 0x40
 8010d42:	eba0 000a 	sub.w	r0, r0, sl
 8010d46:	fa03 f000 	lsl.w	r0, r3, r0
 8010d4a:	9b04      	ldr	r3, [sp, #16]
 8010d4c:	4303      	orrs	r3, r0
 8010d4e:	3401      	adds	r4, #1
 8010d50:	9304      	str	r3, [sp, #16]
 8010d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d56:	4826      	ldr	r0, [pc, #152]	; (8010df0 <_svfiprintf_r+0x1f0>)
 8010d58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d5c:	2206      	movs	r2, #6
 8010d5e:	f7ef fa47 	bl	80001f0 <memchr>
 8010d62:	2800      	cmp	r0, #0
 8010d64:	d038      	beq.n	8010dd8 <_svfiprintf_r+0x1d8>
 8010d66:	4b23      	ldr	r3, [pc, #140]	; (8010df4 <_svfiprintf_r+0x1f4>)
 8010d68:	bb1b      	cbnz	r3, 8010db2 <_svfiprintf_r+0x1b2>
 8010d6a:	9b03      	ldr	r3, [sp, #12]
 8010d6c:	3307      	adds	r3, #7
 8010d6e:	f023 0307 	bic.w	r3, r3, #7
 8010d72:	3308      	adds	r3, #8
 8010d74:	9303      	str	r3, [sp, #12]
 8010d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d78:	4433      	add	r3, r6
 8010d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8010d7c:	e767      	b.n	8010c4e <_svfiprintf_r+0x4e>
 8010d7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010d82:	460c      	mov	r4, r1
 8010d84:	2001      	movs	r0, #1
 8010d86:	e7a5      	b.n	8010cd4 <_svfiprintf_r+0xd4>
 8010d88:	2300      	movs	r3, #0
 8010d8a:	3401      	adds	r4, #1
 8010d8c:	9305      	str	r3, [sp, #20]
 8010d8e:	4619      	mov	r1, r3
 8010d90:	f04f 0c0a 	mov.w	ip, #10
 8010d94:	4620      	mov	r0, r4
 8010d96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d9a:	3a30      	subs	r2, #48	; 0x30
 8010d9c:	2a09      	cmp	r2, #9
 8010d9e:	d903      	bls.n	8010da8 <_svfiprintf_r+0x1a8>
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d0c5      	beq.n	8010d30 <_svfiprintf_r+0x130>
 8010da4:	9105      	str	r1, [sp, #20]
 8010da6:	e7c3      	b.n	8010d30 <_svfiprintf_r+0x130>
 8010da8:	fb0c 2101 	mla	r1, ip, r1, r2
 8010dac:	4604      	mov	r4, r0
 8010dae:	2301      	movs	r3, #1
 8010db0:	e7f0      	b.n	8010d94 <_svfiprintf_r+0x194>
 8010db2:	ab03      	add	r3, sp, #12
 8010db4:	9300      	str	r3, [sp, #0]
 8010db6:	462a      	mov	r2, r5
 8010db8:	4b0f      	ldr	r3, [pc, #60]	; (8010df8 <_svfiprintf_r+0x1f8>)
 8010dba:	a904      	add	r1, sp, #16
 8010dbc:	4638      	mov	r0, r7
 8010dbe:	f7fc fa4d 	bl	800d25c <_printf_float>
 8010dc2:	1c42      	adds	r2, r0, #1
 8010dc4:	4606      	mov	r6, r0
 8010dc6:	d1d6      	bne.n	8010d76 <_svfiprintf_r+0x176>
 8010dc8:	89ab      	ldrh	r3, [r5, #12]
 8010dca:	065b      	lsls	r3, r3, #25
 8010dcc:	f53f af2c 	bmi.w	8010c28 <_svfiprintf_r+0x28>
 8010dd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010dd2:	b01d      	add	sp, #116	; 0x74
 8010dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dd8:	ab03      	add	r3, sp, #12
 8010dda:	9300      	str	r3, [sp, #0]
 8010ddc:	462a      	mov	r2, r5
 8010dde:	4b06      	ldr	r3, [pc, #24]	; (8010df8 <_svfiprintf_r+0x1f8>)
 8010de0:	a904      	add	r1, sp, #16
 8010de2:	4638      	mov	r0, r7
 8010de4:	f7fc fcde 	bl	800d7a4 <_printf_i>
 8010de8:	e7eb      	b.n	8010dc2 <_svfiprintf_r+0x1c2>
 8010dea:	bf00      	nop
 8010dec:	0801238c 	.word	0x0801238c
 8010df0:	08012396 	.word	0x08012396
 8010df4:	0800d25d 	.word	0x0800d25d
 8010df8:	08010b49 	.word	0x08010b49
 8010dfc:	08012392 	.word	0x08012392

08010e00 <nan>:
 8010e00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010e08 <nan+0x8>
 8010e04:	4770      	bx	lr
 8010e06:	bf00      	nop
 8010e08:	00000000 	.word	0x00000000
 8010e0c:	7ff80000 	.word	0x7ff80000

08010e10 <_sbrk_r>:
 8010e10:	b538      	push	{r3, r4, r5, lr}
 8010e12:	4d06      	ldr	r5, [pc, #24]	; (8010e2c <_sbrk_r+0x1c>)
 8010e14:	2300      	movs	r3, #0
 8010e16:	4604      	mov	r4, r0
 8010e18:	4608      	mov	r0, r1
 8010e1a:	602b      	str	r3, [r5, #0]
 8010e1c:	f7f1 feb6 	bl	8002b8c <_sbrk>
 8010e20:	1c43      	adds	r3, r0, #1
 8010e22:	d102      	bne.n	8010e2a <_sbrk_r+0x1a>
 8010e24:	682b      	ldr	r3, [r5, #0]
 8010e26:	b103      	cbz	r3, 8010e2a <_sbrk_r+0x1a>
 8010e28:	6023      	str	r3, [r4, #0]
 8010e2a:	bd38      	pop	{r3, r4, r5, pc}
 8010e2c:	20000914 	.word	0x20000914

08010e30 <strncmp>:
 8010e30:	b510      	push	{r4, lr}
 8010e32:	b17a      	cbz	r2, 8010e54 <strncmp+0x24>
 8010e34:	4603      	mov	r3, r0
 8010e36:	3901      	subs	r1, #1
 8010e38:	1884      	adds	r4, r0, r2
 8010e3a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010e3e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010e42:	4290      	cmp	r0, r2
 8010e44:	d101      	bne.n	8010e4a <strncmp+0x1a>
 8010e46:	42a3      	cmp	r3, r4
 8010e48:	d101      	bne.n	8010e4e <strncmp+0x1e>
 8010e4a:	1a80      	subs	r0, r0, r2
 8010e4c:	bd10      	pop	{r4, pc}
 8010e4e:	2800      	cmp	r0, #0
 8010e50:	d1f3      	bne.n	8010e3a <strncmp+0xa>
 8010e52:	e7fa      	b.n	8010e4a <strncmp+0x1a>
 8010e54:	4610      	mov	r0, r2
 8010e56:	e7f9      	b.n	8010e4c <strncmp+0x1c>

08010e58 <__ascii_wctomb>:
 8010e58:	b149      	cbz	r1, 8010e6e <__ascii_wctomb+0x16>
 8010e5a:	2aff      	cmp	r2, #255	; 0xff
 8010e5c:	bf85      	ittet	hi
 8010e5e:	238a      	movhi	r3, #138	; 0x8a
 8010e60:	6003      	strhi	r3, [r0, #0]
 8010e62:	700a      	strbls	r2, [r1, #0]
 8010e64:	f04f 30ff 	movhi.w	r0, #4294967295
 8010e68:	bf98      	it	ls
 8010e6a:	2001      	movls	r0, #1
 8010e6c:	4770      	bx	lr
 8010e6e:	4608      	mov	r0, r1
 8010e70:	4770      	bx	lr
	...

08010e74 <__assert_func>:
 8010e74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e76:	4614      	mov	r4, r2
 8010e78:	461a      	mov	r2, r3
 8010e7a:	4b09      	ldr	r3, [pc, #36]	; (8010ea0 <__assert_func+0x2c>)
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	4605      	mov	r5, r0
 8010e80:	68d8      	ldr	r0, [r3, #12]
 8010e82:	b14c      	cbz	r4, 8010e98 <__assert_func+0x24>
 8010e84:	4b07      	ldr	r3, [pc, #28]	; (8010ea4 <__assert_func+0x30>)
 8010e86:	9100      	str	r1, [sp, #0]
 8010e88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010e8c:	4906      	ldr	r1, [pc, #24]	; (8010ea8 <__assert_func+0x34>)
 8010e8e:	462b      	mov	r3, r5
 8010e90:	f000 f80e 	bl	8010eb0 <fiprintf>
 8010e94:	f000 fa8c 	bl	80113b0 <abort>
 8010e98:	4b04      	ldr	r3, [pc, #16]	; (8010eac <__assert_func+0x38>)
 8010e9a:	461c      	mov	r4, r3
 8010e9c:	e7f3      	b.n	8010e86 <__assert_func+0x12>
 8010e9e:	bf00      	nop
 8010ea0:	200002d4 	.word	0x200002d4
 8010ea4:	0801239d 	.word	0x0801239d
 8010ea8:	080123aa 	.word	0x080123aa
 8010eac:	080123d8 	.word	0x080123d8

08010eb0 <fiprintf>:
 8010eb0:	b40e      	push	{r1, r2, r3}
 8010eb2:	b503      	push	{r0, r1, lr}
 8010eb4:	4601      	mov	r1, r0
 8010eb6:	ab03      	add	r3, sp, #12
 8010eb8:	4805      	ldr	r0, [pc, #20]	; (8010ed0 <fiprintf+0x20>)
 8010eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ebe:	6800      	ldr	r0, [r0, #0]
 8010ec0:	9301      	str	r3, [sp, #4]
 8010ec2:	f000 f885 	bl	8010fd0 <_vfiprintf_r>
 8010ec6:	b002      	add	sp, #8
 8010ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ecc:	b003      	add	sp, #12
 8010ece:	4770      	bx	lr
 8010ed0:	200002d4 	.word	0x200002d4

08010ed4 <memmove>:
 8010ed4:	4288      	cmp	r0, r1
 8010ed6:	b510      	push	{r4, lr}
 8010ed8:	eb01 0402 	add.w	r4, r1, r2
 8010edc:	d902      	bls.n	8010ee4 <memmove+0x10>
 8010ede:	4284      	cmp	r4, r0
 8010ee0:	4623      	mov	r3, r4
 8010ee2:	d807      	bhi.n	8010ef4 <memmove+0x20>
 8010ee4:	1e43      	subs	r3, r0, #1
 8010ee6:	42a1      	cmp	r1, r4
 8010ee8:	d008      	beq.n	8010efc <memmove+0x28>
 8010eea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010eee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010ef2:	e7f8      	b.n	8010ee6 <memmove+0x12>
 8010ef4:	4402      	add	r2, r0
 8010ef6:	4601      	mov	r1, r0
 8010ef8:	428a      	cmp	r2, r1
 8010efa:	d100      	bne.n	8010efe <memmove+0x2a>
 8010efc:	bd10      	pop	{r4, pc}
 8010efe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010f02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010f06:	e7f7      	b.n	8010ef8 <memmove+0x24>

08010f08 <__malloc_lock>:
 8010f08:	4801      	ldr	r0, [pc, #4]	; (8010f10 <__malloc_lock+0x8>)
 8010f0a:	f000 bc11 	b.w	8011730 <__retarget_lock_acquire_recursive>
 8010f0e:	bf00      	nop
 8010f10:	20000918 	.word	0x20000918

08010f14 <__malloc_unlock>:
 8010f14:	4801      	ldr	r0, [pc, #4]	; (8010f1c <__malloc_unlock+0x8>)
 8010f16:	f000 bc0c 	b.w	8011732 <__retarget_lock_release_recursive>
 8010f1a:	bf00      	nop
 8010f1c:	20000918 	.word	0x20000918

08010f20 <_realloc_r>:
 8010f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f24:	4680      	mov	r8, r0
 8010f26:	4614      	mov	r4, r2
 8010f28:	460e      	mov	r6, r1
 8010f2a:	b921      	cbnz	r1, 8010f36 <_realloc_r+0x16>
 8010f2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f30:	4611      	mov	r1, r2
 8010f32:	f7ff bd95 	b.w	8010a60 <_malloc_r>
 8010f36:	b92a      	cbnz	r2, 8010f44 <_realloc_r+0x24>
 8010f38:	f7ff fd26 	bl	8010988 <_free_r>
 8010f3c:	4625      	mov	r5, r4
 8010f3e:	4628      	mov	r0, r5
 8010f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f44:	f000 fc5c 	bl	8011800 <_malloc_usable_size_r>
 8010f48:	4284      	cmp	r4, r0
 8010f4a:	4607      	mov	r7, r0
 8010f4c:	d802      	bhi.n	8010f54 <_realloc_r+0x34>
 8010f4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010f52:	d812      	bhi.n	8010f7a <_realloc_r+0x5a>
 8010f54:	4621      	mov	r1, r4
 8010f56:	4640      	mov	r0, r8
 8010f58:	f7ff fd82 	bl	8010a60 <_malloc_r>
 8010f5c:	4605      	mov	r5, r0
 8010f5e:	2800      	cmp	r0, #0
 8010f60:	d0ed      	beq.n	8010f3e <_realloc_r+0x1e>
 8010f62:	42bc      	cmp	r4, r7
 8010f64:	4622      	mov	r2, r4
 8010f66:	4631      	mov	r1, r6
 8010f68:	bf28      	it	cs
 8010f6a:	463a      	movcs	r2, r7
 8010f6c:	f7fc f8c0 	bl	800d0f0 <memcpy>
 8010f70:	4631      	mov	r1, r6
 8010f72:	4640      	mov	r0, r8
 8010f74:	f7ff fd08 	bl	8010988 <_free_r>
 8010f78:	e7e1      	b.n	8010f3e <_realloc_r+0x1e>
 8010f7a:	4635      	mov	r5, r6
 8010f7c:	e7df      	b.n	8010f3e <_realloc_r+0x1e>

08010f7e <__sfputc_r>:
 8010f7e:	6893      	ldr	r3, [r2, #8]
 8010f80:	3b01      	subs	r3, #1
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	b410      	push	{r4}
 8010f86:	6093      	str	r3, [r2, #8]
 8010f88:	da08      	bge.n	8010f9c <__sfputc_r+0x1e>
 8010f8a:	6994      	ldr	r4, [r2, #24]
 8010f8c:	42a3      	cmp	r3, r4
 8010f8e:	db01      	blt.n	8010f94 <__sfputc_r+0x16>
 8010f90:	290a      	cmp	r1, #10
 8010f92:	d103      	bne.n	8010f9c <__sfputc_r+0x1e>
 8010f94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f98:	f000 b94a 	b.w	8011230 <__swbuf_r>
 8010f9c:	6813      	ldr	r3, [r2, #0]
 8010f9e:	1c58      	adds	r0, r3, #1
 8010fa0:	6010      	str	r0, [r2, #0]
 8010fa2:	7019      	strb	r1, [r3, #0]
 8010fa4:	4608      	mov	r0, r1
 8010fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010faa:	4770      	bx	lr

08010fac <__sfputs_r>:
 8010fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fae:	4606      	mov	r6, r0
 8010fb0:	460f      	mov	r7, r1
 8010fb2:	4614      	mov	r4, r2
 8010fb4:	18d5      	adds	r5, r2, r3
 8010fb6:	42ac      	cmp	r4, r5
 8010fb8:	d101      	bne.n	8010fbe <__sfputs_r+0x12>
 8010fba:	2000      	movs	r0, #0
 8010fbc:	e007      	b.n	8010fce <__sfputs_r+0x22>
 8010fbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fc2:	463a      	mov	r2, r7
 8010fc4:	4630      	mov	r0, r6
 8010fc6:	f7ff ffda 	bl	8010f7e <__sfputc_r>
 8010fca:	1c43      	adds	r3, r0, #1
 8010fcc:	d1f3      	bne.n	8010fb6 <__sfputs_r+0xa>
 8010fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010fd0 <_vfiprintf_r>:
 8010fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fd4:	460d      	mov	r5, r1
 8010fd6:	b09d      	sub	sp, #116	; 0x74
 8010fd8:	4614      	mov	r4, r2
 8010fda:	4698      	mov	r8, r3
 8010fdc:	4606      	mov	r6, r0
 8010fde:	b118      	cbz	r0, 8010fe8 <_vfiprintf_r+0x18>
 8010fe0:	6983      	ldr	r3, [r0, #24]
 8010fe2:	b90b      	cbnz	r3, 8010fe8 <_vfiprintf_r+0x18>
 8010fe4:	f000 fb06 	bl	80115f4 <__sinit>
 8010fe8:	4b89      	ldr	r3, [pc, #548]	; (8011210 <_vfiprintf_r+0x240>)
 8010fea:	429d      	cmp	r5, r3
 8010fec:	d11b      	bne.n	8011026 <_vfiprintf_r+0x56>
 8010fee:	6875      	ldr	r5, [r6, #4]
 8010ff0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ff2:	07d9      	lsls	r1, r3, #31
 8010ff4:	d405      	bmi.n	8011002 <_vfiprintf_r+0x32>
 8010ff6:	89ab      	ldrh	r3, [r5, #12]
 8010ff8:	059a      	lsls	r2, r3, #22
 8010ffa:	d402      	bmi.n	8011002 <_vfiprintf_r+0x32>
 8010ffc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ffe:	f000 fb97 	bl	8011730 <__retarget_lock_acquire_recursive>
 8011002:	89ab      	ldrh	r3, [r5, #12]
 8011004:	071b      	lsls	r3, r3, #28
 8011006:	d501      	bpl.n	801100c <_vfiprintf_r+0x3c>
 8011008:	692b      	ldr	r3, [r5, #16]
 801100a:	b9eb      	cbnz	r3, 8011048 <_vfiprintf_r+0x78>
 801100c:	4629      	mov	r1, r5
 801100e:	4630      	mov	r0, r6
 8011010:	f000 f960 	bl	80112d4 <__swsetup_r>
 8011014:	b1c0      	cbz	r0, 8011048 <_vfiprintf_r+0x78>
 8011016:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011018:	07dc      	lsls	r4, r3, #31
 801101a:	d50e      	bpl.n	801103a <_vfiprintf_r+0x6a>
 801101c:	f04f 30ff 	mov.w	r0, #4294967295
 8011020:	b01d      	add	sp, #116	; 0x74
 8011022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011026:	4b7b      	ldr	r3, [pc, #492]	; (8011214 <_vfiprintf_r+0x244>)
 8011028:	429d      	cmp	r5, r3
 801102a:	d101      	bne.n	8011030 <_vfiprintf_r+0x60>
 801102c:	68b5      	ldr	r5, [r6, #8]
 801102e:	e7df      	b.n	8010ff0 <_vfiprintf_r+0x20>
 8011030:	4b79      	ldr	r3, [pc, #484]	; (8011218 <_vfiprintf_r+0x248>)
 8011032:	429d      	cmp	r5, r3
 8011034:	bf08      	it	eq
 8011036:	68f5      	ldreq	r5, [r6, #12]
 8011038:	e7da      	b.n	8010ff0 <_vfiprintf_r+0x20>
 801103a:	89ab      	ldrh	r3, [r5, #12]
 801103c:	0598      	lsls	r0, r3, #22
 801103e:	d4ed      	bmi.n	801101c <_vfiprintf_r+0x4c>
 8011040:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011042:	f000 fb76 	bl	8011732 <__retarget_lock_release_recursive>
 8011046:	e7e9      	b.n	801101c <_vfiprintf_r+0x4c>
 8011048:	2300      	movs	r3, #0
 801104a:	9309      	str	r3, [sp, #36]	; 0x24
 801104c:	2320      	movs	r3, #32
 801104e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011052:	f8cd 800c 	str.w	r8, [sp, #12]
 8011056:	2330      	movs	r3, #48	; 0x30
 8011058:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801121c <_vfiprintf_r+0x24c>
 801105c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011060:	f04f 0901 	mov.w	r9, #1
 8011064:	4623      	mov	r3, r4
 8011066:	469a      	mov	sl, r3
 8011068:	f813 2b01 	ldrb.w	r2, [r3], #1
 801106c:	b10a      	cbz	r2, 8011072 <_vfiprintf_r+0xa2>
 801106e:	2a25      	cmp	r2, #37	; 0x25
 8011070:	d1f9      	bne.n	8011066 <_vfiprintf_r+0x96>
 8011072:	ebba 0b04 	subs.w	fp, sl, r4
 8011076:	d00b      	beq.n	8011090 <_vfiprintf_r+0xc0>
 8011078:	465b      	mov	r3, fp
 801107a:	4622      	mov	r2, r4
 801107c:	4629      	mov	r1, r5
 801107e:	4630      	mov	r0, r6
 8011080:	f7ff ff94 	bl	8010fac <__sfputs_r>
 8011084:	3001      	adds	r0, #1
 8011086:	f000 80aa 	beq.w	80111de <_vfiprintf_r+0x20e>
 801108a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801108c:	445a      	add	r2, fp
 801108e:	9209      	str	r2, [sp, #36]	; 0x24
 8011090:	f89a 3000 	ldrb.w	r3, [sl]
 8011094:	2b00      	cmp	r3, #0
 8011096:	f000 80a2 	beq.w	80111de <_vfiprintf_r+0x20e>
 801109a:	2300      	movs	r3, #0
 801109c:	f04f 32ff 	mov.w	r2, #4294967295
 80110a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110a4:	f10a 0a01 	add.w	sl, sl, #1
 80110a8:	9304      	str	r3, [sp, #16]
 80110aa:	9307      	str	r3, [sp, #28]
 80110ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80110b0:	931a      	str	r3, [sp, #104]	; 0x68
 80110b2:	4654      	mov	r4, sl
 80110b4:	2205      	movs	r2, #5
 80110b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110ba:	4858      	ldr	r0, [pc, #352]	; (801121c <_vfiprintf_r+0x24c>)
 80110bc:	f7ef f898 	bl	80001f0 <memchr>
 80110c0:	9a04      	ldr	r2, [sp, #16]
 80110c2:	b9d8      	cbnz	r0, 80110fc <_vfiprintf_r+0x12c>
 80110c4:	06d1      	lsls	r1, r2, #27
 80110c6:	bf44      	itt	mi
 80110c8:	2320      	movmi	r3, #32
 80110ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110ce:	0713      	lsls	r3, r2, #28
 80110d0:	bf44      	itt	mi
 80110d2:	232b      	movmi	r3, #43	; 0x2b
 80110d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110d8:	f89a 3000 	ldrb.w	r3, [sl]
 80110dc:	2b2a      	cmp	r3, #42	; 0x2a
 80110de:	d015      	beq.n	801110c <_vfiprintf_r+0x13c>
 80110e0:	9a07      	ldr	r2, [sp, #28]
 80110e2:	4654      	mov	r4, sl
 80110e4:	2000      	movs	r0, #0
 80110e6:	f04f 0c0a 	mov.w	ip, #10
 80110ea:	4621      	mov	r1, r4
 80110ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80110f0:	3b30      	subs	r3, #48	; 0x30
 80110f2:	2b09      	cmp	r3, #9
 80110f4:	d94e      	bls.n	8011194 <_vfiprintf_r+0x1c4>
 80110f6:	b1b0      	cbz	r0, 8011126 <_vfiprintf_r+0x156>
 80110f8:	9207      	str	r2, [sp, #28]
 80110fa:	e014      	b.n	8011126 <_vfiprintf_r+0x156>
 80110fc:	eba0 0308 	sub.w	r3, r0, r8
 8011100:	fa09 f303 	lsl.w	r3, r9, r3
 8011104:	4313      	orrs	r3, r2
 8011106:	9304      	str	r3, [sp, #16]
 8011108:	46a2      	mov	sl, r4
 801110a:	e7d2      	b.n	80110b2 <_vfiprintf_r+0xe2>
 801110c:	9b03      	ldr	r3, [sp, #12]
 801110e:	1d19      	adds	r1, r3, #4
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	9103      	str	r1, [sp, #12]
 8011114:	2b00      	cmp	r3, #0
 8011116:	bfbb      	ittet	lt
 8011118:	425b      	neglt	r3, r3
 801111a:	f042 0202 	orrlt.w	r2, r2, #2
 801111e:	9307      	strge	r3, [sp, #28]
 8011120:	9307      	strlt	r3, [sp, #28]
 8011122:	bfb8      	it	lt
 8011124:	9204      	strlt	r2, [sp, #16]
 8011126:	7823      	ldrb	r3, [r4, #0]
 8011128:	2b2e      	cmp	r3, #46	; 0x2e
 801112a:	d10c      	bne.n	8011146 <_vfiprintf_r+0x176>
 801112c:	7863      	ldrb	r3, [r4, #1]
 801112e:	2b2a      	cmp	r3, #42	; 0x2a
 8011130:	d135      	bne.n	801119e <_vfiprintf_r+0x1ce>
 8011132:	9b03      	ldr	r3, [sp, #12]
 8011134:	1d1a      	adds	r2, r3, #4
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	9203      	str	r2, [sp, #12]
 801113a:	2b00      	cmp	r3, #0
 801113c:	bfb8      	it	lt
 801113e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011142:	3402      	adds	r4, #2
 8011144:	9305      	str	r3, [sp, #20]
 8011146:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801122c <_vfiprintf_r+0x25c>
 801114a:	7821      	ldrb	r1, [r4, #0]
 801114c:	2203      	movs	r2, #3
 801114e:	4650      	mov	r0, sl
 8011150:	f7ef f84e 	bl	80001f0 <memchr>
 8011154:	b140      	cbz	r0, 8011168 <_vfiprintf_r+0x198>
 8011156:	2340      	movs	r3, #64	; 0x40
 8011158:	eba0 000a 	sub.w	r0, r0, sl
 801115c:	fa03 f000 	lsl.w	r0, r3, r0
 8011160:	9b04      	ldr	r3, [sp, #16]
 8011162:	4303      	orrs	r3, r0
 8011164:	3401      	adds	r4, #1
 8011166:	9304      	str	r3, [sp, #16]
 8011168:	f814 1b01 	ldrb.w	r1, [r4], #1
 801116c:	482c      	ldr	r0, [pc, #176]	; (8011220 <_vfiprintf_r+0x250>)
 801116e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011172:	2206      	movs	r2, #6
 8011174:	f7ef f83c 	bl	80001f0 <memchr>
 8011178:	2800      	cmp	r0, #0
 801117a:	d03f      	beq.n	80111fc <_vfiprintf_r+0x22c>
 801117c:	4b29      	ldr	r3, [pc, #164]	; (8011224 <_vfiprintf_r+0x254>)
 801117e:	bb1b      	cbnz	r3, 80111c8 <_vfiprintf_r+0x1f8>
 8011180:	9b03      	ldr	r3, [sp, #12]
 8011182:	3307      	adds	r3, #7
 8011184:	f023 0307 	bic.w	r3, r3, #7
 8011188:	3308      	adds	r3, #8
 801118a:	9303      	str	r3, [sp, #12]
 801118c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801118e:	443b      	add	r3, r7
 8011190:	9309      	str	r3, [sp, #36]	; 0x24
 8011192:	e767      	b.n	8011064 <_vfiprintf_r+0x94>
 8011194:	fb0c 3202 	mla	r2, ip, r2, r3
 8011198:	460c      	mov	r4, r1
 801119a:	2001      	movs	r0, #1
 801119c:	e7a5      	b.n	80110ea <_vfiprintf_r+0x11a>
 801119e:	2300      	movs	r3, #0
 80111a0:	3401      	adds	r4, #1
 80111a2:	9305      	str	r3, [sp, #20]
 80111a4:	4619      	mov	r1, r3
 80111a6:	f04f 0c0a 	mov.w	ip, #10
 80111aa:	4620      	mov	r0, r4
 80111ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111b0:	3a30      	subs	r2, #48	; 0x30
 80111b2:	2a09      	cmp	r2, #9
 80111b4:	d903      	bls.n	80111be <_vfiprintf_r+0x1ee>
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d0c5      	beq.n	8011146 <_vfiprintf_r+0x176>
 80111ba:	9105      	str	r1, [sp, #20]
 80111bc:	e7c3      	b.n	8011146 <_vfiprintf_r+0x176>
 80111be:	fb0c 2101 	mla	r1, ip, r1, r2
 80111c2:	4604      	mov	r4, r0
 80111c4:	2301      	movs	r3, #1
 80111c6:	e7f0      	b.n	80111aa <_vfiprintf_r+0x1da>
 80111c8:	ab03      	add	r3, sp, #12
 80111ca:	9300      	str	r3, [sp, #0]
 80111cc:	462a      	mov	r2, r5
 80111ce:	4b16      	ldr	r3, [pc, #88]	; (8011228 <_vfiprintf_r+0x258>)
 80111d0:	a904      	add	r1, sp, #16
 80111d2:	4630      	mov	r0, r6
 80111d4:	f7fc f842 	bl	800d25c <_printf_float>
 80111d8:	4607      	mov	r7, r0
 80111da:	1c78      	adds	r0, r7, #1
 80111dc:	d1d6      	bne.n	801118c <_vfiprintf_r+0x1bc>
 80111de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80111e0:	07d9      	lsls	r1, r3, #31
 80111e2:	d405      	bmi.n	80111f0 <_vfiprintf_r+0x220>
 80111e4:	89ab      	ldrh	r3, [r5, #12]
 80111e6:	059a      	lsls	r2, r3, #22
 80111e8:	d402      	bmi.n	80111f0 <_vfiprintf_r+0x220>
 80111ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111ec:	f000 faa1 	bl	8011732 <__retarget_lock_release_recursive>
 80111f0:	89ab      	ldrh	r3, [r5, #12]
 80111f2:	065b      	lsls	r3, r3, #25
 80111f4:	f53f af12 	bmi.w	801101c <_vfiprintf_r+0x4c>
 80111f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80111fa:	e711      	b.n	8011020 <_vfiprintf_r+0x50>
 80111fc:	ab03      	add	r3, sp, #12
 80111fe:	9300      	str	r3, [sp, #0]
 8011200:	462a      	mov	r2, r5
 8011202:	4b09      	ldr	r3, [pc, #36]	; (8011228 <_vfiprintf_r+0x258>)
 8011204:	a904      	add	r1, sp, #16
 8011206:	4630      	mov	r0, r6
 8011208:	f7fc facc 	bl	800d7a4 <_printf_i>
 801120c:	e7e4      	b.n	80111d8 <_vfiprintf_r+0x208>
 801120e:	bf00      	nop
 8011210:	080123fc 	.word	0x080123fc
 8011214:	0801241c 	.word	0x0801241c
 8011218:	080123dc 	.word	0x080123dc
 801121c:	0801238c 	.word	0x0801238c
 8011220:	08012396 	.word	0x08012396
 8011224:	0800d25d 	.word	0x0800d25d
 8011228:	08010fad 	.word	0x08010fad
 801122c:	08012392 	.word	0x08012392

08011230 <__swbuf_r>:
 8011230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011232:	460e      	mov	r6, r1
 8011234:	4614      	mov	r4, r2
 8011236:	4605      	mov	r5, r0
 8011238:	b118      	cbz	r0, 8011242 <__swbuf_r+0x12>
 801123a:	6983      	ldr	r3, [r0, #24]
 801123c:	b90b      	cbnz	r3, 8011242 <__swbuf_r+0x12>
 801123e:	f000 f9d9 	bl	80115f4 <__sinit>
 8011242:	4b21      	ldr	r3, [pc, #132]	; (80112c8 <__swbuf_r+0x98>)
 8011244:	429c      	cmp	r4, r3
 8011246:	d12b      	bne.n	80112a0 <__swbuf_r+0x70>
 8011248:	686c      	ldr	r4, [r5, #4]
 801124a:	69a3      	ldr	r3, [r4, #24]
 801124c:	60a3      	str	r3, [r4, #8]
 801124e:	89a3      	ldrh	r3, [r4, #12]
 8011250:	071a      	lsls	r2, r3, #28
 8011252:	d52f      	bpl.n	80112b4 <__swbuf_r+0x84>
 8011254:	6923      	ldr	r3, [r4, #16]
 8011256:	b36b      	cbz	r3, 80112b4 <__swbuf_r+0x84>
 8011258:	6923      	ldr	r3, [r4, #16]
 801125a:	6820      	ldr	r0, [r4, #0]
 801125c:	1ac0      	subs	r0, r0, r3
 801125e:	6963      	ldr	r3, [r4, #20]
 8011260:	b2f6      	uxtb	r6, r6
 8011262:	4283      	cmp	r3, r0
 8011264:	4637      	mov	r7, r6
 8011266:	dc04      	bgt.n	8011272 <__swbuf_r+0x42>
 8011268:	4621      	mov	r1, r4
 801126a:	4628      	mov	r0, r5
 801126c:	f000 f92e 	bl	80114cc <_fflush_r>
 8011270:	bb30      	cbnz	r0, 80112c0 <__swbuf_r+0x90>
 8011272:	68a3      	ldr	r3, [r4, #8]
 8011274:	3b01      	subs	r3, #1
 8011276:	60a3      	str	r3, [r4, #8]
 8011278:	6823      	ldr	r3, [r4, #0]
 801127a:	1c5a      	adds	r2, r3, #1
 801127c:	6022      	str	r2, [r4, #0]
 801127e:	701e      	strb	r6, [r3, #0]
 8011280:	6963      	ldr	r3, [r4, #20]
 8011282:	3001      	adds	r0, #1
 8011284:	4283      	cmp	r3, r0
 8011286:	d004      	beq.n	8011292 <__swbuf_r+0x62>
 8011288:	89a3      	ldrh	r3, [r4, #12]
 801128a:	07db      	lsls	r3, r3, #31
 801128c:	d506      	bpl.n	801129c <__swbuf_r+0x6c>
 801128e:	2e0a      	cmp	r6, #10
 8011290:	d104      	bne.n	801129c <__swbuf_r+0x6c>
 8011292:	4621      	mov	r1, r4
 8011294:	4628      	mov	r0, r5
 8011296:	f000 f919 	bl	80114cc <_fflush_r>
 801129a:	b988      	cbnz	r0, 80112c0 <__swbuf_r+0x90>
 801129c:	4638      	mov	r0, r7
 801129e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112a0:	4b0a      	ldr	r3, [pc, #40]	; (80112cc <__swbuf_r+0x9c>)
 80112a2:	429c      	cmp	r4, r3
 80112a4:	d101      	bne.n	80112aa <__swbuf_r+0x7a>
 80112a6:	68ac      	ldr	r4, [r5, #8]
 80112a8:	e7cf      	b.n	801124a <__swbuf_r+0x1a>
 80112aa:	4b09      	ldr	r3, [pc, #36]	; (80112d0 <__swbuf_r+0xa0>)
 80112ac:	429c      	cmp	r4, r3
 80112ae:	bf08      	it	eq
 80112b0:	68ec      	ldreq	r4, [r5, #12]
 80112b2:	e7ca      	b.n	801124a <__swbuf_r+0x1a>
 80112b4:	4621      	mov	r1, r4
 80112b6:	4628      	mov	r0, r5
 80112b8:	f000 f80c 	bl	80112d4 <__swsetup_r>
 80112bc:	2800      	cmp	r0, #0
 80112be:	d0cb      	beq.n	8011258 <__swbuf_r+0x28>
 80112c0:	f04f 37ff 	mov.w	r7, #4294967295
 80112c4:	e7ea      	b.n	801129c <__swbuf_r+0x6c>
 80112c6:	bf00      	nop
 80112c8:	080123fc 	.word	0x080123fc
 80112cc:	0801241c 	.word	0x0801241c
 80112d0:	080123dc 	.word	0x080123dc

080112d4 <__swsetup_r>:
 80112d4:	4b32      	ldr	r3, [pc, #200]	; (80113a0 <__swsetup_r+0xcc>)
 80112d6:	b570      	push	{r4, r5, r6, lr}
 80112d8:	681d      	ldr	r5, [r3, #0]
 80112da:	4606      	mov	r6, r0
 80112dc:	460c      	mov	r4, r1
 80112de:	b125      	cbz	r5, 80112ea <__swsetup_r+0x16>
 80112e0:	69ab      	ldr	r3, [r5, #24]
 80112e2:	b913      	cbnz	r3, 80112ea <__swsetup_r+0x16>
 80112e4:	4628      	mov	r0, r5
 80112e6:	f000 f985 	bl	80115f4 <__sinit>
 80112ea:	4b2e      	ldr	r3, [pc, #184]	; (80113a4 <__swsetup_r+0xd0>)
 80112ec:	429c      	cmp	r4, r3
 80112ee:	d10f      	bne.n	8011310 <__swsetup_r+0x3c>
 80112f0:	686c      	ldr	r4, [r5, #4]
 80112f2:	89a3      	ldrh	r3, [r4, #12]
 80112f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80112f8:	0719      	lsls	r1, r3, #28
 80112fa:	d42c      	bmi.n	8011356 <__swsetup_r+0x82>
 80112fc:	06dd      	lsls	r5, r3, #27
 80112fe:	d411      	bmi.n	8011324 <__swsetup_r+0x50>
 8011300:	2309      	movs	r3, #9
 8011302:	6033      	str	r3, [r6, #0]
 8011304:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011308:	81a3      	strh	r3, [r4, #12]
 801130a:	f04f 30ff 	mov.w	r0, #4294967295
 801130e:	e03e      	b.n	801138e <__swsetup_r+0xba>
 8011310:	4b25      	ldr	r3, [pc, #148]	; (80113a8 <__swsetup_r+0xd4>)
 8011312:	429c      	cmp	r4, r3
 8011314:	d101      	bne.n	801131a <__swsetup_r+0x46>
 8011316:	68ac      	ldr	r4, [r5, #8]
 8011318:	e7eb      	b.n	80112f2 <__swsetup_r+0x1e>
 801131a:	4b24      	ldr	r3, [pc, #144]	; (80113ac <__swsetup_r+0xd8>)
 801131c:	429c      	cmp	r4, r3
 801131e:	bf08      	it	eq
 8011320:	68ec      	ldreq	r4, [r5, #12]
 8011322:	e7e6      	b.n	80112f2 <__swsetup_r+0x1e>
 8011324:	0758      	lsls	r0, r3, #29
 8011326:	d512      	bpl.n	801134e <__swsetup_r+0x7a>
 8011328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801132a:	b141      	cbz	r1, 801133e <__swsetup_r+0x6a>
 801132c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011330:	4299      	cmp	r1, r3
 8011332:	d002      	beq.n	801133a <__swsetup_r+0x66>
 8011334:	4630      	mov	r0, r6
 8011336:	f7ff fb27 	bl	8010988 <_free_r>
 801133a:	2300      	movs	r3, #0
 801133c:	6363      	str	r3, [r4, #52]	; 0x34
 801133e:	89a3      	ldrh	r3, [r4, #12]
 8011340:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011344:	81a3      	strh	r3, [r4, #12]
 8011346:	2300      	movs	r3, #0
 8011348:	6063      	str	r3, [r4, #4]
 801134a:	6923      	ldr	r3, [r4, #16]
 801134c:	6023      	str	r3, [r4, #0]
 801134e:	89a3      	ldrh	r3, [r4, #12]
 8011350:	f043 0308 	orr.w	r3, r3, #8
 8011354:	81a3      	strh	r3, [r4, #12]
 8011356:	6923      	ldr	r3, [r4, #16]
 8011358:	b94b      	cbnz	r3, 801136e <__swsetup_r+0x9a>
 801135a:	89a3      	ldrh	r3, [r4, #12]
 801135c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011364:	d003      	beq.n	801136e <__swsetup_r+0x9a>
 8011366:	4621      	mov	r1, r4
 8011368:	4630      	mov	r0, r6
 801136a:	f000 fa09 	bl	8011780 <__smakebuf_r>
 801136e:	89a0      	ldrh	r0, [r4, #12]
 8011370:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011374:	f010 0301 	ands.w	r3, r0, #1
 8011378:	d00a      	beq.n	8011390 <__swsetup_r+0xbc>
 801137a:	2300      	movs	r3, #0
 801137c:	60a3      	str	r3, [r4, #8]
 801137e:	6963      	ldr	r3, [r4, #20]
 8011380:	425b      	negs	r3, r3
 8011382:	61a3      	str	r3, [r4, #24]
 8011384:	6923      	ldr	r3, [r4, #16]
 8011386:	b943      	cbnz	r3, 801139a <__swsetup_r+0xc6>
 8011388:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801138c:	d1ba      	bne.n	8011304 <__swsetup_r+0x30>
 801138e:	bd70      	pop	{r4, r5, r6, pc}
 8011390:	0781      	lsls	r1, r0, #30
 8011392:	bf58      	it	pl
 8011394:	6963      	ldrpl	r3, [r4, #20]
 8011396:	60a3      	str	r3, [r4, #8]
 8011398:	e7f4      	b.n	8011384 <__swsetup_r+0xb0>
 801139a:	2000      	movs	r0, #0
 801139c:	e7f7      	b.n	801138e <__swsetup_r+0xba>
 801139e:	bf00      	nop
 80113a0:	200002d4 	.word	0x200002d4
 80113a4:	080123fc 	.word	0x080123fc
 80113a8:	0801241c 	.word	0x0801241c
 80113ac:	080123dc 	.word	0x080123dc

080113b0 <abort>:
 80113b0:	b508      	push	{r3, lr}
 80113b2:	2006      	movs	r0, #6
 80113b4:	f000 fa54 	bl	8011860 <raise>
 80113b8:	2001      	movs	r0, #1
 80113ba:	f7f1 fb6f 	bl	8002a9c <_exit>
	...

080113c0 <__sflush_r>:
 80113c0:	898a      	ldrh	r2, [r1, #12]
 80113c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113c6:	4605      	mov	r5, r0
 80113c8:	0710      	lsls	r0, r2, #28
 80113ca:	460c      	mov	r4, r1
 80113cc:	d458      	bmi.n	8011480 <__sflush_r+0xc0>
 80113ce:	684b      	ldr	r3, [r1, #4]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	dc05      	bgt.n	80113e0 <__sflush_r+0x20>
 80113d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	dc02      	bgt.n	80113e0 <__sflush_r+0x20>
 80113da:	2000      	movs	r0, #0
 80113dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80113e2:	2e00      	cmp	r6, #0
 80113e4:	d0f9      	beq.n	80113da <__sflush_r+0x1a>
 80113e6:	2300      	movs	r3, #0
 80113e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80113ec:	682f      	ldr	r7, [r5, #0]
 80113ee:	602b      	str	r3, [r5, #0]
 80113f0:	d032      	beq.n	8011458 <__sflush_r+0x98>
 80113f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80113f4:	89a3      	ldrh	r3, [r4, #12]
 80113f6:	075a      	lsls	r2, r3, #29
 80113f8:	d505      	bpl.n	8011406 <__sflush_r+0x46>
 80113fa:	6863      	ldr	r3, [r4, #4]
 80113fc:	1ac0      	subs	r0, r0, r3
 80113fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011400:	b10b      	cbz	r3, 8011406 <__sflush_r+0x46>
 8011402:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011404:	1ac0      	subs	r0, r0, r3
 8011406:	2300      	movs	r3, #0
 8011408:	4602      	mov	r2, r0
 801140a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801140c:	6a21      	ldr	r1, [r4, #32]
 801140e:	4628      	mov	r0, r5
 8011410:	47b0      	blx	r6
 8011412:	1c43      	adds	r3, r0, #1
 8011414:	89a3      	ldrh	r3, [r4, #12]
 8011416:	d106      	bne.n	8011426 <__sflush_r+0x66>
 8011418:	6829      	ldr	r1, [r5, #0]
 801141a:	291d      	cmp	r1, #29
 801141c:	d82c      	bhi.n	8011478 <__sflush_r+0xb8>
 801141e:	4a2a      	ldr	r2, [pc, #168]	; (80114c8 <__sflush_r+0x108>)
 8011420:	40ca      	lsrs	r2, r1
 8011422:	07d6      	lsls	r6, r2, #31
 8011424:	d528      	bpl.n	8011478 <__sflush_r+0xb8>
 8011426:	2200      	movs	r2, #0
 8011428:	6062      	str	r2, [r4, #4]
 801142a:	04d9      	lsls	r1, r3, #19
 801142c:	6922      	ldr	r2, [r4, #16]
 801142e:	6022      	str	r2, [r4, #0]
 8011430:	d504      	bpl.n	801143c <__sflush_r+0x7c>
 8011432:	1c42      	adds	r2, r0, #1
 8011434:	d101      	bne.n	801143a <__sflush_r+0x7a>
 8011436:	682b      	ldr	r3, [r5, #0]
 8011438:	b903      	cbnz	r3, 801143c <__sflush_r+0x7c>
 801143a:	6560      	str	r0, [r4, #84]	; 0x54
 801143c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801143e:	602f      	str	r7, [r5, #0]
 8011440:	2900      	cmp	r1, #0
 8011442:	d0ca      	beq.n	80113da <__sflush_r+0x1a>
 8011444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011448:	4299      	cmp	r1, r3
 801144a:	d002      	beq.n	8011452 <__sflush_r+0x92>
 801144c:	4628      	mov	r0, r5
 801144e:	f7ff fa9b 	bl	8010988 <_free_r>
 8011452:	2000      	movs	r0, #0
 8011454:	6360      	str	r0, [r4, #52]	; 0x34
 8011456:	e7c1      	b.n	80113dc <__sflush_r+0x1c>
 8011458:	6a21      	ldr	r1, [r4, #32]
 801145a:	2301      	movs	r3, #1
 801145c:	4628      	mov	r0, r5
 801145e:	47b0      	blx	r6
 8011460:	1c41      	adds	r1, r0, #1
 8011462:	d1c7      	bne.n	80113f4 <__sflush_r+0x34>
 8011464:	682b      	ldr	r3, [r5, #0]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d0c4      	beq.n	80113f4 <__sflush_r+0x34>
 801146a:	2b1d      	cmp	r3, #29
 801146c:	d001      	beq.n	8011472 <__sflush_r+0xb2>
 801146e:	2b16      	cmp	r3, #22
 8011470:	d101      	bne.n	8011476 <__sflush_r+0xb6>
 8011472:	602f      	str	r7, [r5, #0]
 8011474:	e7b1      	b.n	80113da <__sflush_r+0x1a>
 8011476:	89a3      	ldrh	r3, [r4, #12]
 8011478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801147c:	81a3      	strh	r3, [r4, #12]
 801147e:	e7ad      	b.n	80113dc <__sflush_r+0x1c>
 8011480:	690f      	ldr	r7, [r1, #16]
 8011482:	2f00      	cmp	r7, #0
 8011484:	d0a9      	beq.n	80113da <__sflush_r+0x1a>
 8011486:	0793      	lsls	r3, r2, #30
 8011488:	680e      	ldr	r6, [r1, #0]
 801148a:	bf08      	it	eq
 801148c:	694b      	ldreq	r3, [r1, #20]
 801148e:	600f      	str	r7, [r1, #0]
 8011490:	bf18      	it	ne
 8011492:	2300      	movne	r3, #0
 8011494:	eba6 0807 	sub.w	r8, r6, r7
 8011498:	608b      	str	r3, [r1, #8]
 801149a:	f1b8 0f00 	cmp.w	r8, #0
 801149e:	dd9c      	ble.n	80113da <__sflush_r+0x1a>
 80114a0:	6a21      	ldr	r1, [r4, #32]
 80114a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80114a4:	4643      	mov	r3, r8
 80114a6:	463a      	mov	r2, r7
 80114a8:	4628      	mov	r0, r5
 80114aa:	47b0      	blx	r6
 80114ac:	2800      	cmp	r0, #0
 80114ae:	dc06      	bgt.n	80114be <__sflush_r+0xfe>
 80114b0:	89a3      	ldrh	r3, [r4, #12]
 80114b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114b6:	81a3      	strh	r3, [r4, #12]
 80114b8:	f04f 30ff 	mov.w	r0, #4294967295
 80114bc:	e78e      	b.n	80113dc <__sflush_r+0x1c>
 80114be:	4407      	add	r7, r0
 80114c0:	eba8 0800 	sub.w	r8, r8, r0
 80114c4:	e7e9      	b.n	801149a <__sflush_r+0xda>
 80114c6:	bf00      	nop
 80114c8:	20400001 	.word	0x20400001

080114cc <_fflush_r>:
 80114cc:	b538      	push	{r3, r4, r5, lr}
 80114ce:	690b      	ldr	r3, [r1, #16]
 80114d0:	4605      	mov	r5, r0
 80114d2:	460c      	mov	r4, r1
 80114d4:	b913      	cbnz	r3, 80114dc <_fflush_r+0x10>
 80114d6:	2500      	movs	r5, #0
 80114d8:	4628      	mov	r0, r5
 80114da:	bd38      	pop	{r3, r4, r5, pc}
 80114dc:	b118      	cbz	r0, 80114e6 <_fflush_r+0x1a>
 80114de:	6983      	ldr	r3, [r0, #24]
 80114e0:	b90b      	cbnz	r3, 80114e6 <_fflush_r+0x1a>
 80114e2:	f000 f887 	bl	80115f4 <__sinit>
 80114e6:	4b14      	ldr	r3, [pc, #80]	; (8011538 <_fflush_r+0x6c>)
 80114e8:	429c      	cmp	r4, r3
 80114ea:	d11b      	bne.n	8011524 <_fflush_r+0x58>
 80114ec:	686c      	ldr	r4, [r5, #4]
 80114ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d0ef      	beq.n	80114d6 <_fflush_r+0xa>
 80114f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80114f8:	07d0      	lsls	r0, r2, #31
 80114fa:	d404      	bmi.n	8011506 <_fflush_r+0x3a>
 80114fc:	0599      	lsls	r1, r3, #22
 80114fe:	d402      	bmi.n	8011506 <_fflush_r+0x3a>
 8011500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011502:	f000 f915 	bl	8011730 <__retarget_lock_acquire_recursive>
 8011506:	4628      	mov	r0, r5
 8011508:	4621      	mov	r1, r4
 801150a:	f7ff ff59 	bl	80113c0 <__sflush_r>
 801150e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011510:	07da      	lsls	r2, r3, #31
 8011512:	4605      	mov	r5, r0
 8011514:	d4e0      	bmi.n	80114d8 <_fflush_r+0xc>
 8011516:	89a3      	ldrh	r3, [r4, #12]
 8011518:	059b      	lsls	r3, r3, #22
 801151a:	d4dd      	bmi.n	80114d8 <_fflush_r+0xc>
 801151c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801151e:	f000 f908 	bl	8011732 <__retarget_lock_release_recursive>
 8011522:	e7d9      	b.n	80114d8 <_fflush_r+0xc>
 8011524:	4b05      	ldr	r3, [pc, #20]	; (801153c <_fflush_r+0x70>)
 8011526:	429c      	cmp	r4, r3
 8011528:	d101      	bne.n	801152e <_fflush_r+0x62>
 801152a:	68ac      	ldr	r4, [r5, #8]
 801152c:	e7df      	b.n	80114ee <_fflush_r+0x22>
 801152e:	4b04      	ldr	r3, [pc, #16]	; (8011540 <_fflush_r+0x74>)
 8011530:	429c      	cmp	r4, r3
 8011532:	bf08      	it	eq
 8011534:	68ec      	ldreq	r4, [r5, #12]
 8011536:	e7da      	b.n	80114ee <_fflush_r+0x22>
 8011538:	080123fc 	.word	0x080123fc
 801153c:	0801241c 	.word	0x0801241c
 8011540:	080123dc 	.word	0x080123dc

08011544 <std>:
 8011544:	2300      	movs	r3, #0
 8011546:	b510      	push	{r4, lr}
 8011548:	4604      	mov	r4, r0
 801154a:	e9c0 3300 	strd	r3, r3, [r0]
 801154e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011552:	6083      	str	r3, [r0, #8]
 8011554:	8181      	strh	r1, [r0, #12]
 8011556:	6643      	str	r3, [r0, #100]	; 0x64
 8011558:	81c2      	strh	r2, [r0, #14]
 801155a:	6183      	str	r3, [r0, #24]
 801155c:	4619      	mov	r1, r3
 801155e:	2208      	movs	r2, #8
 8011560:	305c      	adds	r0, #92	; 0x5c
 8011562:	f7fb fdd3 	bl	800d10c <memset>
 8011566:	4b05      	ldr	r3, [pc, #20]	; (801157c <std+0x38>)
 8011568:	6263      	str	r3, [r4, #36]	; 0x24
 801156a:	4b05      	ldr	r3, [pc, #20]	; (8011580 <std+0x3c>)
 801156c:	62a3      	str	r3, [r4, #40]	; 0x28
 801156e:	4b05      	ldr	r3, [pc, #20]	; (8011584 <std+0x40>)
 8011570:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011572:	4b05      	ldr	r3, [pc, #20]	; (8011588 <std+0x44>)
 8011574:	6224      	str	r4, [r4, #32]
 8011576:	6323      	str	r3, [r4, #48]	; 0x30
 8011578:	bd10      	pop	{r4, pc}
 801157a:	bf00      	nop
 801157c:	08011899 	.word	0x08011899
 8011580:	080118bb 	.word	0x080118bb
 8011584:	080118f3 	.word	0x080118f3
 8011588:	08011917 	.word	0x08011917

0801158c <_cleanup_r>:
 801158c:	4901      	ldr	r1, [pc, #4]	; (8011594 <_cleanup_r+0x8>)
 801158e:	f000 b8af 	b.w	80116f0 <_fwalk_reent>
 8011592:	bf00      	nop
 8011594:	080114cd 	.word	0x080114cd

08011598 <__sfmoreglue>:
 8011598:	b570      	push	{r4, r5, r6, lr}
 801159a:	2268      	movs	r2, #104	; 0x68
 801159c:	1e4d      	subs	r5, r1, #1
 801159e:	4355      	muls	r5, r2
 80115a0:	460e      	mov	r6, r1
 80115a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80115a6:	f7ff fa5b 	bl	8010a60 <_malloc_r>
 80115aa:	4604      	mov	r4, r0
 80115ac:	b140      	cbz	r0, 80115c0 <__sfmoreglue+0x28>
 80115ae:	2100      	movs	r1, #0
 80115b0:	e9c0 1600 	strd	r1, r6, [r0]
 80115b4:	300c      	adds	r0, #12
 80115b6:	60a0      	str	r0, [r4, #8]
 80115b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80115bc:	f7fb fda6 	bl	800d10c <memset>
 80115c0:	4620      	mov	r0, r4
 80115c2:	bd70      	pop	{r4, r5, r6, pc}

080115c4 <__sfp_lock_acquire>:
 80115c4:	4801      	ldr	r0, [pc, #4]	; (80115cc <__sfp_lock_acquire+0x8>)
 80115c6:	f000 b8b3 	b.w	8011730 <__retarget_lock_acquire_recursive>
 80115ca:	bf00      	nop
 80115cc:	20000919 	.word	0x20000919

080115d0 <__sfp_lock_release>:
 80115d0:	4801      	ldr	r0, [pc, #4]	; (80115d8 <__sfp_lock_release+0x8>)
 80115d2:	f000 b8ae 	b.w	8011732 <__retarget_lock_release_recursive>
 80115d6:	bf00      	nop
 80115d8:	20000919 	.word	0x20000919

080115dc <__sinit_lock_acquire>:
 80115dc:	4801      	ldr	r0, [pc, #4]	; (80115e4 <__sinit_lock_acquire+0x8>)
 80115de:	f000 b8a7 	b.w	8011730 <__retarget_lock_acquire_recursive>
 80115e2:	bf00      	nop
 80115e4:	2000091a 	.word	0x2000091a

080115e8 <__sinit_lock_release>:
 80115e8:	4801      	ldr	r0, [pc, #4]	; (80115f0 <__sinit_lock_release+0x8>)
 80115ea:	f000 b8a2 	b.w	8011732 <__retarget_lock_release_recursive>
 80115ee:	bf00      	nop
 80115f0:	2000091a 	.word	0x2000091a

080115f4 <__sinit>:
 80115f4:	b510      	push	{r4, lr}
 80115f6:	4604      	mov	r4, r0
 80115f8:	f7ff fff0 	bl	80115dc <__sinit_lock_acquire>
 80115fc:	69a3      	ldr	r3, [r4, #24]
 80115fe:	b11b      	cbz	r3, 8011608 <__sinit+0x14>
 8011600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011604:	f7ff bff0 	b.w	80115e8 <__sinit_lock_release>
 8011608:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801160c:	6523      	str	r3, [r4, #80]	; 0x50
 801160e:	4b13      	ldr	r3, [pc, #76]	; (801165c <__sinit+0x68>)
 8011610:	4a13      	ldr	r2, [pc, #76]	; (8011660 <__sinit+0x6c>)
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	62a2      	str	r2, [r4, #40]	; 0x28
 8011616:	42a3      	cmp	r3, r4
 8011618:	bf04      	itt	eq
 801161a:	2301      	moveq	r3, #1
 801161c:	61a3      	streq	r3, [r4, #24]
 801161e:	4620      	mov	r0, r4
 8011620:	f000 f820 	bl	8011664 <__sfp>
 8011624:	6060      	str	r0, [r4, #4]
 8011626:	4620      	mov	r0, r4
 8011628:	f000 f81c 	bl	8011664 <__sfp>
 801162c:	60a0      	str	r0, [r4, #8]
 801162e:	4620      	mov	r0, r4
 8011630:	f000 f818 	bl	8011664 <__sfp>
 8011634:	2200      	movs	r2, #0
 8011636:	60e0      	str	r0, [r4, #12]
 8011638:	2104      	movs	r1, #4
 801163a:	6860      	ldr	r0, [r4, #4]
 801163c:	f7ff ff82 	bl	8011544 <std>
 8011640:	68a0      	ldr	r0, [r4, #8]
 8011642:	2201      	movs	r2, #1
 8011644:	2109      	movs	r1, #9
 8011646:	f7ff ff7d 	bl	8011544 <std>
 801164a:	68e0      	ldr	r0, [r4, #12]
 801164c:	2202      	movs	r2, #2
 801164e:	2112      	movs	r1, #18
 8011650:	f7ff ff78 	bl	8011544 <std>
 8011654:	2301      	movs	r3, #1
 8011656:	61a3      	str	r3, [r4, #24]
 8011658:	e7d2      	b.n	8011600 <__sinit+0xc>
 801165a:	bf00      	nop
 801165c:	08011f94 	.word	0x08011f94
 8011660:	0801158d 	.word	0x0801158d

08011664 <__sfp>:
 8011664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011666:	4607      	mov	r7, r0
 8011668:	f7ff ffac 	bl	80115c4 <__sfp_lock_acquire>
 801166c:	4b1e      	ldr	r3, [pc, #120]	; (80116e8 <__sfp+0x84>)
 801166e:	681e      	ldr	r6, [r3, #0]
 8011670:	69b3      	ldr	r3, [r6, #24]
 8011672:	b913      	cbnz	r3, 801167a <__sfp+0x16>
 8011674:	4630      	mov	r0, r6
 8011676:	f7ff ffbd 	bl	80115f4 <__sinit>
 801167a:	3648      	adds	r6, #72	; 0x48
 801167c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011680:	3b01      	subs	r3, #1
 8011682:	d503      	bpl.n	801168c <__sfp+0x28>
 8011684:	6833      	ldr	r3, [r6, #0]
 8011686:	b30b      	cbz	r3, 80116cc <__sfp+0x68>
 8011688:	6836      	ldr	r6, [r6, #0]
 801168a:	e7f7      	b.n	801167c <__sfp+0x18>
 801168c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011690:	b9d5      	cbnz	r5, 80116c8 <__sfp+0x64>
 8011692:	4b16      	ldr	r3, [pc, #88]	; (80116ec <__sfp+0x88>)
 8011694:	60e3      	str	r3, [r4, #12]
 8011696:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801169a:	6665      	str	r5, [r4, #100]	; 0x64
 801169c:	f000 f847 	bl	801172e <__retarget_lock_init_recursive>
 80116a0:	f7ff ff96 	bl	80115d0 <__sfp_lock_release>
 80116a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80116a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80116ac:	6025      	str	r5, [r4, #0]
 80116ae:	61a5      	str	r5, [r4, #24]
 80116b0:	2208      	movs	r2, #8
 80116b2:	4629      	mov	r1, r5
 80116b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80116b8:	f7fb fd28 	bl	800d10c <memset>
 80116bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80116c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80116c4:	4620      	mov	r0, r4
 80116c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116c8:	3468      	adds	r4, #104	; 0x68
 80116ca:	e7d9      	b.n	8011680 <__sfp+0x1c>
 80116cc:	2104      	movs	r1, #4
 80116ce:	4638      	mov	r0, r7
 80116d0:	f7ff ff62 	bl	8011598 <__sfmoreglue>
 80116d4:	4604      	mov	r4, r0
 80116d6:	6030      	str	r0, [r6, #0]
 80116d8:	2800      	cmp	r0, #0
 80116da:	d1d5      	bne.n	8011688 <__sfp+0x24>
 80116dc:	f7ff ff78 	bl	80115d0 <__sfp_lock_release>
 80116e0:	230c      	movs	r3, #12
 80116e2:	603b      	str	r3, [r7, #0]
 80116e4:	e7ee      	b.n	80116c4 <__sfp+0x60>
 80116e6:	bf00      	nop
 80116e8:	08011f94 	.word	0x08011f94
 80116ec:	ffff0001 	.word	0xffff0001

080116f0 <_fwalk_reent>:
 80116f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116f4:	4606      	mov	r6, r0
 80116f6:	4688      	mov	r8, r1
 80116f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80116fc:	2700      	movs	r7, #0
 80116fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011702:	f1b9 0901 	subs.w	r9, r9, #1
 8011706:	d505      	bpl.n	8011714 <_fwalk_reent+0x24>
 8011708:	6824      	ldr	r4, [r4, #0]
 801170a:	2c00      	cmp	r4, #0
 801170c:	d1f7      	bne.n	80116fe <_fwalk_reent+0xe>
 801170e:	4638      	mov	r0, r7
 8011710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011714:	89ab      	ldrh	r3, [r5, #12]
 8011716:	2b01      	cmp	r3, #1
 8011718:	d907      	bls.n	801172a <_fwalk_reent+0x3a>
 801171a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801171e:	3301      	adds	r3, #1
 8011720:	d003      	beq.n	801172a <_fwalk_reent+0x3a>
 8011722:	4629      	mov	r1, r5
 8011724:	4630      	mov	r0, r6
 8011726:	47c0      	blx	r8
 8011728:	4307      	orrs	r7, r0
 801172a:	3568      	adds	r5, #104	; 0x68
 801172c:	e7e9      	b.n	8011702 <_fwalk_reent+0x12>

0801172e <__retarget_lock_init_recursive>:
 801172e:	4770      	bx	lr

08011730 <__retarget_lock_acquire_recursive>:
 8011730:	4770      	bx	lr

08011732 <__retarget_lock_release_recursive>:
 8011732:	4770      	bx	lr

08011734 <__swhatbuf_r>:
 8011734:	b570      	push	{r4, r5, r6, lr}
 8011736:	460e      	mov	r6, r1
 8011738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801173c:	2900      	cmp	r1, #0
 801173e:	b096      	sub	sp, #88	; 0x58
 8011740:	4614      	mov	r4, r2
 8011742:	461d      	mov	r5, r3
 8011744:	da08      	bge.n	8011758 <__swhatbuf_r+0x24>
 8011746:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801174a:	2200      	movs	r2, #0
 801174c:	602a      	str	r2, [r5, #0]
 801174e:	061a      	lsls	r2, r3, #24
 8011750:	d410      	bmi.n	8011774 <__swhatbuf_r+0x40>
 8011752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011756:	e00e      	b.n	8011776 <__swhatbuf_r+0x42>
 8011758:	466a      	mov	r2, sp
 801175a:	f000 f903 	bl	8011964 <_fstat_r>
 801175e:	2800      	cmp	r0, #0
 8011760:	dbf1      	blt.n	8011746 <__swhatbuf_r+0x12>
 8011762:	9a01      	ldr	r2, [sp, #4]
 8011764:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011768:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801176c:	425a      	negs	r2, r3
 801176e:	415a      	adcs	r2, r3
 8011770:	602a      	str	r2, [r5, #0]
 8011772:	e7ee      	b.n	8011752 <__swhatbuf_r+0x1e>
 8011774:	2340      	movs	r3, #64	; 0x40
 8011776:	2000      	movs	r0, #0
 8011778:	6023      	str	r3, [r4, #0]
 801177a:	b016      	add	sp, #88	; 0x58
 801177c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011780 <__smakebuf_r>:
 8011780:	898b      	ldrh	r3, [r1, #12]
 8011782:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011784:	079d      	lsls	r5, r3, #30
 8011786:	4606      	mov	r6, r0
 8011788:	460c      	mov	r4, r1
 801178a:	d507      	bpl.n	801179c <__smakebuf_r+0x1c>
 801178c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011790:	6023      	str	r3, [r4, #0]
 8011792:	6123      	str	r3, [r4, #16]
 8011794:	2301      	movs	r3, #1
 8011796:	6163      	str	r3, [r4, #20]
 8011798:	b002      	add	sp, #8
 801179a:	bd70      	pop	{r4, r5, r6, pc}
 801179c:	ab01      	add	r3, sp, #4
 801179e:	466a      	mov	r2, sp
 80117a0:	f7ff ffc8 	bl	8011734 <__swhatbuf_r>
 80117a4:	9900      	ldr	r1, [sp, #0]
 80117a6:	4605      	mov	r5, r0
 80117a8:	4630      	mov	r0, r6
 80117aa:	f7ff f959 	bl	8010a60 <_malloc_r>
 80117ae:	b948      	cbnz	r0, 80117c4 <__smakebuf_r+0x44>
 80117b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117b4:	059a      	lsls	r2, r3, #22
 80117b6:	d4ef      	bmi.n	8011798 <__smakebuf_r+0x18>
 80117b8:	f023 0303 	bic.w	r3, r3, #3
 80117bc:	f043 0302 	orr.w	r3, r3, #2
 80117c0:	81a3      	strh	r3, [r4, #12]
 80117c2:	e7e3      	b.n	801178c <__smakebuf_r+0xc>
 80117c4:	4b0d      	ldr	r3, [pc, #52]	; (80117fc <__smakebuf_r+0x7c>)
 80117c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80117c8:	89a3      	ldrh	r3, [r4, #12]
 80117ca:	6020      	str	r0, [r4, #0]
 80117cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117d0:	81a3      	strh	r3, [r4, #12]
 80117d2:	9b00      	ldr	r3, [sp, #0]
 80117d4:	6163      	str	r3, [r4, #20]
 80117d6:	9b01      	ldr	r3, [sp, #4]
 80117d8:	6120      	str	r0, [r4, #16]
 80117da:	b15b      	cbz	r3, 80117f4 <__smakebuf_r+0x74>
 80117dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80117e0:	4630      	mov	r0, r6
 80117e2:	f000 f8d1 	bl	8011988 <_isatty_r>
 80117e6:	b128      	cbz	r0, 80117f4 <__smakebuf_r+0x74>
 80117e8:	89a3      	ldrh	r3, [r4, #12]
 80117ea:	f023 0303 	bic.w	r3, r3, #3
 80117ee:	f043 0301 	orr.w	r3, r3, #1
 80117f2:	81a3      	strh	r3, [r4, #12]
 80117f4:	89a0      	ldrh	r0, [r4, #12]
 80117f6:	4305      	orrs	r5, r0
 80117f8:	81a5      	strh	r5, [r4, #12]
 80117fa:	e7cd      	b.n	8011798 <__smakebuf_r+0x18>
 80117fc:	0801158d 	.word	0x0801158d

08011800 <_malloc_usable_size_r>:
 8011800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011804:	1f18      	subs	r0, r3, #4
 8011806:	2b00      	cmp	r3, #0
 8011808:	bfbc      	itt	lt
 801180a:	580b      	ldrlt	r3, [r1, r0]
 801180c:	18c0      	addlt	r0, r0, r3
 801180e:	4770      	bx	lr

08011810 <_raise_r>:
 8011810:	291f      	cmp	r1, #31
 8011812:	b538      	push	{r3, r4, r5, lr}
 8011814:	4604      	mov	r4, r0
 8011816:	460d      	mov	r5, r1
 8011818:	d904      	bls.n	8011824 <_raise_r+0x14>
 801181a:	2316      	movs	r3, #22
 801181c:	6003      	str	r3, [r0, #0]
 801181e:	f04f 30ff 	mov.w	r0, #4294967295
 8011822:	bd38      	pop	{r3, r4, r5, pc}
 8011824:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011826:	b112      	cbz	r2, 801182e <_raise_r+0x1e>
 8011828:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801182c:	b94b      	cbnz	r3, 8011842 <_raise_r+0x32>
 801182e:	4620      	mov	r0, r4
 8011830:	f000 f830 	bl	8011894 <_getpid_r>
 8011834:	462a      	mov	r2, r5
 8011836:	4601      	mov	r1, r0
 8011838:	4620      	mov	r0, r4
 801183a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801183e:	f000 b817 	b.w	8011870 <_kill_r>
 8011842:	2b01      	cmp	r3, #1
 8011844:	d00a      	beq.n	801185c <_raise_r+0x4c>
 8011846:	1c59      	adds	r1, r3, #1
 8011848:	d103      	bne.n	8011852 <_raise_r+0x42>
 801184a:	2316      	movs	r3, #22
 801184c:	6003      	str	r3, [r0, #0]
 801184e:	2001      	movs	r0, #1
 8011850:	e7e7      	b.n	8011822 <_raise_r+0x12>
 8011852:	2400      	movs	r4, #0
 8011854:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011858:	4628      	mov	r0, r5
 801185a:	4798      	blx	r3
 801185c:	2000      	movs	r0, #0
 801185e:	e7e0      	b.n	8011822 <_raise_r+0x12>

08011860 <raise>:
 8011860:	4b02      	ldr	r3, [pc, #8]	; (801186c <raise+0xc>)
 8011862:	4601      	mov	r1, r0
 8011864:	6818      	ldr	r0, [r3, #0]
 8011866:	f7ff bfd3 	b.w	8011810 <_raise_r>
 801186a:	bf00      	nop
 801186c:	200002d4 	.word	0x200002d4

08011870 <_kill_r>:
 8011870:	b538      	push	{r3, r4, r5, lr}
 8011872:	4d07      	ldr	r5, [pc, #28]	; (8011890 <_kill_r+0x20>)
 8011874:	2300      	movs	r3, #0
 8011876:	4604      	mov	r4, r0
 8011878:	4608      	mov	r0, r1
 801187a:	4611      	mov	r1, r2
 801187c:	602b      	str	r3, [r5, #0]
 801187e:	f7f1 f8fd 	bl	8002a7c <_kill>
 8011882:	1c43      	adds	r3, r0, #1
 8011884:	d102      	bne.n	801188c <_kill_r+0x1c>
 8011886:	682b      	ldr	r3, [r5, #0]
 8011888:	b103      	cbz	r3, 801188c <_kill_r+0x1c>
 801188a:	6023      	str	r3, [r4, #0]
 801188c:	bd38      	pop	{r3, r4, r5, pc}
 801188e:	bf00      	nop
 8011890:	20000914 	.word	0x20000914

08011894 <_getpid_r>:
 8011894:	f7f1 b8ea 	b.w	8002a6c <_getpid>

08011898 <__sread>:
 8011898:	b510      	push	{r4, lr}
 801189a:	460c      	mov	r4, r1
 801189c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118a0:	f000 f894 	bl	80119cc <_read_r>
 80118a4:	2800      	cmp	r0, #0
 80118a6:	bfab      	itete	ge
 80118a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80118aa:	89a3      	ldrhlt	r3, [r4, #12]
 80118ac:	181b      	addge	r3, r3, r0
 80118ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80118b2:	bfac      	ite	ge
 80118b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80118b6:	81a3      	strhlt	r3, [r4, #12]
 80118b8:	bd10      	pop	{r4, pc}

080118ba <__swrite>:
 80118ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118be:	461f      	mov	r7, r3
 80118c0:	898b      	ldrh	r3, [r1, #12]
 80118c2:	05db      	lsls	r3, r3, #23
 80118c4:	4605      	mov	r5, r0
 80118c6:	460c      	mov	r4, r1
 80118c8:	4616      	mov	r6, r2
 80118ca:	d505      	bpl.n	80118d8 <__swrite+0x1e>
 80118cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118d0:	2302      	movs	r3, #2
 80118d2:	2200      	movs	r2, #0
 80118d4:	f000 f868 	bl	80119a8 <_lseek_r>
 80118d8:	89a3      	ldrh	r3, [r4, #12]
 80118da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80118de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80118e2:	81a3      	strh	r3, [r4, #12]
 80118e4:	4632      	mov	r2, r6
 80118e6:	463b      	mov	r3, r7
 80118e8:	4628      	mov	r0, r5
 80118ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118ee:	f000 b817 	b.w	8011920 <_write_r>

080118f2 <__sseek>:
 80118f2:	b510      	push	{r4, lr}
 80118f4:	460c      	mov	r4, r1
 80118f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118fa:	f000 f855 	bl	80119a8 <_lseek_r>
 80118fe:	1c43      	adds	r3, r0, #1
 8011900:	89a3      	ldrh	r3, [r4, #12]
 8011902:	bf15      	itete	ne
 8011904:	6560      	strne	r0, [r4, #84]	; 0x54
 8011906:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801190a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801190e:	81a3      	strheq	r3, [r4, #12]
 8011910:	bf18      	it	ne
 8011912:	81a3      	strhne	r3, [r4, #12]
 8011914:	bd10      	pop	{r4, pc}

08011916 <__sclose>:
 8011916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801191a:	f000 b813 	b.w	8011944 <_close_r>
	...

08011920 <_write_r>:
 8011920:	b538      	push	{r3, r4, r5, lr}
 8011922:	4d07      	ldr	r5, [pc, #28]	; (8011940 <_write_r+0x20>)
 8011924:	4604      	mov	r4, r0
 8011926:	4608      	mov	r0, r1
 8011928:	4611      	mov	r1, r2
 801192a:	2200      	movs	r2, #0
 801192c:	602a      	str	r2, [r5, #0]
 801192e:	461a      	mov	r2, r3
 8011930:	f7f1 f8db 	bl	8002aea <_write>
 8011934:	1c43      	adds	r3, r0, #1
 8011936:	d102      	bne.n	801193e <_write_r+0x1e>
 8011938:	682b      	ldr	r3, [r5, #0]
 801193a:	b103      	cbz	r3, 801193e <_write_r+0x1e>
 801193c:	6023      	str	r3, [r4, #0]
 801193e:	bd38      	pop	{r3, r4, r5, pc}
 8011940:	20000914 	.word	0x20000914

08011944 <_close_r>:
 8011944:	b538      	push	{r3, r4, r5, lr}
 8011946:	4d06      	ldr	r5, [pc, #24]	; (8011960 <_close_r+0x1c>)
 8011948:	2300      	movs	r3, #0
 801194a:	4604      	mov	r4, r0
 801194c:	4608      	mov	r0, r1
 801194e:	602b      	str	r3, [r5, #0]
 8011950:	f7f1 f8e7 	bl	8002b22 <_close>
 8011954:	1c43      	adds	r3, r0, #1
 8011956:	d102      	bne.n	801195e <_close_r+0x1a>
 8011958:	682b      	ldr	r3, [r5, #0]
 801195a:	b103      	cbz	r3, 801195e <_close_r+0x1a>
 801195c:	6023      	str	r3, [r4, #0]
 801195e:	bd38      	pop	{r3, r4, r5, pc}
 8011960:	20000914 	.word	0x20000914

08011964 <_fstat_r>:
 8011964:	b538      	push	{r3, r4, r5, lr}
 8011966:	4d07      	ldr	r5, [pc, #28]	; (8011984 <_fstat_r+0x20>)
 8011968:	2300      	movs	r3, #0
 801196a:	4604      	mov	r4, r0
 801196c:	4608      	mov	r0, r1
 801196e:	4611      	mov	r1, r2
 8011970:	602b      	str	r3, [r5, #0]
 8011972:	f7f1 f8e2 	bl	8002b3a <_fstat>
 8011976:	1c43      	adds	r3, r0, #1
 8011978:	d102      	bne.n	8011980 <_fstat_r+0x1c>
 801197a:	682b      	ldr	r3, [r5, #0]
 801197c:	b103      	cbz	r3, 8011980 <_fstat_r+0x1c>
 801197e:	6023      	str	r3, [r4, #0]
 8011980:	bd38      	pop	{r3, r4, r5, pc}
 8011982:	bf00      	nop
 8011984:	20000914 	.word	0x20000914

08011988 <_isatty_r>:
 8011988:	b538      	push	{r3, r4, r5, lr}
 801198a:	4d06      	ldr	r5, [pc, #24]	; (80119a4 <_isatty_r+0x1c>)
 801198c:	2300      	movs	r3, #0
 801198e:	4604      	mov	r4, r0
 8011990:	4608      	mov	r0, r1
 8011992:	602b      	str	r3, [r5, #0]
 8011994:	f7f1 f8e1 	bl	8002b5a <_isatty>
 8011998:	1c43      	adds	r3, r0, #1
 801199a:	d102      	bne.n	80119a2 <_isatty_r+0x1a>
 801199c:	682b      	ldr	r3, [r5, #0]
 801199e:	b103      	cbz	r3, 80119a2 <_isatty_r+0x1a>
 80119a0:	6023      	str	r3, [r4, #0]
 80119a2:	bd38      	pop	{r3, r4, r5, pc}
 80119a4:	20000914 	.word	0x20000914

080119a8 <_lseek_r>:
 80119a8:	b538      	push	{r3, r4, r5, lr}
 80119aa:	4d07      	ldr	r5, [pc, #28]	; (80119c8 <_lseek_r+0x20>)
 80119ac:	4604      	mov	r4, r0
 80119ae:	4608      	mov	r0, r1
 80119b0:	4611      	mov	r1, r2
 80119b2:	2200      	movs	r2, #0
 80119b4:	602a      	str	r2, [r5, #0]
 80119b6:	461a      	mov	r2, r3
 80119b8:	f7f1 f8da 	bl	8002b70 <_lseek>
 80119bc:	1c43      	adds	r3, r0, #1
 80119be:	d102      	bne.n	80119c6 <_lseek_r+0x1e>
 80119c0:	682b      	ldr	r3, [r5, #0]
 80119c2:	b103      	cbz	r3, 80119c6 <_lseek_r+0x1e>
 80119c4:	6023      	str	r3, [r4, #0]
 80119c6:	bd38      	pop	{r3, r4, r5, pc}
 80119c8:	20000914 	.word	0x20000914

080119cc <_read_r>:
 80119cc:	b538      	push	{r3, r4, r5, lr}
 80119ce:	4d07      	ldr	r5, [pc, #28]	; (80119ec <_read_r+0x20>)
 80119d0:	4604      	mov	r4, r0
 80119d2:	4608      	mov	r0, r1
 80119d4:	4611      	mov	r1, r2
 80119d6:	2200      	movs	r2, #0
 80119d8:	602a      	str	r2, [r5, #0]
 80119da:	461a      	mov	r2, r3
 80119dc:	f7f1 f868 	bl	8002ab0 <_read>
 80119e0:	1c43      	adds	r3, r0, #1
 80119e2:	d102      	bne.n	80119ea <_read_r+0x1e>
 80119e4:	682b      	ldr	r3, [r5, #0]
 80119e6:	b103      	cbz	r3, 80119ea <_read_r+0x1e>
 80119e8:	6023      	str	r3, [r4, #0]
 80119ea:	bd38      	pop	{r3, r4, r5, pc}
 80119ec:	20000914 	.word	0x20000914

080119f0 <_init>:
 80119f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119f2:	bf00      	nop
 80119f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119f6:	bc08      	pop	{r3}
 80119f8:	469e      	mov	lr, r3
 80119fa:	4770      	bx	lr

080119fc <_fini>:
 80119fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119fe:	bf00      	nop
 8011a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a02:	bc08      	pop	{r3}
 8011a04:	469e      	mov	lr, r3
 8011a06:	4770      	bx	lr
